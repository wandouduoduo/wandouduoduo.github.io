<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维随笔</title>
  
  <subtitle>SRE &amp; Devops &amp; Architect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wandouduoduo.github.io/"/>
  <updated>2020-12-29T21:20:09.997Z</updated>
  <id>https://wandouduoduo.github.io/</id>
  
  <author>
    <name>豌豆多多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详解docker-compose安装sentry集群解决方案&lt;二&gt;</title>
    <link href="https://wandouduoduo.github.io/articles/312eda9c.html"/>
    <id>https://wandouduoduo.github.io/articles/312eda9c.html</id>
    <published>2020-12-29T09:32:11.000Z</published>
    <updated>2020-12-29T21:20:09.997Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>接上篇文章，上篇文章详细介绍了架构和单节点的搭建、配置和优化。本篇详细介绍集群方案。特别提醒没看上篇文章的请返回先看，本篇集群是在上篇文章的基础上配置的，并且上篇文章中的简单步骤，本篇不再说明，直接跳过。详解docker-compose安装sentry集群篇现在开始。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>上篇文章中的3个节点，并都已执行完install.sh没有报错。</p><p><strong>主节点</strong>：192.168.1.100</p><p><strong>从节点</strong>：192.168.1.101，192.168.1.102</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><h4 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a><strong>任务目标</strong></h4><p>Sentry平台三台服务器集群部署</p><h4 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a><strong>部署方式</strong></h4><p>采用docker平台，准确说应该是：docker-compose</p><h4 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h4><p>服务端模块：redis、postgres、memcached、stmp、sentry-web、sentry-worker和sentry-corn</p><p>功能如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis  <span class="comment">#支持消息队列和任务调度</span></span><br><span class="line">postgres <span class="comment">#数据存储</span></span><br><span class="line">memcached <span class="comment">#kv存储，用于worker数据管理</span></span><br><span class="line">stmp <span class="comment">#邮件服务</span></span><br><span class="line">sentry-cron <span class="comment">#实现定时任务，如定时群发邮件</span></span><br><span class="line">sentry-worker <span class="comment">#处理数据解析等任务，完成异常的分类、入库等操作</span></span><br><span class="line">sentry-web <span class="comment">#网络服务，后台网站和报错接口</span></span><br></pre></td></tr></table></figure><h4 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h4><p>剩下2台作为从节点，组件有：sentry-worker、sentry-web和memcached。从节点可以随负载变化动态扩容</p><h3 id="修改主节点配置"><a href="#修改主节点配置" class="headerlink" title="修改主节点配置"></a>修改主节点配置</h3><p>修改主节点配置文件docker-compose.yml，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.4&apos;</span><br><span class="line"></span><br><span class="line">x-defaults: &amp;defaults</span><br><span class="line">  restart: unless-stopped</span><br><span class="line">  build:</span><br><span class="line">    context: .</span><br><span class="line">  depends_on:</span><br><span class="line">    - redis</span><br><span class="line">    - postgres</span><br><span class="line">    - memcached</span><br><span class="line">    - smtp</span><br><span class="line">  env_file: .env</span><br><span class="line">  environment:</span><br><span class="line">    SENTRY_MEMCACHED_HOST: memcached</span><br><span class="line">    SENTRY_REDIS_HOST: redis</span><br><span class="line">    SENTRY_POSTGRES_HOST: postgres</span><br><span class="line">    SENTRY_EMAIL_HOST: smtp</span><br><span class="line">  volumes:</span><br><span class="line">    - sentry-data:/var/lib/sentry/files</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  smtp:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: tianon/exim4</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;192.168.1.100:25:25&apos;</span><br><span class="line"></span><br><span class="line">  memcached:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: memcached:1.5-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;192.168.1.100:11211:11211&apos;</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: redis:3.2-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;192.168.1.100:6379:6379&apos;</span><br><span class="line"></span><br><span class="line">  postgres:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: postgres:9.5</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;192.168.1.100:5432:5432&apos;</span><br><span class="line">    volumes:</span><br><span class="line">      - sentry-postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  web:</span><br><span class="line">    &lt;&lt;: *defaults</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;9000:9000&apos;</span><br><span class="line">  cron:</span><br><span class="line">    &lt;&lt;: *defaults</span><br><span class="line">    command: run cron</span><br><span class="line"></span><br><span class="line">  worker:</span><br><span class="line">    &lt;&lt;: *defaults</span><br><span class="line">    command: run worker</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">    sentry-data:</span><br><span class="line">      external: true</span><br><span class="line">    sentry-postgres:</span><br><span class="line">      external: true</span><br></pre></td></tr></table></figure><h3 id="修改从节点配置"><a href="#修改从节点配置" class="headerlink" title="修改从节点配置"></a>修改从节点配置</h3><p>修改从节点配置文件docker-compose.yml，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.4&apos;</span><br><span class="line"></span><br><span class="line">x-defaults: &amp;defaults</span><br><span class="line">  restart: unless-stopped</span><br><span class="line">  build:</span><br><span class="line">    context: .</span><br><span class="line">  env_file: .env</span><br><span class="line">  environment:</span><br><span class="line">    SENTRY_MEMCACHED_HOST: memcached</span><br><span class="line">    SENTRY_REDIS_HOST: 192.168.1.100</span><br><span class="line">    SENTRY_POSTGRES_HOST: 192.168.1.100</span><br><span class="line">    SENTRY_EMAIL_HOST: 192.168.1.100</span><br><span class="line">  volumes:</span><br><span class="line">    - sentry-data:/var/lib/sentry/files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    &lt;&lt;: *defaults</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;9000:9000&apos;</span><br><span class="line">  memcached:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: memcached:1.5-alpine</span><br><span class="line">  worker:</span><br><span class="line">    &lt;&lt;: *defaults</span><br><span class="line">    command: run worker -c 3</span><br><span class="line">volumes:</span><br><span class="line">    sentry-data:</span><br><span class="line">      external: true</span><br></pre></td></tr></table></figure><h3 id="统一存储"><a href="#统一存储" class="headerlink" title="统一存储"></a>统一存储</h3><p>集群分布式部署需要一个统一的存储服务，用于sourcemap等文件的存储。采用minio，部署在主节点。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/minio/&#123;data,config&#125;</span><br><span class="line"></span><br><span class="line">docker run -p 6000:9000 --name minio \</span><br><span class="line">    -d --restart=always \</span><br><span class="line">    -e <span class="string">"MINIO_ACCESS_KEY=wandouduoduo"</span> \</span><br><span class="line">    -e <span class="string">"MINIO_SECRET_KEY=wdddxxxx"</span> \</span><br><span class="line">    -v /opt/minio/data:/data \</span><br><span class="line">    -v /opt/minio/config:/root/.minio \</span><br><span class="line">    minio/minio server /data</span><br></pre></td></tr></table></figure><h4 id="创建bucket"><a href="#创建bucket" class="headerlink" title="创建bucket"></a>创建bucket</h4><p>访问minio页面</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/312eda9c/1.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/312eda9c/2.png" alt></p><p>主从节点的配置文件config.yml添加filestore信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filestore.backend: &apos;s3&apos;</span><br><span class="line">filestore.options:</span><br><span class="line">  access_key: &apos;wandouduoduo&apos;</span><br><span class="line">  secret_key: &apos;wdddxxxx&apos;</span><br><span class="line">  bucket_name: &apos;sentry&apos;</span><br><span class="line">  endpoint_url: &apos;http://172.16.1.100:6000&apos;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动服务时，可worker数量可根据机器核数进行配置。</p><h4 id="主节点启动"><a href="#主节点启动" class="headerlink" title="主节点启动"></a>主节点启动</h4><p>启动2个worker和1个web实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --scale worker=2</span><br></pre></td></tr></table></figure><h4 id="从节点启动"><a href="#从节点启动" class="headerlink" title="从节点启动"></a>从节点启动</h4><p>启动4个worker和一个web实例 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --scale worker=4</span><br></pre></td></tr></table></figure><p><em>注意：以上配置需要根据服务器和流量的情况调整，以最大化利用机器资源。前端上传sourcemap文件较多时，worker耗费cpu资源会比较厉害</em></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>然后负载均衡到所有节点的9000端口，访问即可，到这里集群搭建完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sentry集群方案已全部搭建完成，当然该集群还可以优化，例如redis独立集群等等。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇文章，上篇文章详细介绍了架构和单节点的搭建、配置和优化。本篇详细介绍集群方案。特别提醒没看上篇文章的请返回先看，本篇集群是在上篇文章的基础上配置的，并且上篇文章中的简单步骤，本篇不再说明，直接跳过。详解docker-compose安装sentry集群篇现在开始。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详解docker-compose安装sentry集群解决方案&lt;一&gt;</title>
    <link href="https://wandouduoduo.github.io/articles/9e1f41fe.html"/>
    <id>https://wandouduoduo.github.io/articles/9e1f41fe.html</id>
    <published>2020-12-29T03:57:00.000Z</published>
    <updated>2020-12-29T21:20:09.998Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Sentry</code>是一个开源的实时错误报告和日志聚合工具平台。它专门监测错误并提取所有有用信息用于分析，不再麻烦地依赖用户反馈来定位问题。支持 web 前后端、移动应用以及游戏，支持 Python、OC、Java、Go、Node.js、Django、RoR 等主流编程语言和框架 ，还提供了 GitHub、Slack、Trello 等常见开发工具的集成。因sentry版本、安装方式和smtp要求的不同，新版本sentry不支持集群方案，本篇文章旨在用于sentry9.1.2版本+支持ssl/tls加密的smtp服务的单节点安装指南和集群解决方案。</p><a id="more"></a><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/1.png" alt="在这里插入图片描述"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>版本</strong>: sentry 9.1.2<br><strong>安装方式</strong>: docker-compose<br><strong>系统环境</strong>: centos7，docker 17.05.0+、docker-Compose 1.17.0+<br><strong>集群节点</strong>：192.168.1.100、192.168.1.101、192.168.1.102</p><h2 id="集群方案"><a href="#集群方案" class="headerlink" title="集群方案"></a>集群方案</h2><p><strong>所有节点上都需要如下操作</strong></p><h3 id="拉取sentry配置"><a href="#拉取sentry配置" class="headerlink" title="拉取sentry配置"></a>拉取sentry配置</h3><p>sentry的配置可以在<a href="https://github.com/getsentry/onpremise/releases/tag/9.1.2" rel="noopener" target="_blank">官方github</a>里面下载release版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]$ mkdir sentry &amp;&amp; cd sentry</span><br><span class="line">[root@bogon sentry]$ wget https://github.com/getsentry/onpremise/archive/9.1.2.tar.gz</span><br><span class="line">[root@bogon sentry]$ tar -zxvf 9.1.2.tar.gz </span><br><span class="line">[root@bogon sentry]$ tree</span><br><span class="line">.</span><br><span class="line">├── 9.1.2.tar.gz</span><br><span class="line">└── onpremise-9.1.2</span><br><span class="line">    ├── config.yml# 配置文件yaml，键值对yaml格式导入</span><br><span class="line">    ├── docker-compose.yml# docker-compose文件，用于构建镜像</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    ├── install.sh# 自动安装脚本</span><br><span class="line">    ├── LICENSE</span><br><span class="line">    ├── Makefile</span><br><span class="line">    ├── README.md</span><br><span class="line">    ├── requirements.txt# 依赖包声明</span><br><span class="line">    ├── sentry.conf.py# 配置文件python，通过python程序导入</span><br><span class="line">    └── test.sh</span><br><span class="line"></span><br><span class="line">1 directory, 11 files</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>这里主要修改邮件模块配置。但有个小问题，需要区分你的邮件服务器是用普通smtp 25端口还是ssl/tls的465/587端口。</p><p>以下这个gmail表格解释的比较清楚，以便使用正确的信息更新您的客户端</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>接收邮件 (IMAP) 服务器</td><td>imap.gmail.com 要求 SSL：是 端口：993</td></tr><tr><td>发送邮件 (SMTP) 服务器</td><td>smtp.gmail.com 要求 SSL：是 要求 TLS：是（如适用） 使用身份验证：是 SSL 端口：465 TLS/STARTTLS 端口：587</td></tr><tr><td>完整名称或显示名称</td><td>您的姓名</td></tr><tr><td>帐号名、用户名或电子邮件地址</td><td>您的完整电子邮件地址</td></tr><tr><td>密码</td><td>您的 Gmail 密码</td></tr></tbody></table><p>如果你的smtp服务器支持ssl/tls，或者只支持这两种方式（可以提前telnet 服务器和端口验证），那么需要改动几个地方，下面以163邮箱为例：</p><p><strong>config.yml文件</strong></p><p>邮箱服务器支持ssl安全的，配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos onpremise-9.1.2]# cat config.yml </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mail Server <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##############</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mail.backend: <span class="string">'smtp'</span>  <span class="comment"># Use dummy if you want to disable email entirely</span></span></span><br><span class="line">mail.host: 'smtp.163.com'</span><br><span class="line">mail.port: 465</span><br><span class="line">mail.username: 'wandouduoduo@163.com'</span><br><span class="line">mail.password: '************'</span><br><span class="line">mail.use-tls: true</span><br><span class="line">mail.from: 'wandouduoduo@163.com'</span><br></pre></td></tr></table></figure><p>若邮件smtp服务器只支持普通的25端口，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@VM_0_5_centos</span> <span class="string">onpremise-9.1.2]#</span> <span class="string">cat</span> <span class="string">config.yml</span> </span><br><span class="line"><span class="comment">###############</span></span><br><span class="line"><span class="comment"># Mail Server #</span></span><br><span class="line"><span class="comment">###############</span></span><br><span class="line"></span><br><span class="line"><span class="string">mail.backend:</span> <span class="string">'smtp'</span>  <span class="comment"># Use dummy if you want to disable email entirely</span></span><br><span class="line"><span class="string">mail.host:</span> <span class="string">'smtp.xxxx.com'</span></span><br><span class="line"><span class="string">mail.port:</span> <span class="number">25</span></span><br><span class="line"><span class="string">mail.username:</span> <span class="string">'wandouduoduo@xxxx.com'</span></span><br><span class="line"><span class="string">mail.password:</span> <span class="string">'**********'</span></span><br><span class="line"><span class="string">mail.use-tls:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">mail.from:</span> <span class="string">'root@localhost'</span></span><br></pre></td></tr></table></figure><p><strong>修改requirements.txt文件</strong></p><p>通过pip安装上一步配置里面用到的<code>django_stmp_ssl</code>模块，在requirements.txt里面的模块会在所有相关容器里面自动安装，如邮件为普通25端口，省略此步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos onpremise-9.1.2]# cat requirements.txt </span><br><span class="line"><span class="meta">#</span><span class="bash"> Add plugins here</span></span><br><span class="line">django-smtp-ssl==1.0</span><br></pre></td></tr></table></figure><p><strong>修改sentry.conf.py文件</strong></p><p>在头部插入如下两行代码，如邮件为普通25端口，省略此步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.setdefaulttimeout(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>主要是为了解决邮件模块socket超时的问题，默认的socket超时时间是5s。否则很容易报错，特别是邮件用ssl协议的，如下图：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/2.png" alt="在这里插入图片描述"></p><p><strong>修改docker-compose.yml文件</strong></p><p>主要修改配置邮件和pg数据库相关的环境变量：<br>（1）修改：<code>x-defaults.environment.SENTRY_EMAIL_HOST: smtp.163.com</code><br>（2）新增：<code>x-defaults.environment.SENTRY_DB_PASSWORD: postgres</code><br>（3）新增：<code>services.postgres.environment.POSTGRES_PASSWORD=postgres</code></p><p>完整配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> This docker-compose.yml is meant to be just an example of how</span></span><br><span class="line"><span class="comment"># you could accomplish this on your own. It is not intended to work in</span></span><br><span class="line"><span class="comment"># all use-cases and must be adapted to fit your needs. This is merely</span></span><br><span class="line"><span class="comment"># a guideline.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See docs.getsentry.com/on-premise/server/ for full</span></span><br><span class="line"><span class="comment"># instructions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3.4'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x-defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    context:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">  depends_on:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">redis</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">postgres</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">memcached</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">smtp</span></span><br><span class="line"><span class="attr">  env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    SENTRY_MEMCACHED_HOST:</span> <span class="string">memcached</span></span><br><span class="line"><span class="attr">    SENTRY_REDIS_HOST:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    SENTRY_POSTGRES_HOST:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    SENTRY_DB_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    SENTRY_EMAIL_HOST:</span> <span class="string">smtp.126.com</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - sentry-data:</span><span class="string">/var/lib/sentry/files</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  smtp:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">tianon/exim4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  memcached:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">memcached:1.5-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:3.2-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  postgres:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">postgres:9.5</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_PASSWORD=postgres</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - sentry-postgres:</span><span class="string">/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'9000:9000'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cron:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">run</span> <span class="string">cron</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  worker:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">run</span> <span class="string">worker</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">    sentry-data:</span></span><br><span class="line"><span class="attr">      external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    sentry-postgres:</span></span><br><span class="line"><span class="attr">      external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="自动安装并启动"><a href="#自动安装并启动" class="headerlink" title="自动安装并启动"></a>自动安装并启动</h3><h4 id="准备并构建镜像"><a href="#准备并构建镜像" class="headerlink" title="准备并构建镜像"></a>准备并构建镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 准备构建镜像</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>构建过程中在终端里需要创建用户账号，输入正确的邮箱和密码，设置为超级管理员即可。如下所示：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/3.png" alt="在这里插入图片描述"></p><p>如如果没有弹出来让你填写或者填错了取消也都没关系，在intall.sh脚本跑完之后可以单独创建用户，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web createuser</span><br></pre></td></tr></table></figure><h4 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后通过docker命令可以看到容器都起来了，如开头的框架图，sentry服务默认用到了7个容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos onpremise-9.1.2]# docker ps |grep onpremise</span><br><span class="line">8ec4557197f4        onpremise-912_worker                                "/entrypoint.sh run …"   14 hours ago        Up 14 hours            9000/tcp                    onpremise-912_worker_1</span><br><span class="line">9c173154c5a6        onpremise-912_web                                   "/entrypoint.sh run …"   14 hours ago        Up 14 hours            0.0.0.0:9000-&gt;9000/tcp      onpremise-912_web_1</span><br><span class="line">0b513728479b        onpremise-912_cron                                  "/entrypoint.sh run …"   14 hours ago        Up 14 hours            9000/tcp                    onpremise-912_cron_1</span><br><span class="line">e4e98dbaf0e2        postgres:9.5                                        "docker-entrypoint.s…"   23 hours ago        Up 22 hours            5432/tcp                    onpremise-912_postgres_1</span><br><span class="line">dc4281107dad        tianon/exim4                                        "docker-entrypoint.s…"   23 hours ago        Up 22 hours            25/tcp                      onpremise-912_smtp_1</span><br><span class="line">c888e6567f55        redis:3.2-alpine                                    "docker-entrypoint.s…"   23 hours ago        Up 22 hours            6379/tcp                    onpremise-912_redis_1</span><br><span class="line">d4a3f95533ba        memcached:1.5-alpine                                "docker-entrypoint.s…"   23 hours ago        Up 22 hours            11211/tcp                   onpremise-912_memcached_1</span><br></pre></td></tr></table></figure><p>这几个容器应用的作用：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>cron</td><td>定时任务，使用的是celery-beat</td></tr><tr><td>memcached</td><td>memcached</td></tr><tr><td>postgres</td><td>pgsql数据库</td></tr><tr><td>redis</td><td>运行celery需要的服务</td></tr><tr><td>smtp</td><td>邮件服务</td></tr><tr><td>web</td><td>使用django+drf写的一套Sentry Web界面</td></tr><tr><td>worker</td><td>celery的worker服务，用来跑异步任务的</td></tr></tbody></table><p><strong>离线安装</strong></p><p>上述都是在线安装的，涉及到的所有docker image都是从docker hub registry当中远程拉取的。如果是本地局域网或离线安装，需要哪些镜像呢？</p><p>在docker-compose.yml和docker-compose build执行中找到答案。其中的sentry镜像经过docker-compose build会基于它构建出三个镜像，分别是：web、cron和worker。从执行结果中可知，最终就得到了sentry系统7个容器镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> [root@VM_0_5_centos onpremise-9.1.2]# docker-compose build</span><br><span class="line"> smtp uses an image, skipping</span><br><span class="line"> memcached uses an image, skipping</span><br><span class="line"> redis uses an image, skipping</span><br><span class="line"> postgres uses an image, skipping</span><br><span class="line"> Building web</span><br><span class="line"> Step 1/2 : ARG SENTRY_IMAGE</span><br><span class="line"> Step 2/2 : FROM $&#123;SENTRY_IMAGE:-sentry:9.1.2&#125;-onbuild</span><br><span class="line"> Successfully built 1ce74ed80f84</span><br><span class="line"> Successfully tagged onpremise-912_web:latest</span><br><span class="line"> Building cron</span><br><span class="line"> Step 1/2 : ARG SENTRY_IMAGE</span><br><span class="line"> Step 2/2 : FROM $&#123;SENTRY_IMAGE:-sentry:9.1.2&#125;-onbuild</span><br><span class="line"> Successfully built 1ce74ed80f84</span><br><span class="line"> Successfully tagged onpremise-912_cron:latest</span><br><span class="line"> Building worker</span><br><span class="line"> Step 1/2 : ARG SENTRY_IMAGE</span><br><span class="line"> Step 2/2 : FROM $&#123;SENTRY_IMAGE:-sentry:9.1.2&#125;-onbuild</span><br><span class="line"> Successfully built 1ce74ed80f84</span><br><span class="line"> Successfully tagged onpremise-912_worker:latest</span><br><span class="line">1234567891011121314151617181920</span><br></pre></td></tr></table></figure><p>所以，离线安装只需要将上述5个容器镜像提前下载下来并导入到内网即可：</p><ul><li>sentry:9.1.2-onbuild</li><li>redis:3.2-alpine</li><li>postgres:9.5</li><li>tianon/exim4</li><li>memcached:1.5-alpine</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save -o xxx.tar xxxx:latest</span><br><span class="line">docker load -i xxx.tar</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="页面访问验证"><a href="#页面访问验证" class="headerlink" title="页面访问验证"></a>页面访问验证</h3><p>浏览器中输入<a href="http://xxxx:9000访问，输入在install时创建的超级管理员账号密码登陆即可。" rel="noopener" target="_blank">http://xxxx:9000访问，输入在install时创建的超级管理员账号密码登陆即可。</a><br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/4.png" alt="在这里插入图片描述"></p><p><strong>调整了配置要重启应用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build# 重新构建镜像</span><br><span class="line">docker-compose run --rm web upgrade# 同步数据</span><br><span class="line">docker-compose up -d        # 重新启动容器</span><br></pre></td></tr></table></figure><h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><p>在web界面上，用户下拉，管理–&gt;Email–&gt;测试发送邮件<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/6.png" alt="在这里插入图片描述"><br>然后在邮箱中即可收到验证测试邮件。</p><h3 id="配置SDK并验证异常捕获及通知"><a href="#配置SDK并验证异常捕获及通知" class="headerlink" title="配置SDK并验证异常捕获及通知"></a>配置SDK并验证异常捕获及通知</h3><p>创建一个python的除0异常测试项目来验证，比较简单。页面中会给出了使用提示。即在项目运行环境中安装sdk，然后在项目代码里面插入模块即可。<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/7.png" alt="在这里插入图片描述"><br>运行python程序，页面可以看到这个错误并收到了邮件通知。大功告成！！！<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/8.png" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/9.png" alt="在这里插入图片描述"></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="调整语言"><a href="#调整语言" class="headerlink" title="调整语言"></a>调整语言</h3><p>默认为英文，这里改为中文。在界面左上角Sentry账户那下拉选择User Settings，然后再Account Detail里面选择language为Simplified Chinese，看到提示成功后刷新页面即可。<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/9e1f41fe/5.png" alt="在这里插入图片描述"></p><h3 id="集成其它模块示例"><a href="#集成其它模块示例" class="headerlink" title="集成其它模块示例"></a>集成其它模块示例</h3><p>如果要集成其它模块，如钉钉通知，只需要两步：</p><h4 id="在requirements-txt里面添加模块"><a href="#在requirements-txt里面添加模块" class="headerlink" title="在requirements.txt里面添加模块"></a>在requirements.txt里面添加模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Add plugins here</span></span><br><span class="line">django-smtp-ssl~=1.0  # 发邮件支持SSL协议</span><br><span class="line">sentry-dingding~=0.0.2  # 钉钉通知插件</span><br><span class="line">redis-py-cluster==1.3.4  # redis-cluster连接</span><br></pre></td></tr></table></figure><h4 id="配置通知"><a href="#配置通知" class="headerlink" title="配置通知"></a>配置通知</h4><p>页面中任意选择一个项目 –&gt; 设置 –&gt; 点击Legacy Integrations –&gt; 搜索到DingDing开启并配置钉钉机器人Access Token即可完成。</p><h3 id="清理历史数据"><a href="#清理历史数据" class="headerlink" title="清理历史数据"></a>清理历史数据</h3><h4 id="只保留60天数据"><a href="#只保留60天数据" class="headerlink" title="只保留60天数据"></a>只保留60天数据</h4><p>命令cleanup删除postgresql数据，但postgrdsql对于delete, update等操作，只是将对应行标志为DEAD，属于”软删除“，并没有真正释放磁盘空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it sentry_worker_1 bash</span><br><span class="line">$ sentry cleanup  --days 60</span><br></pre></td></tr></table></figure><h4 id="postgres数据清理"><a href="#postgres数据清理" class="headerlink" title="postgres数据清理"></a>postgres数据清理</h4><p>清理完后会彻底删除数据，并释放磁盘空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it sentry_postgres_1 bash</span><br><span class="line">$ vacuumdb -U postgres -d postgres -v -f --analyze</span><br></pre></td></tr></table></figure><h4 id="定时清理脚本"><a href="#定时清理脚本" class="headerlink" title="定时清理脚本"></a>定时清理脚本</h4><p>直接设定定时执行上述两步，避免每次要手动清理或时间太久难以清理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">docker <span class="built_in">exec</span> -i sentry_worker_1 sentry cleanup --days 60 &amp;&amp; docker <span class="built_in">exec</span> -i -u postgres sentry_postgres_1 vacuumdb -U postgres -d postgres -v -f --analyze</span><br></pre></td></tr></table></figure><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>Sentry有非常好的数据迁移的设计，升级Sentry非常方便。每次使用pip更新Sentry包之后执行升级命令”sentry upgrade”即可。对应到docker-compose的方式，原则上我们只需要dockerfile里面更新sentry的docker镜像的版本号（如果是离线版本则要提前下载新镜像），然后按照上面提到的命令重启容器即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build# 重新构建镜像</span><br><span class="line">docker-compose run --rm web upgrade# 同步数据</span><br><span class="line">docker-compose up -d        # 重新启动容器</span><br></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>如果报错没有组织团队，需要进入到db里面查看，可能是数据库没有初始化：</p><h3 id="进入postgres数据库容器"><a href="#进入postgres数据库容器" class="headerlink" title="进入postgres数据库容器"></a>进入postgres数据库容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it onpremise_postgres_1 bash</span><br></pre></td></tr></table></figure><h3 id="进入postgres数据库"><a href="#进入postgres数据库" class="headerlink" title="进入postgres数据库"></a>进入postgres数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 127.0.0.1 -d postgres -U postgres</span><br></pre></td></tr></table></figure><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><p>查看sentry_project，sentry_organization两个表是否有数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# select * from sentry_project;</span><br><span class="line">postgres=# select * from sentry_organization ;</span><br></pre></td></tr></table></figure><p>如果确认是没有数据，进行创建。</p><h3 id="打开shell"><a href="#打开shell" class="headerlink" title="打开shell"></a>打开shell</h3><p>进入sentry的web的shell里面，其实就是一个python端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web shell</span><br></pre></td></tr></table></figure><h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sentry.models <span class="keyword">import</span> Project</span><br><span class="line"><span class="keyword">from</span> sentry.receivers.core <span class="keyword">import</span> create_default_projects</span><br><span class="line">create_default_projects([Project])</span><br></pre></td></tr></table></figure><h3 id="退出shell创建用户"><a href="#退出shell创建用户" class="headerlink" title="退出shell创建用户"></a>退出shell创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web createuser</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文详细介绍了单节点sentry9.1.2容器化搭建过程，并详解了邮件和其他集成的组件的优化等等。但限于篇幅问题，本文就写到这里，下一篇详细介绍集群方案。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Sentry&lt;/code&gt;是一个开源的实时错误报告和日志聚合工具平台。它专门监测错误并提取所有有用信息用于分析，不再麻烦地依赖用户反馈来定位问题。支持 web 前后端、移动应用以及游戏，支持 Python、OC、Java、Go、Node.js、Django、RoR 等主流编程语言和框架 ，还提供了 GitHub、Slack、Trello 等常见开发工具的集成。因sentry版本、安装方式和smtp要求的不同，新版本sentry不支持集群方案，本篇文章旨在用于sentry9.1.2版本+支持ssl/tls加密的smtp服务的单节点安装指南和集群解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务部署" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Sentry" scheme="https://wandouduoduo.github.io/tags/Sentry/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装字体</title>
    <link href="https://wandouduoduo.github.io/articles/dfe24446.html"/>
    <id>https://wandouduoduo.github.io/articles/dfe24446.html</id>
    <published>2020-12-29T02:57:34.000Z</published>
    <updated>2020-12-29T03:42:11.845Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Linux字体确实是个问题。场景一：验证码已成为了用户认证的标配，动态变动可以有效防止注入，提高用户认证的安全。场景二：开发的系统中依赖系统的字体，如报表系统中发现中文乱码或中文字体重叠的情况等问题，这些都是linux字体惹的祸。本文以安装中文字体为例帮你解决字体这一小问题。</p><a id="more"></a><h2 id="查看字体"><a href="#查看字体" class="headerlink" title="查看字体"></a>查看字体</h2><p>首先考虑的就是操作系统是否有中文字体，在<a href="http://www.linuxidc.com/topicnews.aspx?tid=14" rel="noopener" target="_blank">CentOS</a> 7中发现输入命令查看字体列表是提示命令无效：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/1.png" alt="这里写图片描述"><br>如上图可以看出，不仅没有中文字体，连字体库都没有呢。</p><h2 id="安装字体库"><a href="#安装字体库" class="headerlink" title="安装字体库"></a>安装字体库</h2><p>从CentOS 4.x开始就用fontconfig来管理系统字体，如没有字体库安装即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fontconfig</span><br></pre></td></tr></table></figure><p>当看到下图的提示信息时说明已安装成功：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/2.png" alt="这里写图片描述"></p><p>这时在/usr/share目录就可以看到fonts和fontconfig目录（之前没有）：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/3.png" alt="这里写图片描述"></p><p>字体库已安装完成。</p><h2 id="添加中文字体"><a href="#添加中文字体" class="headerlink" title="添加中文字体"></a>添加中文字体</h2><p>在CentOS中，字体库的存放位置正是上图中看到的fonts目录（/usr/share/fonts）中，我们首先要做的就是找到中文字体文件放到该目录下，而中文字体文件在windows系统中就可以找到，打开c盘下的Windows/Fonts目录：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/4.png" alt="这里写图片描述"></p><p>如上图，我们只需将需要的字体拷贝出来并上传至linux服务器即可。</p><p>这里选择宋体和黑体（报表中用到了这两种字体），可以看到是两个后缀名为ttf和ttc的文件：<img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/5.png" alt="这里写图片描述"><br>先新建目录，首先在/usr/shared/fonts目录下新建一个目录chinese：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/6.png" alt="这里写图片描述"></p><p>然后将上面的两个字体上传至/usr/shared/fonts/chinese目录下即可：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/7.png" alt="这里写图片描述"></p><p>修改chinese目录的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /usr/share/fonts/chinese</span><br></pre></td></tr></table></figure><p>安装ttmkfdir来搜索目录中所有的字体信息，并汇总生成fonts.scale文件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ttmkfdir</span><br></pre></td></tr></table></figure><p>当看到下图的提示信息时说明已安装成功：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/8.png" alt="这里写图片描述"></p><p>执行ttmkfdir命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</span><br></pre></td></tr></table></figure><p>修改字体配置文件，首先通过编辑器打开配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fonts/fonts.conf</span><br></pre></td></tr></table></figure><p>在Font list标签，即字体列表下，需要添加的中文字体位置加进去：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/9.png" alt="这里写图片描述"><br>刷新内存中的字体缓存或reboot重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span>-cache</span><br></pre></td></tr></table></figure><p><strong>校验</strong></p><p>这样中文字体已安装完成，最后再次通过fc-list看一下字体列表：<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/dfe24446/10.png" alt="这里写图片描述"></p><p>可以看到已经成功安装上了中文字体，至此安装过程就全部结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Linux中的字体问题不是大问题，但为了系统的功能和易读性也需要按照上面教程切实解决下。安装其他字体和上面教程类似。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux字体确实是个问题。场景一：验证码已成为了用户认证的标配，动态变动可以有效防止注入，提高用户认证的安全。场景二：开发的系统中依赖系统的字体，如报表系统中发现中文乱码或中文字体重叠的情况等问题，这些都是linux字体惹的祸。本文以安装中文字体为例帮你解决字体这一小问题。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>非root的普通用户使用tmux方法教程</title>
    <link href="https://wandouduoduo.github.io/articles/4dd98c85.html"/>
    <id>https://wandouduoduo.github.io/articles/4dd98c85.html</id>
    <published>2020-12-24T07:00:29.000Z</published>
    <updated>2020-12-24T07:35:58.108Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>Tmux</code>是一款终端复用的神器，实现了会话与终端窗后的分离。用过的同学都欲罢不能，但是使用它时必须root用户，如果是普通用户就会出现<code>can&#39;t create socket</code>错误不能使用，那么本教程就教你用普通用户使用tmux这个神器。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><h3 id="root权限"><a href="#root权限" class="headerlink" title="root权限"></a>root权限</h3><p>若有root权限，tmux 安装十分简单，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux      <span class="comment">#ubuntu</span></span><br><span class="line">yum install tmux -y  <span class="comment">#centos</span></span><br></pre></td></tr></table></figure><p>然后即可使用</p><h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><p>若你没有root权限，则就需要下载源码安装了。由于Tmux的安装依赖libevent以及ncurses，这两个库要先安装。</p><p>安装目录限定为：<code>/home/username/.local</code></p><p><strong>安装libevent</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz</span><br><span class="line">tar -xzvf libevent-2.0.22-stable.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libevent-2.0.22-stable</span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/.<span class="built_in">local</span> --<span class="built_in">disable</span>-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>安装ncurses</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz</span><br><span class="line">tar -xzvf ncurses-6.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ncurses-6.0</span><br><span class="line">./configure --prefix=<span class="variable">$HOME</span>/.<span class="built_in">local</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>安装tmux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/tmux/tmux/releases/download/2.8/tmux-2.8.tar.gz</span><br><span class="line">tar -xzvf tmux-2.8.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tmux-2.8</span><br><span class="line">./configure CFLAGS=<span class="string">"-I<span class="variable">$HOME</span>/.local/include"</span> LDFLAGS=<span class="string">"-L<span class="variable">$HOME</span>/.local/lib"</span> </span><br><span class="line">make</span><br><span class="line">cp tmux ~/.<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p><strong>添加环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/.<span class="built_in">local</span>/bin      <span class="comment">#将该行添加到.bashrc 中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wandouduoduo/.tmux.git</span><br><span class="line">ln -s -f .tmux/.tmux.conf</span><br><span class="line">cp .tmux/.tmux.conf.local .</span><br></pre></td></tr></table></figure><p>祝你好运，享受并使用它吧！！</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Tmux&lt;/code&gt;是一款终端复用的神器，实现了会话与终端窗后的分离。用过的同学都欲罢不能，但是使用它时必须root用户，如果是普通用户就会出现&lt;code&gt;can&amp;#39;t create socket&lt;/code&gt;错误不能使用，那么本教程就教你用普通用户使用tmux这个神器。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="命令详解" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7时间自动同步</title>
    <link href="https://wandouduoduo.github.io/articles/6bab7f2f.html"/>
    <id>https://wandouduoduo.github.io/articles/6bab7f2f.html</id>
    <published>2020-12-22T07:50:28.000Z</published>
    <updated>2020-12-22T08:02:11.784Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>运维的工作高可用高并发，负载均衡，可靠稳定等等要求，很多系统都是集群模式并采用分布式部署。但是有时系统时间不同步，集群服务器之间时间不同，就会造成一些困扰或服务根本就启动不起来。所以时间自动同步，是很有必要的。</p><a id="more"></a><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">vim /etc/sysconfig/clock</span><br><span class="line">ZONE= &quot;Asia/Shanghai&quot;</span><br><span class="line">UTC= false</span><br><span class="line">ARC= false</span><br></pre></td></tr></table></figure><h3 id="安装并设置开机自启"><a href="#安装并设置开机自启" class="headerlink" title="安装并设置开机自启"></a>安装并设置开机自启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br></pre></td></tr></table></figure><h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line">/usr/sbin/ntpdate ntp1.aliyun.com &gt; /dev/ null  2 &gt;&amp; 1 ; /sbin/hwclock -w</span><br></pre></td></tr></table></figure><h3 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0  */ 1  * * * ntpdate ntp1.aliyun.com &gt; /dev/ null  2 &gt;&amp; 1 ; /sbin/hwclock -w</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm -rf /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/sysconfig/clock &lt;&lt;EOF</span><br><span class="line">ZONE= <span class="string">"Asia/Shanghai"</span></span><br><span class="line">UTC= <span class="literal">false</span></span><br><span class="line">ARC= <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y ntp &amp;&amp; systemctl start ntpd &amp;&amp; systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/sbin/ntpdate ntp1.aliyun.com &gt; /dev/ null  2 &gt;&amp; 1 ; /sbin/hwclock -w"</span> &gt;&gt;/etc/rc.d/rc.local</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"0 */1  * * * ntpdate ntp1.aliyun.com &gt; /dev/ null  2 &gt;&amp; 1 ; /sbin/hwclock -w"</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运维的工作高可用高并发，负载均衡，可靠稳定等等要求，很多系统都是集群模式并采用分布式部署。但是有时系统时间不同步，集群服务器之间时间不同，就会造成一些困扰或服务根本就启动不起来。所以时间自动同步，是很有必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Zimbra邮件服务器证书部署教程</title>
    <link href="https://wandouduoduo.github.io/articles/b778abf7.html"/>
    <id>https://wandouduoduo.github.io/articles/b778abf7.html</id>
    <published>2020-12-21T05:50:05.000Z</published>
    <updated>2020-12-21T06:08:38.547Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>zimbra邮件服务搭建完成后，为了安全和用户体验，通常用域名解析和证书配置。本文详细介绍zimbra服务的证书配置，当然证书过期替换也是一样的操作方法。</p><a id="more"></a><p>此文档采用命令行的形式配置证书。</p><h2 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a><strong>获取SSL证书</strong></h2><p>从沃通申请SSL证书后，将会下载一个以域名命名的.zip压缩包，解压该压缩包，会得到for Apache.zip、for Nginx.zip、for IIS.zip、for other server.zip，Zimbra将会用到for other server.zip里面的四个.crt文件(test.wosign.com为测试证书域名)以及自主生成的私钥.key文件（申请证书过程创建CSR时生成）。<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b778abf7/1.png" alt="Zimbra邮件服务器证书部署教程"></p><h2 id="证书合成以及重命名"><a href="#证书合成以及重命名" class="headerlink" title="证书合成以及重命名**"></a>证书合成以及重命名**</h2><h3 id="Windows环境："><a href="#Windows环境：" class="headerlink" title="Windows环境："></a>Windows环境：</h3><p>在windows环境下，可以用记事本或写字板打开.crt文件，将issuer.crt、cross.crt、root.crt按顺序合成后保存，并将合成后的.crt文件重命名为commercial_ca.crt。<br>将自主生成的.key文件重命名为commercial.key。<br>将test.wosign.com.crt重命名为commercial.crt。</p><h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境:"></a>Linux环境:</h3><p>在Linux服务器上，用命令合成证书文件，具体命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat issuer.crt cross.crt root.crt &gt; commercial_ca.crt</span><br><span class="line">Mv test.wosign.com.crt commercial.crt</span><br><span class="line">Mv yourdomain.com.key commercial.key</span><br></pre></td></tr></table></figure><h2 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装**"></a>证书安装**</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>将重命名后的三个文件上传至/opt/zimbra/ssl/zimbra/commercial目录。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>用命令验证证书文件是否匹配，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/zimbra/bin/zmcertmgr verifycrt comm /opt/zimbra/ssl/zimbra/commercial/commercial.key /opt/zimbra/ssl/zimbra/commercial/commercial.crt /opt/zimbra/ssl/zimbra/commercial/commercial_ca.crt</span><br></pre></td></tr></table></figure><p>当出现如下提示Valid Certificate:/opt/zimbra/ssl/zimbra/commercial/commercial.crt: OK，则可继续安装，如果报错，请根据报错查看具体原因。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b778abf7/2.png" alt></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/zimbra/bin/zmcertmgr deploycrt comm /opt/zimbra/ssl/zimbra/commercial/commercial.crt /opt/zimbra/ssl/zimbra/commercial/commercial_ca.crt</span><br></pre></td></tr></table></figure><h2 id="重启Zimbra"><a href="#重启Zimbra" class="headerlink" title="重启Zimbra"></a>重启Zimbra</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmcontrol restart</span><br></pre></td></tr></table></figure><h2 id="测试HTTPS访问"><a href="#测试HTTPS访问" class="headerlink" title="测试HTTPS访问"></a><strong>测试HTTPS访问</strong></h2><p>打开浏览器，输入<a href="https://wandouduoduo.github.io（你自己的域名）" rel="noopener" target="_blank">https://wandouduoduo.github.io（你自己的域名）</a></p><p>如浏览器地址栏显示加密小锁，则表示证书配置成功。若显示无法连接，请确保防火墙或安全组等策略有放行443端口（SSL配置端口）。</p><h2 id="证书备份"><a href="#证书备份" class="headerlink" title="证书备份**"></a>证书备份**</h2><p>请将下载的.zip压缩包和自主生成的私钥.key文件备份。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zimbra邮件服务搭建完成后，为了安全和用户体验，通常用域名解析和证书配置。本文详细介绍zimbra服务的证书配置，当然证书过期替换也是一样的操作方法。&lt;/p&gt;
    
    </summary>
    
      <category term="应用服务" scheme="https://wandouduoduo.github.io/categories/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="Mail" scheme="https://wandouduoduo.github.io/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>漫谈微服务RPC架构</title>
    <link href="https://wandouduoduo.github.io/articles/fc4b89f7.html"/>
    <id>https://wandouduoduo.github.io/articles/fc4b89f7.html</id>
    <published>2020-12-11T07:46:02.000Z</published>
    <updated>2020-12-11T21:20:10.260Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>通读了前面两篇内容，我们了解到微服务离不开RPC，知道了RPC架构的原理，那么开源RPC架构有哪些，你知道多少呢？本文就针对<code>开源RPC框架</code>的种类进行漫谈。</p><a id="more"></a><h2 id="开源RPC框架种类"><a href="#开源RPC框架种类" class="headerlink" title="开源RPC框架种类"></a>开源RPC框架种类</h2><p>大致可分为两类：一类是与特定开发语言绑定的；另一类是与开发语言无关即跨语言平台的。</p><h3 id="和语言平台绑定开源RPC框架："><a href="#和语言平台绑定开源RPC框架：" class="headerlink" title="和语言平台绑定开源RPC框架："></a><strong>和语言平台绑定开源RPC框架</strong>：</h3><ul><li><p><strong>Dubbo</strong>：国内最早的开源RPC框架。它是由阿里公司开发并于 2011 年末对外开源，仅支持 Java 语言。</p></li><li><p><strong>Motan</strong>：微博内部使用的RPC框架。于2016年对外开源，仅支持 Java 语言。</p></li><li><p><strong>Tars</strong>：腾讯内部使用的RPC框架。于 2017 年对外开源，仅支持 C++ 语言。</p></li><li><p><strong>Spring Cloud</strong>：国外Pivotal公司2014年对外开源的RPC框架，仅支持 Java 语言。</p></li></ul><h3 id="跨语言平台开源RPC框架："><a href="#跨语言平台开源RPC框架：" class="headerlink" title="跨语言平台开源RPC框架："></a>跨语言平台开源RPC框架：</h3><ul><li><strong>gRPC</strong>：Google 于2015年对外开源的跨语言RPC框架，支持多种语言。</li><li><strong>Thrift</strong>：最初是由Facebook开发的内部系统跨语言的RPC框架，2007年贡献给了Apache基金，成为Apache 开源项目之一，支持多种语言。</li></ul><h2 id="语言绑定框架"><a href="#语言绑定框架" class="headerlink" title="语言绑定框架"></a>语言绑定框架</h2><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a><strong>Dubbo</strong></h3><p>Dubbo可以说是国内开源最早的RPC框架了，目前只支持 Java 语言。架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/1.jpeg" alt></p><p>图中可知Dubbo架构主要包含四个角色：其中Consumer为服务消费者，Provider为服务提供者，Registry是注册中心，Monitor是监控系统。</p><p><strong>交互流程</strong>：Consumer通过注册中心获取到Provider节点信息后，通过Dubbo客户端SDK与Provider建立连接，并发起调用。Provider通过Dubbo服务端SDK接收到请求，处理后再把结果返回。</p><h3 id="Motan"><a href="#Motan" class="headerlink" title="Motan"></a><strong>Motan</strong></h3><p>Motan是国内另外一个比较有名的开源的RPC框架，同样也只支持 Java 语言实现。架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/2.jpeg" alt></p><p>Motan与Dubbo架构类似，都需在Client端(服务消费者)和Server端(服务提供者)引入SDK。Motan框架主要包含下面几个功能模块。</p><p>register：用来和注册中心交互。包括注册服务、订阅服务、服务变更通知、服务心跳发送等功能。</p><p>protocol：用来进行RPC服务的描述和RPC服务的配置管理。还可以添加不同功能的filter来完成统计、并发限制等功能。</p><p>serialize：将RPC请求中的参数、结果等对象进行序列化与反序列化</p><p>transport：用来进行远程通信，默认使用Netty NIO 的TCP长链接方式。</p><p>cluster：请求时会根据不同的高可用与负载均衡策略选择一个可用的 Server 发起远程调用。</p><h3 id="Tars"><a href="#Tars" class="headerlink" title="Tars"></a><strong>Tars</strong></h3><p>Tars是腾讯根据内部多年使用微服务架构的实践，总结而成的开源项目，仅支持 C++ 语言。架构图如下。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/3.jpeg" alt></p><p><strong>交互流程</strong>:</p><p>服务发布流程：在web系统上传 server的发布包到patch，上传成功后，在 web上提交发布server请求，由 registry服务传达到node，然后node拉取server的发布包到本地，拉起server服务。</p><p>管理命令流程：web 系统上的可以提交管理 server 服务命令请求，由 registry 服务传达到 node 服务，然后由 node 向 server 发送管理命令。</p><p>心跳上报流程：server 服务运行后，会定期上报心跳到 node，node 然后把服务心跳信息上报到 registry 服务，由 registry 进行统一管理。</p><p>信息上报流程：server 服务运行后，会定期上报统计信息到 stat，打印远程日志到 log，定期上报属性信息到 prop、上报异常信息到 notify、从 config 拉取服务配置信息。</p><p>client 访问 server 流程：client 可以通过 server 的对象名 Obj 间接访问 server，client 会从 registry 上拉取 server 的路由信息(如 IP、Port 信息)，然后根据具体的业务特性(同步或者异步，TCP 或者 UDP 方式)访问 server(当然 client 也可以通过 IP/Port 直接访问 server)。</p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a><strong>Spring Cloud</strong></h3><p>Spring Cloud 是利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。只支持 Java 语言平台，架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/4.jpeg" alt></p><p><strong>交互流程</strong>:</p><p>请求统一通过 API 网关 Zuul 来访问内部服务，先经过 Token 进行安全认证。</p><p>通过安全认证后，网关 Zuul 从注册中心 Eureka 获取可用服务节点列表。</p><p>从可用服务节点中选取一个可用节点，然后把请求分发到这个节点。</p><p>整个请求过程中，Hystrix 组件负责处理服务超时熔断，Turbine 组件负责监控服务间的调用和熔断相关指标，Sleuth 组件负责调用链监控，ELK 负责日志分析。</p><h2 id="跨平台框架"><a href="#跨平台框架" class="headerlink" title="跨平台框架"></a>跨平台框架</h2><h3 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a><strong>gRPC</strong></h3><p>gRPC原理是通过 IDL(Interface Definition Language)文件定义服务接口的参数和返回值类型，然后通过代码生成程序生成服务端和客户端的具体实现代码，这样在 gRPC 里，客户端应用可以像调用本地对象一样调用另一台服务器上对应的方法。调用图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/5.jpeg" alt></p><p>主要特性三个方面:</p><p>通信协议采用了 HTTP/2。因为 HTTP/2 提供了连接复用、双向流、服务器推送、请求优先级、首部压缩等机制。</p><p>IDL使用了ProtoBuf。ProtoBuf 是由 Google 开发的一种数据序列化协议，它的压缩和传输效率极高，语法也简单</p><p>多语言支持，能够基于多种语言自动生成对应语言的客户端和服务端的代码。</p><h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a><strong>Thrift</strong></h3><p>Thrift 是一种轻量级的跨语言 RPC 通信方案，支持多达 25 种编程语言。为了支持多种语言，跟 gRPC 一样，Thrift 也有一套自己的接口定义语言 IDL，可以通过代码生成器，生成各种编程语言的 Client 端和 Server 端的 SDK 代码，这样就保证了不同语言之间可以相互通信。架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fc4b89f7/6.jpeg" alt></p><p>Thrift RPC框架的特性:</p><p>支持多种序列化格式：如 Binary、Compact、JSON、Multiplexed 等。</p><p>支持多种通信方式：如 Socket、Framed、File、Memory、zlib 等。</p><p>服务端支持多种处理方式：如 Simple 、Thread Pool、Non-Blocking 等。</p><h2 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h2><p>选择哪个平台需要根据实际场景出发。如果你的业务场景仅仅局限于一种开发语言，那么选择比较多，可以选择和开发语言的绑定的RPC框架平台，可以选择支持该种开发语言的跨平台框架；但如果开发中涉及多种开发语言之间的相互调用，那就应该选择跨语言平台的RPC框架。当然也要考虑学习和维护成本。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通读了前面两篇内容，我们了解到微服务离不开RPC，知道了RPC架构的原理，那么开源RPC架构有哪些，你知道多少呢？本文就针对&lt;code&gt;开源RPC框架&lt;/code&gt;的种类进行漫谈。&lt;/p&gt;
    
    </summary>
    
      <category term="心得体会" scheme="https://wandouduoduo.github.io/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
      <category term="Java" scheme="https://wandouduoduo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>详解为什么微服务架构绕不开RPC&lt;二&gt;</title>
    <link href="https://wandouduoduo.github.io/articles/1ad48174.html"/>
    <id>https://wandouduoduo.github.io/articles/1ad48174.html</id>
    <published>2020-12-10T07:50:17.000Z</published>
    <updated>2020-12-11T07:35:09.778Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>读了上篇文章充分了解了传统架构的痛点和微服务架构的好处。本篇文章进入主题详解RPC的原理和架构。</p> <a id="more"></a><h2 id="RPC定义"><a href="#RPC定义" class="headerlink" title="RPC定义"></a><strong>RPC定义</strong></h2><p>RPC（Remote Procedure Call Protocol），即远程过程调用。远相对于近，本地函数调用是为近，那么远即是垮服务器或容器的调用。</p><h3 id="本地调用"><a href="#本地调用" class="headerlink" title="本地调用"></a>本地调用</h3><p>当我们写下如下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = Add(1, 2);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/3.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动作：</span><br><span class="line">传递两个参数</span><br><span class="line">调用了本地代码中的函数，执行逻辑运算</span><br><span class="line">返回一个出参</span><br><span class="line"></span><br><span class="line">三个动作在同一个进程中，这就本地函数调用。</span><br></pre></td></tr></table></figure><h3 id="跨进程调用"><a href="#跨进程调用" class="headerlink" title="跨进程调用"></a><strong>跨进程调用</strong></h3><p>典型的是被调进程部署在另一台服务器上。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/4.png" alt="图片"></p><p>那怎么调用呢？最容易想到的是两个进程约定一个协议格式，如使用Socket来传输通信，然后同样执行调用即可。如果实现，那这就是<code>远程过程调用</code>即RPC。</p><h2 id="RPC传递"><a href="#RPC传递" class="headerlink" title="RPC传递"></a>RPC传递</h2><p>我们都知道Socket通信只能传递连续的字节流，那么如何将入参和函数都放到连续的字节流中呢？</p><p>还以Add函数为例，假设它是一个11字节的请求报文，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/5.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">描述：</span><br><span class="line">前3个字节填入函数名“add”</span><br><span class="line">中间4个字节填入第一个参数“1”</span><br><span class="line">末尾4个字节填入第二个参数“2”</span><br></pre></td></tr></table></figure><p>同理一个4字节响应报文：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/6.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">描述：</span><br><span class="line">4个字节填入处理结果“3”</span><br></pre></td></tr></table></figure><p><strong>调用方的代码</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request = MakePacket(“add”, 1, 2);</span><br><span class="line">SendRequest_ToService_B(request);</span><br><span class="line">response = RecieveRespnse_FromService_B();</span><br><span class="line">int result = unMakePacket(respnse);</span><br></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>将入参变为字节流；</li><li>将字节流发给服务方B；</li><li>服务B接受字节流，并逻辑处理后返回字节流；</li><li>将返回字节流变为传出结果；</li></ol><p><strong>服务方的代码</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request = RecieveRequest();</span><br><span class="line">args/function = unMakePacket(request);</span><br><span class="line">result = Add(1, 2);</span><br><span class="line">response = MakePacket(result);</span><br><span class="line">SendResponse(response);</span><br></pre></td></tr></table></figure><p>步骤如下：</p><ol><li>服务端收到字节流；</li><li>将收到的字节流转为函数名与参数；</li><li>本地调用函数得到结果；</li><li>将结果转变为字节流；</li><li>将字节流发送给调用方；</li></ol><p>过程描述图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/7.png" alt="图片"></p><p><strong>调用过程很清晰，那最大的问题是什么呢？</strong></p><p>调用方太麻烦，每次调用都要关注很多底层的细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">入参到字节流的转化，即序列化应用层协议细节</span><br><span class="line">字节流socket发送，即网络传输协议细节</span><br><span class="line">字节流socket接收</span><br><span class="line">字节流到出参的转化，即反序列化应用层协议细节</span><br></pre></td></tr></table></figure><p><strong>可不可以调用层不关注这个细节？</strong></p><p>答案是可以的。RPC框架就是解决这个问题的。它能够让调用方像调用本地函数一样调用远端的函数（服务），而不需要过多关注底层细节。</p><p>讲到这里对RPC，序列化和反序列化是不是有点感觉了？那接着往下看。</p><h2 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a><strong>RPC框架</strong></h2><p>RPC框架的职责是：向调用方和服务提供方都屏蔽各种底层的复杂细节：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务调用方client就像调用本地函数一样来调用服务</span><br><span class="line">服务提供方server就像实现一个本地函数一样来实现服务对外提供服务</span><br></pre></td></tr></table></figure><p>所以整个RPC框架又分为<code>client端（服务调用方）</code>和<code>server端（服务器提供方）</code>，如下图： </p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/8.png" alt="图片"><br>业务方的调用过程是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用方A：传入参数--&gt;执行调用--&gt;拿到结果</span><br><span class="line">服务方B：收到参数--&gt;执行逻辑--&gt;返回结果</span><br></pre></td></tr></table></figure><p><strong>RPC框架的作用</strong>就是上图中间虚线框的那部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client端（调用方）：序列化、反序列化、连接池管理、负载均衡、故障转移、队列管理，超时管理、异步管理等等</span><br><span class="line">server端（服务方）：服务端组件、服务端收发包队列、io线程、工作线程、序列化反序列化等</span><br></pre></td></tr></table></figure><h2 id="详解客户端"><a href="#详解客户端" class="headerlink" title="详解客户端"></a>详解客户端</h2><p>server端的技术大家知道比较多，这里不再赘述，接下来重点聊聊client端的技术细节。</p><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p><strong>为什么要进行序列化呢？</strong></p><p>程序员常用对象来操作数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#定义</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">std::String user_name;</span><br><span class="line">uint64_t user_id;</span><br><span class="line">uint32_t user_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#实例</span><br><span class="line">User u = <span class="keyword">new</span> User(“shenjian”);</span><br><span class="line">u.setUid(<span class="number">123</span>);</span><br><span class="line">u.setAge(<span class="number">35</span>);</span><br></pre></td></tr></table></figure><p> 但对数据<strong>存储</strong>或<strong>传输</strong>时，对象就不好用了，往往把数据转化成连续空间的二进制字节流。</p><p><strong>典型的场景</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数据库索引的磁盘存储：</span><br><span class="line">数据库的索引在内存的b+树中存储，但这种格式是不能够直接存储在磁盘上的，所以需要把b+树转化为连续空间的二进制字节流，然后才能存储到磁盘上</span><br><span class="line"></span><br><span class="line">缓存的KV存储：</span><br><span class="line">redis/memcache是KV类型的缓存，缓存存储的value也必须是连续空间的二进制字节流</span><br><span class="line"></span><br><span class="line">数据的网络传输：</span><br><span class="line">socket发送的数据同样必须是连续空间的二进制字节流</span><br></pre></td></tr></table></figure><p> <strong>序列化</strong>（Serialization）：</p><p>就是将对象形态的数据转化为<code>连续空间二进制字节流</code>形态数据的过程。</p><p><strong>反序列化</strong>：</p><p>就是序列化的逆过程，有连续空间二进制字节流转化为对象形态数据。</p><p><strong>如何序列化呢？</strong></p><p>这个过程容易想到的是转化为xml或json这类具有自描述特性的标记性语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;class name=&quot;User&quot;&gt;</span><br><span class="line">&lt;element name=&quot;user_name&quot; type=&quot;std::String&quot; value=&quot;shenjian&quot; /&gt;</span><br><span class="line">&lt;element name=&quot;user_id&quot; type=&quot;uint64_t&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">&lt;element name=&quot;user_age&quot; type=&quot;uint32_t&quot; value=&quot;35&quot; /&gt;</span><br><span class="line">&lt;/class&gt;</span><br></pre></td></tr></table></figure><p><strong>方法一</strong>：</p><p>约定好<code>转换规则</code>：</p><p>发送方把User类的对象序列化为xml或json；服务方收到xml或json的二进制流后，再将其反序列化为User对象。</p><p><strong>方法二</strong>:</p><p>自定义二进制协议来进行序列化，还以User对象为例，设计一个通用协议如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/9.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">最前面4个字节表示序号</span><br><span class="line">序号后面4个字节表示key的长度m</span><br><span class="line">后面m个字节表示key的值</span><br><span class="line">在后面4个字节表示value的长度n</span><br><span class="line">接着n个字节表示value的值</span><br><span class="line">像xml一样递归，直至描述完整个对象</span><br></pre></td></tr></table></figure><p> 那根据上面协议描述出来的User对象，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/10.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一行：序号4个字节（设0表示类名），类名长度4个字节（长度为4），接下来4个字节是类名（User），共12字节</span><br><span class="line">第二行：序号4个字节（1表示第一个属性），属性长度4个字节（长度为9），接下来9个字节是属性名（user_name），属性值长度4个字节（长度为8），属性值8个字节（值为”shenjian”），共29字节</span><br><span class="line">第三行：序号4个字节（2表示第二个属性），属性长度4个字节（长度为7），接下来7个字节是属性名（user_id），属性值长度4个字节（长度为8），属性值8个字节（值为123），共27字节</span><br><span class="line">第四行：序号4个字节（3表示第三个属性），属性长度4个字节（长度为8），接下来8个字节是属性名（user_name），属性值长度4个字节（长度为4），属性值4个字节（值为35），共24字节</span><br><span class="line"></span><br><span class="line">整个二进制字节流共12+29+27+24=92字节。</span><br></pre></td></tr></table></figure><p> 实际序列化协议要考虑的细节远比这个多。例如：强类型的语言不仅要还原属性名，属性值，还要还原属性类型；复杂的对象不仅要考虑普通类型，还要考虑对象嵌套类型等。无论如何，序列化的思路都是类似的。</p><h2 id="序列化协议考虑因素"><a href="#序列化协议考虑因素" class="headerlink" title="序列化协议考虑因素"></a><strong>序列化协议考虑因素</strong></h2><p>不管使用成熟协议xml/json，还是自定义二进制协议来序列化对象。序列化的协议都需要考虑以下因素：</p><ul><li><strong>解析效率</strong>：这个应该是序列化协议应首要考虑的因素，像xml/json解析起来比较耗时，需要解析doom树，二进制自定义协议解析起来效率就很高</li><li><strong>压缩率和传输有效性</strong>：同一对象xml/json传输起来包含有大量的xml标签等，信息的有效性较低，二进制自定义协议占用的空间相对来说就小很多</li><li><strong>扩展和兼容性</strong>：是否能方便的增减字段，增减字段后旧版客户端是否要强制升级，xml/json和上面的二进制协议都能够方便的扩展</li><li><strong>可读和可调试性</strong>：很好理解，xml/json的可读性就比二进制协议好很多</li><li><strong>跨语言</strong>：上面的两个协议都是跨语言，有些序列化协议与开发语言紧密相关。例如dubbo序列化协议只能支持Java的RPC调用</li><li><strong>通用性</strong>：xml/json非常通用，都有很好的第三方解析库，各个语言解析起来也十分方便。自定义二进制协议虽能够跨语言，但每个语言都要写一个简易的协议客户端</li></ul><h2 id="常见序列化格式"><a href="#常见序列化格式" class="headerlink" title="常见序列化格式"></a><strong>常见序列化格式</strong></h2><p><strong>xml/json</strong>：解析效率和压缩率较差，但扩展性、可读性和通用性较好</p><p><strong>protobuf</strong>：Google出品，各方面都不错，强烈推荐，属于二进制协议。可读性差点，但有类似的to-string协议帮助调试</p><p><strong>mc_pack</strong>：传说各方面要超越protobuf，但是只能说是传说</p><p><strong>thrift</strong>：由Facebook开发，有兴趣可以了解下</p><p>当然还有<strong>Avro</strong>、<strong>CORBA</strong>等等</p><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/11.png" alt="图片"></p><p>RPC-client 不仅包含序列化和反序列化（上图中的1和4）还包含发送和接收字节流（上图中的2和3）</p><p>字节流传输分为<code>同步调用</code>和<code>异步调用</code>两种</p><p>同步调用代码片段如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Result = Add(Obj1, Obj2);      //得到Result之前处于阻塞状态</span><br></pre></td></tr></table></figure><p>异步调用代码片段如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add(Obj1, Obj2, callback);    //调用后直接返回，不等结果</span><br></pre></td></tr></table></figure><p>处理结果通过回调为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callback(Result)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;                   // 得到处理结果后会调用这个回调函数</span><br></pre></td></tr></table></figure><p>两类调用在RPC-client中实现方式完全不一样的</p><h3 id="同步调用架构"><a href="#同步调用架构" class="headerlink" title="同步调用架构"></a><strong>同步调用架构</strong></h3><p>在调用得到结果前，一直处于阻塞状态，也会一直占用工作线程，直到的到结果才能再处理调用。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/12.png" alt="图片"></p><p><strong>组件描述</strong>：</p><p>左边大框：代表调用方的整个工作线程</p><p>右边橙框：代表RPC-server服务提供方</p><p>粉色中框：代表RPC-client组件</p><p>蓝色小框：代表同步RPC-client两个核心组件（序列化和连接池组件）</p><p>白色流程框，以及箭头序号：代表整个工作线程的串行执行步骤</p><p><strong>执行步骤</strong>：</p><ol><li>业务代码发起RPC对象调用</li><li>序列化组件将对象调用序列化成二进制字节流</li><li>通过连接池组件拿到一个可用的连接进程</li><li>通过连接进程将包发送给RPC-server</li><li>发送的包在网络传输到RPC-server接收</li><li>RPC-server响应包在网络传输返回给RPC-client</li><li>通过连接进程收取响应包</li><li>通过连接池组件，将连接进程释放放回连接池中</li><li>序列化组件，将响应包反序列化为对象返回给调用方</li><li>业务代码获取到结果</li></ol><p><strong>连接池组件</strong></p><p>连接池组件作用：RPC框架锁支持的负载均衡、故障转移、发送超时等特性的实现。</p><p>​                                           <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/13.png" alt="图片"><br>典型连接池组件对外接口代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int ConnectionPool::init(…);</span><br><span class="line">Connection ConnectionPool::getConnection();</span><br><span class="line">int ConnectionPool::putConnection**(Connection t);</span><br></pre></td></tr></table></figure><p><strong>init</strong>和下游RPC-server，建立N个TCP长连接，即所谓的连接池。</p><p><strong>getconnection</strong>从连接池中得到一个连接，加锁（置个标志位），返回给调用方。</p><p><strong>putConnection</strong>将使用的连接放回连接池中，解锁（也是置个标志位）。</p><p><strong>其他功能实现</strong></p><p>连接池建立了一个与RPC-server集群的连接，连接池在返回连接的时候，需具备随机性，来实现<strong>负载均衡</strong>。</p><p>连接池建立了一个与RPC-server集群的连接，当连接池发现某个节点的连接异常后，需要将这个节点的连接剔除掉，返回正常的连接；在节点恢复后，再将连接加回来，来实现<strong>故障转移</strong>。</p><p>同步阻塞调用，得到一个连接后，使用带超时的send/recv即可，实现带<strong>超时</strong>的发送和接收。</p><p>总的来说：同步RPC-client调用实现是相对较容易的。序列化和连接池组件配合多工作线程数就能够实现了。</p><h3 id="异步回调架构"><a href="#异步回调架构" class="headerlink" title="异步回调架构"></a><strong>异步回调架构</strong></h3><p>在调用得到结果前，不会处于阻塞状态，理论上任何时候都没有任何线程处于阻塞状态。所以理论上只需要很少工作线程与服务连接就能够达到很高的吞吐量。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/14.png" alt="图片"></p><p><strong>组件描述</strong>：</p><p>左边框框：是少量工作线程，执行调用和回调动作</p><p>中间粉框：代表RPC-client组件</p><p>右边橙框：代表RPC-server组件</p><p>蓝色小框：代表异步RPC-client六个核心组件：<strong>上下文管理器、超时管理器、序列化组件</strong>、<strong>下游收发队列、下游收发线程和连接池组件</strong></p><p>白色流程框，以及箭头序号：代表整个工作线程的串行执行步骤</p><p><strong>执行步骤</strong>：</p><ol><li><p>业务代码发起对象RPC异步调用</p></li><li><p>上下文管理器将请求回调和上下文存储起来</p></li><li><p>序列化组件调用序列化将对象转成二进制字节流</p></li><li><p>下游收发队列将报文放入待发送队列中此时调用返回，不会阻塞工作线程；</p></li><li><p>下游收发线程从待发送队列中将报文取出，再通过连接池组件拿到一个可用的连接进程</p></li><li><p>通过连接进程将请求包发送给RPC-server组件</p></li><li><p>请求包在网络中传输到RPC-server</p></li><li><p>RPC-server响应包在网络中传输，返回给RPC-client</p></li><li><p>通过连接进程收取从RPC-server的响应包</p></li><li><p>下游收发线程将响应报文放入已接受队列中，通过连接池组件将连接进程放回到连接池中</p></li><li><p>下游收发队列里将响应报文取出</p></li><li><p>序列化组件将响应包反序列化为对象结果</p></li><li><p>上下文管理器将结果回调和上下文取出</p></li><li><p>通过回调业务代码返回结果，整个流程结束</p><p><strong>请求长时间不返回</strong>处理流程是：</p></li><li><p>上下文管理器的请求将长时间得不到返回结果</p></li><li><p>超时管理器拿到超时的上下文</p></li><li><p>通过超时管理器回调业务代码，代码报错</p></li></ol><p><strong>其他功能实现</strong></p><p>由于请求包的发送和响应包的回调都是异步发生的，甚至不在同一个工作线程中完成，所以需要一个组件来记录请求的上下文，来把请求–&gt;响应–&gt;回调等信息匹配起来，这就是<strong>上下文管理器</strong>。</p><p>将请求–&gt;响应–&gt;回调信息匹配，假设通过连接向下游服务发送a，b，c三个请求包，那么异步收到了x，y，z三个响应包，如下图：</p><p>​                                                             <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/15.png" alt="图片"></p><p>可以通过<strong>请求id</strong>来实现请求–&gt;响应–&gt;回调信息匹配，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/16.png" alt="图片"><br><strong>流程描述</strong>如下：</p><ol><li>请求时生成请求id</li><li>生成请求上下文内容，上下文内容中包含请求时间和回调函数等信息</li><li>上下文管理器记录请求id与上下文内容的映射关系</li><li>将请求id放在请求包里发给RPC-server</li><li>RPC-server也把请求id打在响应包里进行返回</li><li>有响应包中的请求id，通过上下文管理器找到原来的上下文内容</li><li>从上下文内容中拿到回调函数</li><li>回调函数将响应结果返回</li></ol><p>与同步连接池类似，不同的是同步连接池使用阻塞方式来收发，需要服务与ip建立多条连接；而异步调用的收发是服务和ip只需要建立少量的连接即可，来实现<strong>负载均衡和故障转移</strong></p><p><strong>超时收发</strong>，与同步阻塞收发差异的是：同步阻塞超时可以直接使用带超时的send/recv来实现，而异步非阻塞的ni网络报文收发，由于请求连接不会一直等待响应回包，所以超时是由超时管理器这个组件来专门管理。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/1ad48174/17.png" alt="图片"></p><p>每个请求发送给下游RPC-server时，会在上下文管理器中保存请求id与上下文的信息，而上下文中也保存了请求的很多相关信息。如请求id、回包回调、超时回调和发送时间等等。超时管理器启动定时器对上下文管理器中的内容进行扫描，判断上下文中的请求发送时间是否过长，如果过长，就不再等待回包，直接超时回调，并将上下文删除掉。如果超时回调执行后，正常响应回包又到达，通过请求id在上下文管理器里找不到上下文，就直接将请求丢弃，超时已处理是无法恢复上下文的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>异步回调比同步回调，除共有序列化组件和连接池组件外，还会多出上下文管理器、超时管理器、下游收发队列和下游收发线程等组件，并对调用方的调用习惯也有影响，由同步直接得到结果变为了回调才可以。但是异步回调能极大的提高提高系统的吞吐量和处理请求，要结合业务场景合理的选取方式来实现RPC-client。</p><h2 id="知识梳理"><a href="#知识梳理" class="headerlink" title="知识梳理"></a><strong>知识梳理</strong></h2><p><strong>RPC调用</strong>：就是像调用本地函数一样去调用远端服务。</p><p><strong>RPC框架优点</strong>：屏蔽调用过程中的序列化，网络传输等技术细节。让调用方只专注于调用，服务方只专注于实现调用。</p><p><strong>序列化</strong>：将对象转化为连续存储空间二进制流的过程，就叫做序列化。而磁盘存储、缓存存储和网络传输等操作只能是二进制流。</p><p><strong>同步RPC客户端核心组件</strong>：序列化组件和连接池组件。通过连接池实现负载均衡和故障转移，通过阻塞收发实现超时处理。</p><p><strong>异步RPC客户端的核心组件</strong>：序列化组件、连接池组件、收发队列、收发线程、上下文管理器和超时管理器。通过请求id将请求包–&gt;响应包–&gt;回调函数进行映射关联，上下文管理器管理上下文，超时管理器定时器触发超时回调。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读了上篇文章充分了解了传统架构的痛点和微服务架构的好处。本篇文章进入主题详解RPC的原理和架构。&lt;/p&gt;
    
    </summary>
    
      <category term="心得体会" scheme="https://wandouduoduo.github.io/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
      <category term="Java" scheme="https://wandouduoduo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>详解为什么微服务架构绕不开RPC&lt;一&gt;</title>
    <link href="https://wandouduoduo.github.io/articles/b5e51a16.html"/>
    <id>https://wandouduoduo.github.io/articles/b5e51a16.html</id>
    <published>2020-12-10T07:26:17.000Z</published>
    <updated>2020-12-10T12:00:29.060Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>科技改变生活，搞互联网的绕不开BAT、TMD等大厂，那么搞微服务架构就绕不开RPC。知其然知其所以然才行，是什么原因绕不开呢？想要知道这个问题，先要搞清楚为什么要搞微服务呢？本文就来详细和你聊聊。</p><a id="more"></a><h2 id="为什么要搞微服务框架？"><a href="#为什么要搞微服务框架？" class="headerlink" title="为什么要搞微服务框架？"></a>为什么要搞微服务框架？</h2><p>有的同学说，技术总监或着是运维经理说要搞微服务，那公司就搞了。或者是看到很多大厂都采用微服务框架，我们不能落后，所以我们也要搞跟上步伐嘛。那么这些同学是否会有疑问为什么总监或着经理要搞呢？为什么各大厂都用微服务呢？这种框架带来哪些好处解决哪些痛点，让这么多公司和技术大牛青睐有加呢？如果你有过这些疑问，并想要搞清楚，那么你才能是一个合格的技术人。<strong>做技术的千万不能有别人都在做，所以我们也要搞的这种想法</strong>。下面通过对比，让你切实感受服务化的好处。</p><h2 id="传统高可用架构"><a href="#传统高可用架构" class="headerlink" title="传统高可用架构"></a>传统高可用架构</h2><p>典型的互联网高可用架构如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/1.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）客户端：APP，H5，小程序，PC浏览器；</span><br><span class="line">（2）后端入口：高可用的反向代理web集群(nginx或apache等)；</span><br><span class="line">（3）站点应用：高可用的web-server集群(tomcat或docker等)；</span><br><span class="line">（4）后端存储：高可用db集群（mysql等）；</span><br></pre></td></tr></table></figure><p>更典型的架构如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/2.png" alt></p><p>web-server集群通过DAO/ORM等技术来访问数据库。</p><h3 id="传统架构痛点"><a href="#传统架构痛点" class="headerlink" title="传统架构痛点"></a>传统架构痛点</h3><p>传统的架构可以看到没有服务层的，那么传统架构存在什么典型痛点呢？</p><h4 id="痛点一：代码随处拷贝"><a href="#痛点一：代码随处拷贝" class="headerlink" title="痛点一：代码随处拷贝"></a><strong>痛点一：代码随处拷贝</strong></h4><p>最常见的业务例子：用户的数据访问。互联网公司都用一个数据库来存储用户数据，而且各个业务都有访问用户数据的需求。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/3.png" alt></p><p><strong>场景</strong>：各个业务线（A,B和C）都需要获取用户数据，通常做法是通过DAO/ORM用SQL语句去操作数据库来获取，这就导致了代码的拷贝重复。</p><h4 id="痛点二：架构复杂性扩散"><a href="#痛点二：架构复杂性扩散" class="headerlink" title="痛点二：架构复杂性扩散"></a><strong>痛点二：架构复杂性扩散</strong></h4><p><strong>缓存机制引入</strong></p><p>随着并发量越来越高，访问用户数据的数据库成为了瓶颈，通常做法加入缓存机制（redis或memcache等）来降低数据库的读压力。那么各个业务线都需要针对底层架构的调整做响应更改，导致了的架构的复杂性扩散。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/4.png" alt></p><p>增加了缓存机制，所有业务代码的读写操作需要升级调整：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写操作：</span></span><br><span class="line">（1）先剔除缓存；</span><br><span class="line">（2）再在数据库中写入数据；</span><br><span class="line"></span><br><span class="line"><span class="comment">#读请求：</span></span><br><span class="line">（1）先读cache命中则返回；</span><br><span class="line">（2）没命中则读数据库；</span><br><span class="line">（3）再把数据放入cache中；</span><br></pre></td></tr></table></figure><p>但是开发就郁闷了，我业务代码没做跑的好好的，没做调整。你底层数据库做调整，我们所有业务的代码都需要被迫升级。</p><p><strong>分库分表引入</strong></p><p>随着数据量的不断增多，数据库需要做水平扩容拆分，于是又引入了数据库的分库分表。各个业务组又都需要去关注数据库分库分表引入导致的复杂性。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/5.png" alt></p><p>这里举了两个例子：各个业务组的开发奔溃了，这完全和业务本身是无关，而所有业务都需要被迫升级来适应架构调整导致的影响。</p><h4 id="痛点三：库的复用和耦合"><a href="#痛点三：库的复用和耦合" class="headerlink" title="痛点三：库的复用和耦合"></a><strong>痛点三：库的复用和耦合</strong></h4><p>解决上述两个痛点，我们最容易想到的解决方法是：抽象出统一的库来解决。</p><p>抽象出一个user.so库文件，该库文件负责对整个用户数据的存取操作。从而避免了代码的拷贝。架构调整也只需要关注user.so这个库文件即可。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/6.png" alt></p><p>有同学就会说是的这种方法也可以实现，那大家不妨想这样一个场景：</p><p><strong>场景</strong>：业务线A因需求想将user.so这个库由版本1.0升级至版本2.0，那么就需要这个库兼容其他所有业务线，如果不兼容业务线B，就会导致B业务出现问题，获取不到数据。</p><p>那么业务线A如果通知了业务线B去升级，而业务线B的开发表示很无辜，业务线B自身的业务没改动，也需要被动升级，郁闷吧。而且是其他业务线也都需要改。造成问题：<strong>库的版本维护会导致业务线之间的耦合关系</strong></p><h4 id="痛点四：SQL质量和业务相互影响"><a href="#痛点四：SQL质量和业务相互影响" class="headerlink" title="痛点四：SQL质量和业务相互影响"></a><strong>痛点四：SQL质量和业务相互影响</strong></h4><p>各个业务线都通过DAO/ORM操作数据库，实质上就是根据各个业务线需求拼装的SQL语句，资深的工程师写出的SQL语句质量比较高，但是经验没有这么丰富的工程师可能会写出一些低效的SQL语句。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/7.png" alt></p><p><strong>场景</strong>：业务线A新招了个初级程序员，写了一个全表扫描的SQL操作，从而导致整个数据库的CPU100%跑满，其他业务线读写都不能操作，都会受影响。你是该程序员很慌不慌。</p><h4 id="痛点五：疯狂的DB耦合"><a href="#痛点五：疯狂的DB耦合" class="headerlink" title="痛点五：疯狂的DB耦合"></a><strong>痛点五：疯狂的DB耦合</strong></h4><p>通常业务线不只访问user表的用户数据，还会结合自己的业务访问自己的数据。典型的就是通过join数据表来实现各自业务线的业务逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/8.png" alt></p><p><strong>场景</strong>：各个业务表和user表耦合在一起，例如业务线A的table-user和table-A耦合在一起，结果就是user表和所有业务表都耦合在了一起。那么随着数据量的增大，各个业务线的数据库是无法垂直拆分开的，必须使用一个大库来存储。想想一下一个大库几百个业务表，崩不崩溃。</p><h4 id="痛点六：其他等等"><a href="#痛点六：其他等等" class="headerlink" title="痛点六：其他等等"></a><strong>痛点六：其他等等</strong></h4><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>服务化后互联网高可用分层架构如下,引入了高可用user-service层，该层统一操作数据库存取用户</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/9.png" alt></p><h3 id="服务化架构好处"><a href="#服务化架构好处" class="headerlink" title="服务化架构好处"></a>服务化架构好处</h3><h4 id="好处一：调用方便清爽"><a href="#好处一：调用方便清爽" class="headerlink" title="好处一：调用方便清爽"></a><strong>好处一：调用方便清爽</strong></h4><p>原来业务访问用户数据，是需要通过DAO/ORM拼装SQL语句操作数据库来存取，现在业务方通过RPC调用就可访得到用户数据，就像调用本地函数一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User = UserService::GetUserById(uid);</span><br></pre></td></tr></table></figure><p>传入uid参数，得到User实体，就像调用本地函数一样，不需要关心序列化，网络传输，后端执行，网络传输，反序列化等等就可以得到用户数据。</p><h4 id="好处二：代码复用性"><a href="#好处二：代码复用性" class="headerlink" title="好处二：代码复用性"></a><strong>好处二：代码复用性</strong></h4><p>所有user用户数据的存取，都通过user-service来进行的，只此一份。</p><h4 id="好处三：屏蔽底层提高专注"><a href="#好处三：屏蔽底层提高专注" class="headerlink" title="好处三：屏蔽底层提高专注"></a><strong>好处三：屏蔽底层提高专注</strong></h4><p>原来所有业务线都需要关注缓存、分库分表等底层细节。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/10.png" alt></p><p>现在只有服务层需要专注关注底层的复杂性，上游业务调用屏蔽了细节。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b5e51a16/11.png" alt></p><h4 id="好处四：SQL质量得到保障"><a href="#好处四：SQL质量得到保障" class="headerlink" title="好处四：SQL质量得到保障"></a><strong>好处四：SQL质量得到保障</strong></h4><p>原来是业务直接拼接SQL语句访问数据库。现在所有业务请求的SQL语句都是服务层提供，业务线不能再为所欲为。</p><h4 id="好处五：数据库解耦"><a href="#好处五：数据库解耦" class="headerlink" title="好处五：数据库解耦"></a><strong>好处五：数据库解耦</strong></h4><p>原来各业务的数据库都混在一个大库里，难以拆分。现在数据库被隔离开，可以很方便的拆分出来，进行横向扩容。</p><h4 id="好处六：有限接口无限性能"><a href="#好处六：有限接口无限性能" class="headerlink" title="好处六：有限接口无限性能"></a><strong>好处六：有限接口无限性能</strong></h4><p>原先各业务线服务想怎么操纵数据库都可以，遇到性能瓶颈，各业务线容易扯皮，相互推诿。现在服务只提供有限的通用接口，理论上可认为集群可以提供无限的性能，性能出现瓶颈，服务层集中优化即可。</p><h4 id="好处七：其他等等"><a href="#好处七：其他等等" class="headerlink" title="好处七：其他等等"></a><strong>好处七：其他等等</strong></h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>结合公司现状和遇到的问题，以实际问题出发，进行架构设计，才能解决真正问题和痛点。一切脱离业务的架构设计，都是空中楼阁，可能高大上，但真的好用和实用吗？</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科技改变生活，搞互联网的绕不开BAT、TMD等大厂，那么搞微服务架构就绕不开RPC。知其然知其所以然才行，是什么原因绕不开呢？想要知道这个问题，先要搞清楚为什么要搞微服务呢？本文就来详细和你聊聊。&lt;/p&gt;
    
    </summary>
    
      <category term="心得体会" scheme="https://wandouduoduo.github.io/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
      <category term="Java" scheme="https://wandouduoduo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>造数据神器python开源库Faker</title>
    <link href="https://wandouduoduo.github.io/articles/d91439ee.html"/>
    <id>https://wandouduoduo.github.io/articles/d91439ee.html</id>
    <published>2020-12-09T02:56:41.000Z</published>
    <updated>2020-12-09T05:58:37.603Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>互联网中软件开发和测试过程中，有时候需要一些测试数据。针对这种需求，我们通常的做法是使用现有的系统数据或者手动随意制造一些数据。但是由于现在的互联网飞速发展，业务系统越来越复杂，数据也越来越多样。如再手动去制造数据，不仅需要花费大量精力，还容易出错，而且制造的数据很假。本文推荐造数据神器python开源库Faker，此Faker不是lol天才选手大魔王Faker，但是也是一样给力。</p><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>假如需要一批用户的三要素(例如：姓名、手机号和身份证)、或需要一批银行卡数据、一批地址通讯录等等。一般情况下，为了偷懒快捷也好，我们制造的测试数据可能是类似此类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试, 1300000 000123456</span><br><span class="line">张三, 1310000 000123456</span><br><span class="line">李四, 1320000 000234567</span><br><span class="line">王五, 1330000 000345678</span><br></pre></td></tr></table></figure><p>在测试过程中数据包括了大量的“测试xx”等等字眼，通常都是随手在键盘上一顿乱敲制造的毫无意义的假数据。<br>但是你看这些数据。不仅需要自己手动敲哪怕是胡乱随机敲的，而且数据还假的不能再假。既浪费时间和人力，数据的价值也不高。手工制造的数据还无法保障真的能够和业务场景中的数据一致，例如uuid、MD5、SHA等加密类数据等。为了帮助解决这个普遍场景的问题，提供一种解决方案或思路，Python的造数据利器：Faker库可以帮到你。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Faker是一个Python的一个开源库。主要用途：制造伪数据。使用Faker库，无需再手写随机来生成数据，只需调用Faker库的方法即可完成数据的生成。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 pip 方式安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Faker</span><br></pre></td></tr></table></figure><p>或者去Faker的<a href="https://link.zhihu.com/?target=https%3A//pypi.org/project/Faker/" rel="noopener" target="_blank">PyPI页面</a>下载Wheel或者Source文件进行安装：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/d91439ee/1.png" alt></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker()</span><br><span class="line">name = fake.name()</span><br><span class="line">address = fake.address()</span><br><span class="line">print(name)</span><br><span class="line">print(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出信息</span></span><br><span class="line">Ashley Love</span><br><span class="line"><span class="number">074</span> Lee Village Suite <span class="number">464</span></span><br><span class="line">Dawnborough, RI <span class="number">44234</span></span><br></pre></td></tr></table></figure><p><strong>1.</strong> 导入Faker这个类。</p><p><strong>2.</strong> 实例化，保存到变量fake中。</p><p><strong>3.</strong> 调用name()方法随机生成一个名字。</p><p><strong>4.</strong> 调用address()方法随机生成地址信息。</p><p>默认是英文数据，如果需要造其他语言的数据，可以使用 locale参数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker(locale=<span class="string">'zh_CN'</span>)</span><br><span class="line">name = fake.name()</span><br><span class="line">address = fake.address()</span><br><span class="line">print(name)</span><br><span class="line">print(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出信息</span></span><br><span class="line">张艳</span><br><span class="line">海南省上海市朝阳邱路y座 <span class="number">175208</span></span><br></pre></td></tr></table></figure><p>其他语种或地区的数据，我们可以传入相应的地区值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ar_EG - Arabic (Egypt)</span><br><span class="line">ar_PS - Arabic (Palestine)</span><br><span class="line">ar_SA - Arabic (Saudi Arabia)</span><br><span class="line">bg_BG - Bulgarian</span><br><span class="line">bs_BA - Bosnian</span><br><span class="line">cs_CZ - Czech</span><br><span class="line">de_DE - German</span><br><span class="line">dk_DK - Danish</span><br><span class="line">el_GR - Greek</span><br><span class="line">en_AU - English (Australia)</span><br><span class="line">en_CA - English (Canada)</span><br><span class="line">en_GB - English (Great Britain)</span><br><span class="line">en_NZ - English (New Zealand)</span><br><span class="line">en_US - English (United States)</span><br><span class="line">es_ES - Spanish (Spain)</span><br><span class="line">es_MX - Spanish (Mexico)</span><br><span class="line">et_EE - Estonian</span><br><span class="line">fa_IR - Persian (Iran)</span><br><span class="line">fi_FI - Finnish</span><br><span class="line">fr_FR - French</span><br><span class="line">hi_IN - Hindi</span><br><span class="line">hr_HR - Croatian</span><br><span class="line">hu_HU - Hungarian</span><br><span class="line">hy_AM - Armenian</span><br><span class="line">it_IT - Italian</span><br><span class="line">ja_JP - Japanese</span><br><span class="line">ka_GE - Georgian (Georgia)</span><br><span class="line">ko_KR - Korean</span><br><span class="line">lt_LT - Lithuanian</span><br><span class="line">lv_LV - Latvian</span><br><span class="line">ne_NP - Nepali</span><br><span class="line">nl_NL - Dutch (Netherlands)</span><br><span class="line">no_NO - Norwegian</span><br><span class="line">pl_PL - Polish</span><br><span class="line">pt_BR - Portuguese (Brazil)</span><br><span class="line">pt_PT - Portuguese (Portugal)</span><br><span class="line">ro_RO - Romanian</span><br><span class="line">ru_RU - Russian</span><br><span class="line">sl_SI - Slovene</span><br><span class="line">sv_SE - Swedish</span><br><span class="line">tr_TR - Turkish</span><br><span class="line">uk_UA - Ukrainian</span><br><span class="line">zh_CN - Chinese (China Mainland)</span><br><span class="line">zh_TW - Chinese (China Taiwan)</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#地理信息类</span></span><br><span class="line">fake.city_suffix()：市，县</span><br><span class="line">fake.country()：国家</span><br><span class="line">fake.country_code()：国家编码</span><br><span class="line">fake.district()：区</span><br><span class="line">fake.geo_coordinate()：地理坐标</span><br><span class="line">fake.latitude()：地理坐标(纬度)</span><br><span class="line">fake.longitude()：地理坐标(经度)</span><br><span class="line">fake.postcode()：邮编</span><br><span class="line">fake.province()：省份</span><br><span class="line">fake.address()：详细地址</span><br><span class="line">fake.street_address()：街道地址</span><br><span class="line">fake.street_name()：街道名</span><br><span class="line">fake.street_suffix()：街、路</span><br><span class="line"></span><br><span class="line"><span class="comment">#基础信息类</span></span><br><span class="line">ssn()：生成身份证号</span><br><span class="line">bs()：随机公司服务名</span><br><span class="line">company()：随机公司名（长）</span><br><span class="line">company_prefix()：随机公司名（短）</span><br><span class="line">company_suffix()：公司性质</span><br><span class="line">credit_card_expire()：随机信用卡到期日</span><br><span class="line">credit_card_full()：生成完整信用卡信息</span><br><span class="line">credit_card_number()：信用卡号</span><br><span class="line">credit_card_provider()：信用卡类型</span><br><span class="line">credit_card_security_code()：信用卡安全码</span><br><span class="line">job()：随机职位</span><br><span class="line">first_name_female()：女性名</span><br><span class="line">first_name_male()：男性名</span><br><span class="line">last_name_female()：女姓</span><br><span class="line">last_name_male()：男姓</span><br><span class="line">name()：随机生成全名</span><br><span class="line">name_female()：男性全名</span><br><span class="line">name_male()：女性全名</span><br><span class="line">phone_number()：随机生成手机号</span><br><span class="line">phonenumber_prefix()：随机生成手机号段</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算机基础、Internet信息类</span></span><br><span class="line">ascii_company_email()：随机ASCII公司邮箱名</span><br><span class="line">ascii_email()：随机ASCII邮箱：</span><br><span class="line">company_email()：</span><br><span class="line">email()：</span><br><span class="line">safe_email()：安全邮箱</span><br><span class="line"></span><br><span class="line"><span class="comment">#网络基础信息类</span></span><br><span class="line">domain_name()：生成域名</span><br><span class="line">domain_word()：域词(即，不包含后缀)</span><br><span class="line">ipv4()：随机IP4地址</span><br><span class="line">ipv6()：随机IP6地址</span><br><span class="line">mac_address()：随机MAC地址</span><br><span class="line">tld()：网址域名后缀(.com,.net.cn,等等，不包括.)</span><br><span class="line">uri()：随机URI地址</span><br><span class="line">uri_extension()：网址文件后缀</span><br><span class="line">uri_page()：网址文件（不包含后缀）</span><br><span class="line">uri_path()：网址文件路径（不包含文件名）</span><br><span class="line">url()：随机URL地址</span><br><span class="line">user_name()：随机用户名</span><br><span class="line">image_url()：随机URL地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#浏览器信息类</span></span><br><span class="line">chrome()：随机生成Chrome的浏览器user_agent信息</span><br><span class="line">firefox()：随机生成FireFox的浏览器user_agent信息</span><br><span class="line">internet_explorer()：随机生成IE的浏览器user_agent信息</span><br><span class="line">opera()：随机生成Opera的浏览器user_agent信息</span><br><span class="line">safari()：随机生成Safari的浏览器user_agent信息</span><br><span class="line">linux_platform_token()：随机Linux信息</span><br><span class="line">user_agent()：随机user_agent信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#数字类</span></span><br><span class="line">numerify()：三位随机数字</span><br><span class="line">random_digit()：0~9随机数</span><br><span class="line">random_digit_not_null()：1~9的随机数</span><br><span class="line">random_int()：随机数字，默认0~9999，可以通过设置min,max来设置</span><br><span class="line">random_number()：随机数字，参数digits设置生成的数字位数</span><br><span class="line">pyfloat()：</span><br><span class="line">left_digits=5 <span class="comment">#生成的整数位数, right_digits=2 #生成的小数位数, positive=True #是否只有正数</span></span><br><span class="line">pyint()：随机Int数字（参考random_int()参数）</span><br><span class="line">pydecimal()：随机Decimal数字（参考pyfloat参数）</span><br><span class="line"></span><br><span class="line"><span class="comment">#文本、加密类</span></span><br><span class="line">pystr()：随机字符串</span><br><span class="line">random_element()：随机字母</span><br><span class="line">random_letter()：随机字母</span><br><span class="line">paragraph()：随机生成一个段落</span><br><span class="line">paragraphs()：随机生成多个段落</span><br><span class="line">sentence()：随机生成一句话</span><br><span class="line">sentences()：随机生成多句话，与段落类似</span><br><span class="line">text()：随机生成一篇文章</span><br><span class="line">word()：随机生成词语</span><br><span class="line">words()：随机生成多个词语，用法与段落，句子，类似</span><br><span class="line">binary()：随机生成二进制编码</span><br><span class="line">boolean()：True/False</span><br><span class="line">language_code()：随机生成两位语言编码</span><br><span class="line">locale()：随机生成语言/国际 信息</span><br><span class="line">md5()：随机生成MD5</span><br><span class="line">null_boolean()：NULL/True/False</span><br><span class="line">password()：随机生成密码,可选参数：length：密码长度；special_chars：是否能使用特殊字符；digits：是否包含数字；upper_case：是否包含大写字母；lower_case：是否包含小写字母</span><br><span class="line">sha1()：随机SHA1</span><br><span class="line">sha256()：随机SHA256</span><br><span class="line">uuid4()：随机UUID</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间信息类</span></span><br><span class="line">date()：随机日期</span><br><span class="line">date_between()：随机生成指定范围内日期，参数：start_date，end_date</span><br><span class="line">date_between_dates()：随机生成指定范围内日期，用法同上</span><br><span class="line">date_object()：随机生产从1970-1-1到指定日期的随机日期。</span><br><span class="line">date_time()：随机生成指定时间（1970年1月1日至今）</span><br><span class="line">date_time_ad()：生成公元1年到现在的随机时间</span><br><span class="line">date_time_between()：用法同dates</span><br><span class="line">future_date()：未来日期</span><br><span class="line">future_datetime()：未来时间</span><br><span class="line">month()：随机月份</span><br><span class="line">month_name()：随机月份（英文）</span><br><span class="line">past_date()：随机生成已经过去的日期</span><br><span class="line">past_datetime()：随机生成已经过去的时间</span><br><span class="line">time()：随机24小时时间</span><br><span class="line">timedelta()：随机获取时间差</span><br><span class="line">time_object()：随机24小时时间，time对象</span><br><span class="line">time_series()：随机TimeSeries对象</span><br><span class="line">timezone()：随机时区</span><br><span class="line">unix_time()：随机Unix时间</span><br><span class="line">year()：随机年份</span><br><span class="line"></span><br><span class="line"><span class="comment">#python 相关方法</span></span><br><span class="line">profile()：随机生成档案信息</span><br><span class="line">simple_profile()：随机生成简单档案信息</span><br><span class="line">pyiterable()</span><br><span class="line">pylist()</span><br><span class="line">pyset()</span><br><span class="line">pystruct()</span><br><span class="line">pytuple()</span><br><span class="line">pydict()</span><br></pre></td></tr></table></figure><p>可以用dir(fake)方法，来查看Faker库可以制造哪些数据。目前Faker支持近300种数据，还支持自行扩展。而我们只需要创造fake对象后调用不同的方法即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的了解，Faker真的是造数据的神器，值得你去好好学习下，让它真正成为你手动的利器。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;互联网中软件开发和测试过程中，有时候需要一些测试数据。针对这种需求，我们通常的做法是使用现有的系统数据或者手动随意制造一些数据。但是由于现在的互联网飞速发展，业务系统越来越复杂，数据也越来越多样。如再手动去制造数据，不仅需要花费大量精力，还容易出错，而且制造的数据很假。本文推荐造数据神器python开源库Faker，此Faker不是lol天才选手大魔王Faker，但是也是一样给力。&lt;/p&gt;
    
    </summary>
    
      <category term="编程积累" scheme="https://wandouduoduo.github.io/categories/%E7%BC%96%E7%A8%8B%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="Python" scheme="https://wandouduoduo.github.io/categories/%E7%BC%96%E7%A8%8B%E7%A7%AF%E7%B4%AF/Python/"/>
    
    
      <category term="Python" scheme="https://wandouduoduo.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>双十一订单峰值58.3万个/秒销量千亿,到底是谁抗下了所有</title>
    <link href="https://wandouduoduo.github.io/articles/82b81574.html"/>
    <id>https://wandouduoduo.github.io/articles/82b81574.html</id>
    <published>2020-12-04T03:29:15.000Z</published>
    <updated>2020-12-04T06:35:49.411Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>本文以淘宝作为例详细介绍了网站从一百个并发到千万级并发情况下服务端的架构的演进，同时也列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍。</p><p><strong>1）什么是分布式？</strong><br> 系统中的多个模块在不同服务器上部署，模块之间通过调用来完成协作，即可称为分布式系统。如Tomcat和数据库分别部署在不同的服务器上，或两个相同功能的Tomcat分别部署在不同服务器上。</p><p><strong>2）什么是高可用？</strong><br> 系统中部分节点异常导致失效时，其他节点还能够正常工作，并接替它完成派发给它的未完工作。继续提供服务，则可认为系统具有高可用性。</p><p><strong>3）什么是集群？</strong><br> 一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。如Zookeeper中的Master和Slave分别部署在多台服务器上，共同组成一个整体提供集中配置服务。<br>在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性。</p><p><strong>4）什么是负载均衡？</strong><br> 请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的。</p><p><strong>5）什么是正向代理和反向代理？</strong><br> 系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；<br> 当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。<br> 简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://wandouduoduo.github.io/articles/4964e843.html">大型网站架构演变</a></p><h2 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h2><h3 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a><strong>单机架构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/1.jpg" alt="img"></p><p>以淘宝作为例：在网站最初时，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。</p><p>用户通过浏览器访问，向<a href="http://www.taobao.com这个域名发起请求，首先会通过DNS服务器（域名系统）把域名转换为实际服务IP地址比方为10.102.4.1，然后浏览器会转而直接去访问该IP。而实际提供服务的假设是Tomcat，而Tomcat会和数据库进行数据交互来完成请求响应的动作。" rel="noopener" target="_blank">www.taobao.com这个域名发起请求，首先会通过DNS服务器（域名系统）把域名转换为实际服务IP地址比方为10.102.4.1，然后浏览器会转而直接去访问该IP。而实际提供服务的假设是Tomcat，而Tomcat会和数据库进行数据交互来完成请求响应的动作。</a></p><p><strong>架构瓶颈</strong></p><p>随着用户数的增长，单台服务器的压力倍增，而Tomcat和数据库之间也因为资源紧张，开始竞争资源，单机的性能不足以再支撑业务。</p><h3 id="第一次演进：Tomcat与数据库分开部署"><a href="#第一次演进：Tomcat与数据库分开部署" class="headerlink" title="第一次演进：Tomcat与数据库分开部署"></a>第一次演进：Tomcat与数据库分开部署</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/2.jpg" alt="img"></p><p>Tomcat和数据库分别独占一台服务器资源，显著提高两者各自性能。</p><p><strong>架构瓶颈</strong></p><p>随着用户数的增长，请求并发读写数据库就成为瓶颈。</p><h3 id="第二次演进：引入本地缓存和分布式缓存"><a href="#第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="第二次演进：引入本地缓存和分布式缓存"></a>第二次演进：引入本地缓存和分布式缓存</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/3.jpg" alt="img"></p><p>那为了提高数据库的读写性能，在Tomcat同台服务器上或同JVM中增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的html页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力。</p><p>这里介绍下缓存的作用，正常请求是请求到tomcat，需要展示数据，然后tomcat去请求读数据库信息。而缓存就会把这些数据存储下来。如果再有其他用户请求需要展示这些数据，那么tomcat就不去读数据库的数据。直接把缓存中的数据返回给用户。缓存减少了请求和数据库之间的读写请求和数据交互。</p><p>其中涉及的技术包括：使用memcached作为本地缓存，使用Redis作为分布式缓存，还会涉及缓存一致性、缓存穿透/击穿、缓存雪崩、热点数据集中失效等问题。</p><p><strong>架构瓶颈</strong></p><p>缓存抗住了大部分的访问请求，随着用户数的增长，并发压力主要落在单机的Tomcat上，响应逐渐变慢。</p><h3 id="第三次演进：引入反向代理实现负载均衡"><a href="#第三次演进：引入反向代理实现负载均衡" class="headerlink" title="第三次演进：引入反向代理实现负载均衡"></a>第三次演进：引入反向代理实现负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/4.jpg" alt="img"></p><p>在多台服务器上分别部署Tomcat，使用Nginx做负载均衡和转发，配置反向代理把请求均匀分发到每个Tomcat中。</p><p>此处假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发。</p><p>其中涉及的技术包括：Nginx、HAProxy，两者都是工作在网络第七层的反向代理软件，主要支持http协议，还会涉及session共享、文件上传下载的问题。</p><p><strong>架构瓶颈</strong></p><p>反向代理使应用服务器可支持的并发量大大增加，但并发量的增长也意味着更多请求穿透到数据库，单机的数据库最终成为瓶颈。</p><h3 id="第四次演进：数据库读写分离"><a href="#第四次演进：数据库读写分离" class="headerlink" title="第四次演进：数据库读写分离"></a>第四次演进：数据库读写分离</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/5.jpg" alt="img"></p><p>数据库读写分离，把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据。</p><p>其中涉及的技术包括：Mycat，它是数据库中间件，可通过它来组织数据库的分离读写和分库分表，客户端通过它来访问下层数据库，还会涉及数据同步，数据一致性的问题。</p><p><strong>架构瓶颈</strong></p><p>业务逐渐变多，不同业务之间的访问量差距较大，所有业务的表都在同一个数据库中，而不同业务直接竞争数据库，相互影响性能。</p><h3 id="第五次演进：数据库按业务分库"><a href="#第五次演进：数据库按业务分库" class="headerlink" title="第五次演进：数据库按业务分库"></a>第五次演进：数据库按业务分库</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/6.jpg" alt="img"></p><p>把不同业务的数据保存到不同的数据库中，使业务之间的资源竞争降低，对于访问量大的业务，可以部署更多的服务器来支撑。</p><p>这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决，但这不是本文讨论的重点，有兴趣的可以自行搜索解决方案。</p><p><strong>架构瓶颈</strong></p><p>随着用户数的增长，单机的写库会逐渐会达到性能瓶颈。</p><h3 id="第六次演进：把大表拆分为小表"><a href="#第六次演进：把大表拆分为小表" class="headerlink" title="第六次演进：把大表拆分为小表"></a>第六次演进：把大表拆分为小表</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/7.jpg" alt="img"></p><p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；</p><p>针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。</p><p>只要实时操作的表数据量足够小，请求能够足够均匀的分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能。其中前面提到的Mycat也支持在大表拆分为小表情况下的访问控制。</p><p>这种做法显著的增加了数据库运维的难度，对DBA的要求较高。数据库设计到这种结构时，已经可以称为分布式数据库</p><p>但这只是一个逻辑的数据库整体，数据库里不同的组成部分是由不同的组件单独来实现的</p><p>如分库分表的管理和请求分发，由Mycat实现，SQL的解析由单机的数据库实现，读写分离可能由网关和消息队列来实现，查询结果的汇总可能由数据库接口层来实现等等</p><p>这种架构其实是MPP（大规模并行处理）架构的一类实现。</p><p>目前开源和商用都已经有不少MPP数据库，开源中比较流行的有Greenplum、TiDB、Postgresql XC、HAWQ等，商用的如南大通用的GBase、睿帆科技的雪球DB、华为的LibrA等等</p><p>不同的MPP数据库的侧重点也不一样，如TiDB更侧重于分布式OLTP场景，Greenplum更侧重于分布式OLAP场景</p><p>这些MPP数据库基本都提供了类似Postgresql、Oracle、MySQL那样的SQL标准支持能力，能把一个查询解析为分布式的执行计划分发到每台机器上并行执行，最终由数据库本身汇总数据进行返回</p><p>也提供了诸如权限管理、分库分表、事务、数据副本等能力，并且大多能够支持100个节点以上的集群，大大降低了数据库运维的成本，并且使数据库也能够实现水平扩展。</p><p><strong>架构瓶颈</strong></p><p>数据库和Tomcat都能够水平扩展，可支撑的并发大幅提高，随着用户数的增长，最终单机的Nginx会成为瓶颈。</p><h3 id="第七次演进：使用LVS或F5来使多个Nginx负载均衡"><a href="#第七次演进：使用LVS或F5来使多个Nginx负载均衡" class="headerlink" title="第七次演进：使用LVS或F5来使多个Nginx负载均衡"></a>第七次演进：使用LVS或F5来使多个Nginx负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/8.jpg" alt="img"></p><p>由于瓶颈在Nginx，因此无法通过两层的Nginx来实现多个Nginx的负载均衡。</p><p>图中的LVS和F5是工作在网络第四层的负载均衡解决方案，其中LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；</p><p>F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。</p><p>由于LVS是单机版的软件，若LVS所在服务器宕机则会导致整个后端系统都无法访问，因此需要有备用节点。</p><p>可使用keepalived软件模拟出虚拟IP，然后把虚拟IP绑定到多台LVS服务器上，浏览器访问虚拟IP时，会被路由器重定向到真实的LVS服务器</p><p>当主LVS服务器宕机时，keepalived软件会自动更新路由器中的路由表，把虚拟IP重定向到另外一台正常的LVS服务器，从而达到LVS服务器高可用的效果。</p><p>此处需要注意的是，上图中从Nginx层到Tomcat层这样画并不代表全部Nginx都转发请求到全部的Tomcat</p><p>在实际使用时，可能会是几个Nginx下面接一部分的Tomcat，这些Nginx之间通过keepalived实现高可用，其他的Nginx接另外的Tomcat，这样可接入的Tomcat数量就能成倍的增加。</p><p><strong>架构瓶颈</strong></p><p>由于LVS也是单机的，随着并发数增长到几十万时，LVS服务器最终会达到瓶颈，此时用户数达到千万甚至上亿级别，用户分布在不同的地区，与服务器机房距离不同，导致了访问的延迟会明显不同。</p><h3 id="第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="第八次演进：通过DNS轮询实现机房间的负载均衡"></a>第八次演进：通过DNS轮询实现机房间的负载均衡</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/9.jpg" alt="img"></p><p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。</p><p>当用户访问<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.taobao.com" rel="noopener" target="_blank">www.taobao.com</a>时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问。此方式能实现机房间的负载均衡</p><p>至此，系统可做到机房级别的水平扩展，千万级到亿级的并发量都可通过增加机房来解决，系统入口处的请求并发量不再是问题。</p><p><strong>架构瓶颈</strong></p><p>随着数据的丰富程度和业务的发展，检索、分析等需求越来越丰富，单单依靠数据库无法解决如此丰富的需求。</p><h3 id="第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="第九次演进：引入NoSQL数据库和搜索引擎等技术"></a>第九次演进：引入NoSQL数据库和搜索引擎等技术</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/10.jpg" alt="img"></p><p>当数据库中的数据多到一定规模时，数据库就不适用于复杂的查询了，往往只能满足普通查询的场景。</p><p>对于统计报表场景，在数据量大时不一定能跑出结果，而且在跑复杂查询时会导致其他查询变慢</p><p>对于全文检索、可变数据结构等场景，数据库天生不适用。因此需要针对特定的场景，引入合适的解决方案。</p><p>如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key value类型的数据，可通过HBase和Redis等方案解决</p><p>对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决。</p><p>当然，引入更多组件同时会提高系统的复杂度，不同的组件保存的数据需要同步，需要考虑一致性的问题，需要有更多的运维手段来管理这些组件等。</p><p><strong>架构瓶颈</strong></p><p>引入更多组件解决了丰富的需求，业务维度能够极大扩充，随之而来的是一个应用中包含了太多的业务代码，业务的升级迭代变得困难。</p><h3 id="第十次演进：大应用拆分为小应用"><a href="#第十次演进：大应用拆分为小应用" class="headerlink" title="第十次演进：大应用拆分为小应用"></a>第十次演进：大应用拆分为小应用</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/11.jpg" alt="img"></p><p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决。</p><p><strong>架构瓶颈</strong></p><p>不同应用之间存在共用的模块，由应用单独管理会导致相同代码存在多份，导致公共功能升级时全部应用代码都要跟着升级。</p><h3 id="第十一次演进：复用的功能抽离成微服务"><a href="#第十一次演进：复用的功能抽离成微服务" class="headerlink" title="第十一次演进：复用的功能抽离成微服务"></a>第十一次演进：复用的功能抽离成微服务</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/12.jpg" alt="img"></p><p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理</p><p>这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理。</p><p>此外，可以通过Dubbo、SpringCloud等框架实现服务治理、限流、熔断、降级等功能，提高服务的稳定性和可用性。</p><p><strong>架构瓶颈</strong></p><p>不同服务的接口访问方式不同，应用代码需要适配多种访问方式才能使用服务，此外，应用访问服务，服务之间也可能相互访问，调用链将会变得非常复杂，逻辑变得混乱。</p><h3 id="第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"></a>第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/13.jpg" alt="img"></p><p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。</p><p>这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构，这种架构与微服务架构容易混淆，因为表现形式十分相似。</p><p>个人理解，微服务架构更多是指把系统里的公共服务抽取出来单独运维管理的思想，而SOA架构则是指一种拆分服务并使服务接口访问变得统一的架构思想，SOA架构中包含了微服务的思想。</p><p><strong>架构瓶颈</strong></p><p>业务不断发展，应用和服务都会不断变多，应用和服务的部署变得复杂，同一台服务器上部署多个服务还要解决运行环境冲突的问题</p><p>此外，对于如大促这类需要动态扩缩容的场景，需要水平扩展服务的性能，就需要在新增的服务上准备运行环境，部署服务等，运维将变得十分困难。</p><h3 id="第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"><a href="#第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理" class="headerlink" title="第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理"></a><strong>第十三次演进：引入容器化技术实现运行环境隔离与动态服务管理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/14.jpg" alt="img"></p><p>目前最流行的容器化技术是Docker，最流行的容器管理服务是Kubernetes(K8S)，应用/服务可以打包为Docker镜像，通过K8S来动态分发和部署镜像。</p><p>Docker镜像可理解为一个能运行你的应用/服务的最小的操作系统，里面放着应用/服务的运行代码，运行环境根据实际的需要设置好。</p><p>把整个“操作系统”打包为一个镜像后，就可以分发到需要部署相关服务的机器上，直接启动Docker镜像就可以把服务起起来，使服务的部署和运维变得简单。</p><p>在大促的之前，可以在现有的机器集群上划分出服务器来启动Docker镜像，增强服务的性能</p><p>大促过后就可以关闭镜像，对机器上的其他服务不造成影响（在第18节之前，服务运行在新增机器上需要修改系统配置来适配服务，这会导致机器上其他服务需要的运行环境被破坏）。</p><p><strong>架构瓶颈</strong></p><p>使用容器化技术后服务动态扩缩容问题得以解决，但是机器还是需要公司自身来管理，在非大促的时候，还是需要闲置着大量的机器资源来应对大促，机器自身成本和运维成本都极高，资源利用率低。</p><h3 id="第十四次演进：以云平台承载系统"><a href="#第十四次演进：以云平台承载系统" class="headerlink" title="第十四次演进：以云平台承载系统"></a>第十四次演进：以云平台承载系统</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/82b81574/15.jpg" alt="img"></p><p>系统可部署到公有云上，利用公有云的海量机器资源，解决动态硬件资源的问题</p><p>在大促的时间段里，在云平台中临时申请更多的资源，结合Docker和K8S来快速部署服务，在大促结束后释放资源，真正做到按需付费，资源利用率大大提高，同时大大降低了运维成本。</p><p>所谓的云平台，就是把海量机器资源，通过统一的资源管理，抽象为一个资源整体</p><p>在云平台上可按需动态申请硬件资源（如CPU、内存、网络等），并且之上提供通用的操作系统，提供常用的技术组件（如Hadoop技术栈，MPP数据库等）供用户使用，甚至提供开发好的应用</p><p>用户不需要关心应用内部使用了什么技术，就能够解决需求（如音视频转码服务、邮件服务、个人博客等）。</p><p>在云平台中会涉及如下几个概念：</p><ol><li>IaaS：基础设施即服务。对应于上面所说的机器资源统一为资源整体，可动态申请硬件资源的层面；</li><li>PaaS：平台即服务。对应于上面所说的提供常用的技术组件方便系统的开发和维护；</li><li>SaaS：软件即服务。对应于上面所说的提供开发好的应用或服务，按功能或性能要求付费。</li></ol><p>至此：以上所提到的从高并发访问问题，到服务的架构和系统实施的层面都有了各自的解决方案。</p><p>但同时也应该意识到，在上面的介绍中，其实是有意忽略了诸如跨机房数据同步、分布式事务实现等等的实际问题，这些问题以后有机会再拿出来单独讨论。</p><h2 id="架构设计总结"><a href="#架构设计总结" class="headerlink" title="架构设计总结"></a>架构设计总结</h2><p><strong>1）架构的调整是否必须按照上述演变路径进行？</strong></p><p>不是的，以上所说的架构演变顺序只是针对某个侧面进行单独的改进</p><p>在实际场景中，可能同一时间会有几个问题需要解决，或者可能先达到瓶颈的是另外的方面，这时候就应该按照实际问题实际解决。</p><p>如在政府类的并发量可能不大，但业务可能很丰富的场景，高并发就不是重点解决的问题，此时优先需要的可能会是丰富需求的解决方案。</p><p><strong>2）对于将要实施的系统，架构应该设计到什么程度？</strong></p><p>对于单次实施并且性能指标明确的系统，架构设计到能够支持系统的性能指标要求就足够了，但要留有扩展架构的接口以便不备之需。</p><p>对于不断发展的系统，如电商平台，应设计到能满足下一阶段用户量和性能指标要求的程度，并根据业务的增长不断的迭代升级架构，以支持更高的并发和更丰富的业务。</p><p><strong>3）服务端架构和大数据架构有什么区别？</strong></p><p>所谓的“大数据”其实是海量数据采集清洗转换、数据存储、数据分析、数据服务等场景解决方案的一个统称，在每一个场景都包含了多种可选的技术</p><p>如数据采集有Flume、Sqoop、Kettle等，数据存储有分布式文件系统HDFS、FastDFS，NoSQL数据库HBase、MongoDB等，数据分析有Spark技术栈、机器学习算法等。</p><p>总的来说大数据架构就是根据业务的需求，整合各种大数据组件组合而成的架构，一般会提供分布式存储、分布式计算、多维分析、数据仓库、机器学习算法等能力。</p><p>而服务端架构更多指的是应用组织层面的架构，底层能力往往是由大数据架构来提供。</p><p><strong>4）有没有一些架构设计的原则？</strong></p><ul><li>N+1设计：系统中的每个组件都应做到没有单点故障；</li><li>回滚设计：确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</li><li>禁用设计：应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</li><li>监控设计：在设计阶段就要考虑监控的手段；</li><li>多活数据中心设计：若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</li><li>采用成熟的技术：刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</li><li>资源隔离设计：应避免单一业务占用全部资源；</li><li>架构应能水平扩展：系统只有做到能水平扩展，才能有效避免瓶颈问题；</li><li>非核心则购买：非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</li><li>使用商用硬件：商用硬件能有效降低硬件故障的机率；</li><li>快速迭代：系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</li><li>无状态设计：服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以淘宝作为例详细介绍了网站从一百个并发到千万级并发情况下服务端的架构的演进，同时也列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。&lt;/p&gt;
    
    </summary>
    
      <category term="心得体会" scheme="https://wandouduoduo.github.io/categories/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
    
      <category term="Web" scheme="https://wandouduoduo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Nginx优化之gzip压缩提升网站速度</title>
    <link href="https://wandouduoduo.github.io/articles/f4dffee9.html"/>
    <id>https://wandouduoduo.github.io/articles/f4dffee9.html</id>
    <published>2020-12-03T03:28:18.000Z</published>
    <updated>2020-12-03T06:51:22.173Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>nginx作为web服务被广泛应用在网站中。怎么提高网站的响应速度，除了cdn加速外，合理的配置，也可达到提速目的。本文为达这一目的，配置中添加了gzip压缩配置。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Web服务器处理HTTP压缩的过程如下：</p><ol><li><p>Web服务器接收到浏览器的HTTP请求后，检查浏览器是否支持HTTP压缩（Accept-Encoding 信息）；</p></li><li><p>如果浏览器支持HTTP压缩，Web服务器检查请求文件的后缀名；</p></li><li><p>如果请求文件是HTML、CSS等静态文件，Web服务器到压缩缓冲目录中检查是否已经存在请求文件的最新压缩文件；</p></li><li><p>如果请求文件的压缩文件不存在，Web服务器向浏览器返回未压缩的请求文件，并在压缩缓冲目录中存放请求文件的压缩文件；</p></li><li><p>如果请求文件的最新压缩文件已经存在，则直接返回请求文件的压缩文件；</p></li><li><p>如果请求文件是动态文件，Web服务器动态压缩内容并返回浏览器，压缩内容不存放到压缩缓存目录中。</p></li></ol><p><strong>下面是两个演示图：</strong></p><p>未使用Gzip：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/1.png" alt></p><p>开启使用Gzip后：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/2.png" alt></p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gzip on|off;  <span class="comment">#是否开启gzip</span></span><br><span class="line">gzip_buffers 32 4K| 16 8K <span class="comment">#缓冲(压缩在内存中缓冲几块? 每块多大?)</span></span><br><span class="line">gzip_comp_level [1-9] <span class="comment">#推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span></span><br><span class="line">gzip_disable <span class="comment">#正则匹配UA 什么样的Uri不进行gzip</span></span><br><span class="line">gzip_min_length 200 <span class="comment"># 开始压缩的最小长度(再小就不要压缩了,意义不在)</span></span><br><span class="line">gzip_http_version 1.0|1.1 <span class="comment"># 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span></span><br><span class="line">gzip_proxied          <span class="comment"># 设置请求者代理服务器,该如何缓存内容</span></span><br><span class="line">gzip_types text/plain application/xml <span class="comment"># 对哪些类型的文件用压缩 如txt,xml,html ,css</span></span><br><span class="line">gzip_vary on|off  <span class="comment"># 是否传输gzip压缩标志</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>图片/mp3这样的二进制文件不必压缩。因为压缩率比较小, 比如100-&gt;80字节,而且压缩也是耗费CPU资源的。比较小的文件也不必压缩。</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>在nginx.conf配置文件中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_buffers 32 4K;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_min_length 100;</span><br><span class="line">gzip_types application/javascript text/css text/xml;</span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\."</span>; <span class="comment">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/3.png" alt></p><p>保存并重启nginx，刷新页面（为了避免缓存，请强制刷新）就能看到效果了。以谷歌浏览器为例，通过F12看请求的响应头部，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/4.png" alt></p><p>Content-Encoding:gzip   说明开启了gzip压缩</p><p>Transfet-Encoding:chunked  说明压缩后分块传输</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/5.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/6.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/f4dffee9/6.png" alt></p><p>在此我们看出这个js的传输大小68.3k，而这个js实际大小为282k 所以压缩生效成功。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx作为web服务被广泛应用在网站中。怎么提高网站的响应速度，除了cdn加速外，合理的配置，也可达到提速目的。本文为达这一目的，配置中添加了gzip压缩配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Web服务" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>阿里Canal实时同步MySQL数据到ES等其他存储的开源神器</title>
    <link href="https://wandouduoduo.github.io/articles/4ee40b02.html"/>
    <id>https://wandouduoduo.github.io/articles/4ee40b02.html</id>
    <published>2020-12-02T10:11:09.000Z</published>
    <updated>2020-12-03T06:06:30.373Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>我们在做网站的搜索功能时需要用到检索数据，而从数据库中来查找效率是很低，而且不现实的。通常对检索支持比较好的就是<code>Elasticsearch</code>或<code>HBase</code>等存储，但是前期的数据都存在mysql数据库中，那么怎么一直实时数据同步到es中，而又不影响现有业务。阿里开源神器<code>canal</code>可以解决这个问题，它可以把MySQL中的数据实时同步到<code>Elasticsearch</code>、<code>HBase</code>等数据存储中。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>canal简单说就是对MySQL的增量数据进行实时同步到MySQL、Elasticsearch、HBase等数据存储中，它还提供增量数据的订阅和消费等用途。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/1.png" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/alibaba/canal/wiki" rel="noopener" target="_blank">官方文档</a></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>canal会模拟mysql主库和从库的交互协议，伪装成从库，然后向主库发送dump协议请求，主库收到dump请求会向canal推送binlog，canal通过解析binlog将数据同步到其他存储中去。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/1.jpg" alt></p><h2 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/3.png" alt></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>本文以mysql实时同步数据到es为例来操作。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>从<a href="https://github.com/alibaba/canal/releases" rel="noopener" target="_blank">官方下载地址</a>下载所有组件：canal-server、canal-adapter、canal-admin。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">canal-server（canal-deploy）：直接监听MySQL的binlog，把自己伪装成MySQL的从库，只负责接收数据，并不做处理。</span><br><span class="line"></span><br><span class="line">canal-adapter：相当于canal的客户端，会从canal-server中获取数据，然后对数据进行同步，可以同步到MySQL、Elasticsearch和HBase等存储中去。</span><br><span class="line"></span><br><span class="line">canal-admin：为canal提供整体配置管理、节点运维等面向运维的功能，提供相对友好的WebUI操作界面，方便更多用户快速和安全的操作。</span><br></pre></td></tr></table></figure><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a><strong>数据库配置</strong></h3><p>由于canal是通过订阅MySQL的binlog来实现数据同步的，所以我们需要开启MySQL的binlog写入功能，并设置binlog-format为ROW模式，配置文件为/etc/mysql/conf/my.cnf，改为如下内容即可；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/4.png" alt="img"></p><p>配置完成后需要重新启动MySQL，重启</p><p>查看binlog是否启用；</p><blockquote><p>show  variables  like  ‘%log_bin%’</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/5.png" alt="img"></p><p>查看下MySQL的binlog模式；</p><blockquote><p>show  variables  like  ‘binlog_format%’;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/6.png" alt="img"></p><p>创建一个从库账号，用于订阅binlog，这里创建的账号为canal:canal；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/7.png" alt="img"></p><p>测试用的数据库为canal-test，之后创建一张商品表product，建表语句如下。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/8.png" alt="img"></p><h3 id="canal-server"><a href="#canal-server" class="headerlink" title="canal-server"></a><strong>canal-server</strong></h3><p>将下载好的压缩包canal.deployer-1.1.5-SNAPSHOT.tar.gz上传到Linux服务器，解压到指定目录/mydata/canal-server。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  -zxvf  canal.deployer-1.1.5-SNAPSHOT.tar.gz -C /mydata/canal-server/</span><br></pre></td></tr></table></figure><p>目录结构如下:</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/9.png" alt="img"></p><p>修改配置文件conf/example/instance.properties，修改数据库相关配置；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/10.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sh  bin/startup.sh</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">tail -f logs/canal/canal.log</span><br><span class="line"><span class="comment">#查看instance日志信息</span></span><br><span class="line">tail -f logs/example/example.log</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/11.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/12.png" alt="img"></p><h3 id="canal-adapter"><a href="#canal-adapter" class="headerlink" title="canal-adapter"></a><strong>canal-adapter</strong></h3><p>将下载好的压缩包canal.adapter-1.1.5-SNAPSHOT.tar.gz上传到Linux服务器，然后解压到指定目录/mydata/canal-adpter，解压完成后目录结构如下；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/13.png" alt="img"></p><p>修改配置文件conf/application.yml，修改canal-server配置、数据源配置和客户端适配器配置；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/14.png" alt="img"></p><p>添加配置文件canal-adapter/conf/es7/product.yml，用于配置MySQL中的表与Elasticsearch中索引的映射关系；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/15.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动canal-adapter服务</span></span><br><span class="line">sh bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务日志信息</span></span><br><span class="line">tail -f logs/adapter/adapter.log</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/16.png" alt="img"></p><h3 id="数据同步演示"><a href="#数据同步演示" class="headerlink" title="数据同步演示"></a><strong>数据同步演示</strong></h3><p>首先需要在Elasticsearch中创建索引，与MySQL中的product表相对应，直接在Kibana的Dev Tools中使用如下命令创建即可；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/17.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/18.png" alt="img"></p><p>查看下索引的结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  canal_product/_mapping</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/19.png" alt="img"></p><p>在数据库中创建一条记录；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/20.png" alt="img"></p><p>在Elasticsearch中搜索下，发现数据已经同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET canal_product/_search</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/21.png" alt="img"></p><p>再对数据进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE product SET title=<span class="string">'小米10'</span> WHEREid=5</span><br></pre></td></tr></table></figure><p>修改成功后，再在Elasticsearch中搜索下查看</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/22.png" alt="img"></p><p>再对数据进行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM product WHEREid=5</span><br></pre></td></tr></table></figure><p>删除成功后，在Elasticsearch中搜索下查看。至此MySQL同步到Elasticsearch的功能完成了！</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/23.png" alt="img"></p><h3 id="canal-admin使用"><a href="#canal-admin使用" class="headerlink" title="canal-admin使用"></a>canal-admin使用</h3><p>将下载好的压缩包canal.admin-1.1.5-SNAPSHOT.tar.gz上传到Linux服务器，然后解压到指定目录/mydata/canal-admin，解压完成后目录结构如下:</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/24.png" alt="img"></p><p>创建canal-admin数据库canal_manager，创建SQL脚本为/mydata/canal-admin/conf/canal_manager.sql，会创建如下表:</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/25.png" alt="img"></p><p>修改配置文件conf/application.yml，修改数据源配置和canal-admin的管理账号配置。注意需要用一个有读写权限的数据库账号，比如管理账号root:root；</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/26.png" alt="img"></p><p>canal-server的conf/canal_local.properties文件进行配置，修改canal-admin的配置，修改后重启canal-server</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/27.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动canal-admin服务</span></span><br><span class="line">sh bin/startup.sh</span><br></pre></td></tr></table></figure><p>查看服务日志信息</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/28.png" alt="img"></p><p>访问canal-admin的Web界面，输入账号密码admin:123456即可登录，访问地址：<a href="http://192.168.3.101:8089" rel="noopener" target="_blank">http://192.168.3.101:8089</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/29.png" alt="img"></p><p>登录成功后即可使用Web界面操作canal-server。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/4ee40b02/30.png" alt="img"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在做网站的搜索功能时需要用到检索数据，而从数据库中来查找效率是很低，而且不现实的。通常对检索支持比较好的就是&lt;code&gt;Elasticsearch&lt;/code&gt;或&lt;code&gt;HBase&lt;/code&gt;等存储，但是前期的数据都存在mysql数据库中，那么怎么一直实时数据同步到es中，而又不影响现有业务。阿里开源神器&lt;code&gt;canal&lt;/code&gt;可以解决这个问题，它可以把MySQL中的数据实时同步到&lt;code&gt;Elasticsearch&lt;/code&gt;、&lt;code&gt;HBase&lt;/code&gt;等数据存储中。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/"/>
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux并行解压缩命令pigz</title>
    <link href="https://wandouduoduo.github.io/articles/2025d7d5.html"/>
    <id>https://wandouduoduo.github.io/articles/2025d7d5.html</id>
    <published>2020-11-24T10:02:08.000Z</published>
    <updated>2020-11-24T21:20:09.399Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Linux一切皆文件。解压缩文件是日常操作。一般都是用gzip来解压缩的，但是gzip是串行的。那就会造成解压缩速度比较慢。为了提高效率，那有没有可以并行解压缩的呢？这就是给大家推荐的<code>pigz</code>命令。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>效率</strong></p><p>pigz命令可以用来解压缩文件，最重要的是支持多线程并行处理，解压缩比gzip快。 pigz时间上比gzip快60%，同时CPU消耗则是gzip的好几倍。</p><p><strong>场景</strong></p><p>在对压缩效率要求较高、但对短时间内CPU消耗较高不受影响的场景，使用pigz非常合适。</p><p><strong>默认</strong></p><p>pigz 默认用当前的逻辑 cpu 个数来并发压缩，如果无法检测cpu逻辑个数的话，则默认并发 8 个线程，也可以使用 <code>-p</code> 指定线程数。需要注意的是其运行时 CPU使用比较高。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://zlib.net/pigz/" rel="noopener" target="_blank">官方网站</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pigz -y</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pigz [参数] [文件]</span></span><br><span class="line"></span><br><span class="line">pigz [ -cdfhikKlLmMnNqrRtz0..9,11 ] [ -b blocksize ] [ -p threads ] </span><br><span class="line">     [ -S suffix ] [ name ...  ]</span><br><span class="line">unpigz [ -cfhikKlLmMnNqrRtz ] [ -b blocksize ] [ -p threads ] </span><br><span class="line">       [ -S suffix ] [ name ...  ]</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-0 to -9, -11       <span class="comment"># Compression level (level 11, zopfli, is much slower)</span></span><br><span class="line">--fast, --best      <span class="comment"># Compression levels 1 and 9 respectively</span></span><br><span class="line">-b, --blocksize mmm <span class="comment"># Set compression block size to mmmK (default 128K)</span></span><br><span class="line">-c, --stdout        <span class="comment"># Write all processed output to stdout (won't delete)</span></span><br><span class="line">-d, --decompress    <span class="comment"># Decompress the compressed input</span></span><br><span class="line">-f, --force         <span class="comment"># Force overwrite, compress .gz, links, and to terminal</span></span><br><span class="line">-F  --first         <span class="comment"># Do iterations first, before block split for -11</span></span><br><span class="line">-h, --<span class="built_in">help</span>          <span class="comment"># Display a help screen and quit</span></span><br><span class="line">-i, --independent   <span class="comment"># Compress blocks independently for damage recovery</span></span><br><span class="line">-I, --iterations n  <span class="comment"># Number of iterations for -11 optimization</span></span><br><span class="line">-J, --maxsplits n   <span class="comment"># Maximum number of split blocks for -11</span></span><br><span class="line">-k, --keep          <span class="comment"># Do not delete original file after processing</span></span><br><span class="line">-K, --zip           <span class="comment"># Compress to PKWare zip (.zip) single entry format</span></span><br><span class="line">-l, --list          <span class="comment"># List the contents of the compressed input</span></span><br><span class="line">-L, --license       <span class="comment"># Display the pigz license and quit</span></span><br><span class="line">-m, --no-time       <span class="comment"># Do not store or restore mod time</span></span><br><span class="line">-M, --time          <span class="comment"># Store or restore mod time</span></span><br><span class="line">-n, --no-name       <span class="comment"># Do not store or restore file name or mod time</span></span><br><span class="line">-N, --name          <span class="comment"># Store or restore file name and mod time</span></span><br><span class="line">-O  --oneblock      <span class="comment"># Do not split into smaller blocks for -11</span></span><br><span class="line">-p, --processes n   <span class="comment"># Allow up to n compression threads (default is the number of online processors, or 8 if unknown)</span></span><br><span class="line">-q, --quiet         <span class="comment"># Print no messages, even on error</span></span><br><span class="line">-r, --recursive     <span class="comment"># Process the contents of all subdirectories</span></span><br><span class="line">-R, --rsyncable     <span class="comment"># Input-determined block locations for rsync</span></span><br><span class="line">-S, --suffix .sss   <span class="comment"># Use suffix .sss instead of .gz (for compression)</span></span><br><span class="line">-t, --<span class="built_in">test</span>          <span class="comment"># Test the integrity of the compressed input</span></span><br><span class="line">-v, --verbose       <span class="comment"># Provide more verbose output</span></span><br><span class="line">-V  --version       <span class="comment"># Show the version of pigz</span></span><br><span class="line">-Y  --synchronous   <span class="comment"># Force output file write to permanent storage</span></span><br><span class="line">-z, --zlib          <span class="comment"># Compress to zlib (.zz) instead of gzip format</span></span><br><span class="line">--                  <span class="comment"># All arguments after "--" are treated as files</span></span><br></pre></td></tr></table></figure><p><strong>常用参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-0 to -9, -11 <span class="comment">#压缩级别</span></span><br><span class="line">-p n <span class="comment">#指定压缩核心数，默认8个</span></span><br><span class="line">-k <span class="comment">#压缩/解压后保留原文件</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>可以结合<code>tar</code>使用, 压缩命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf - dir1 dir2 dir3 | pigz -p 8 &gt; output.tgz</span><br></pre></td></tr></table></figure><p>解压命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pigz -p 8 -d output.tgz</span><br></pre></td></tr></table></figure><p>如果是gzip格式，也支持用tar解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf output.tgz</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>除了<code>pigz</code>,<code>pbzip2</code>和<code>p7zip</code>分别是对bz2和7z格式进行并行化。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux一切皆文件。解压缩文件是日常操作。一般都是用gzip来解压缩的，但是gzip是串行的。那就会造成解压缩速度比较慢。为了提高效率，那有没有可以并行解压缩的呢？这就是给大家推荐的&lt;code&gt;pigz&lt;/code&gt;命令。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>辨别mtime参数带不带符号的用法</title>
    <link href="https://wandouduoduo.github.io/articles/faec86f1.html"/>
    <id>https://wandouduoduo.github.io/articles/faec86f1.html</id>
    <published>2020-11-20T06:03:18.000Z</published>
    <updated>2020-11-20T06:25:37.531Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Linux在日常用find mtime命令来查找近几天的文件，或者日志文件只需要保留7天，7天前的需要查找处理删掉。那么mtime参数有带符号(+号，-号)和不带符号之分。你真的能够清楚辨别区分吗？不见得吆，本文详解这个时间点，让你轻松辨别。</p><a id="more"></a><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>-mtime n</code></p><h3 id="带-符号"><a href="#带-符号" class="headerlink" title="带+符号"></a>带+符号</h3><p>这里的n，如果n为带有+号的值，意思为查找n天前所有的文件。比如n=+1且当前是24号9点，那么查找22号9点以前的数据，不包括22号9点到23号9点这段时间。</p><h3 id="带-符号-1"><a href="#带-符号-1" class="headerlink" title="带-符号"></a>带-符号</h3><p>如果是负号（n=-1）则为查找一天内的文件，比如当前时间24号9点，那么查找23点9点到24点9点时间段的数据，如果是（n=-2）则代表查找两天内的所有数据，比如当前时间24号9点，那么查找22点9点到24点9点时间段的数据。</p><h3 id="不带符号"><a href="#不带符号" class="headerlink" title="不带符号"></a>不带符号</h3><p>如果不带有符号，那么则查找指定前n天中这一天的数据。比如（n=1）且当前时间24号9点，那么查找22点9点到23点9点这个时间段的数据。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/faec86f1/1.jpg" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/faec86f1/2.png" alt></p><p>find . -mtime +0 -type f -name “log*” | xargs rm -f  #删除24小时以前log格式的文件     </p><p>#按文件更改时间来查找文件，-n指n天以内，+n指n天以前。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux在日常用find mtime命令来查找近几天的文件，或者日志文件只需要保留7天，7天前的需要查找处理删掉。那么mtime参数有带符号(+号，-号)和不带符号之分。你真的能够清楚辨别区分吗？不见得吆，本文详解这个时间点，让你轻松辨别。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装zabbix5.0LTS教程和优化</title>
    <link href="https://wandouduoduo.github.io/articles/a16acd4c.html"/>
    <id>https://wandouduoduo.github.io/articles/a16acd4c.html</id>
    <published>2020-11-18T06:57:48.000Z</published>
    <updated>2020-12-01T07:12:57.372Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在操作系统上直接部署安装zabbix太麻烦了，最近在搞k8s，正好研究下用docker容器来安装zabbix5.0LTS长期支持版。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：centos7</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="配置阿里源"><a href="#配置阿里源" class="headerlink" title="配置阿里源"></a>配置阿里源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h3 id="安装阿里的docker源"><a href="#安装阿里的docker源" class="headerlink" title="安装阿里的docker源"></a>安装阿里的docker源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="安装系统需要的工具"><a href="#安装系统需要的工具" class="headerlink" title="安装系统需要的工具"></a>安装系统需要的工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y <span class="built_in">bind</span>-utils net-tools wget unzip </span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="Docker使用国内的仓库"><a href="#Docker使用国内的仓库" class="headerlink" title="Docker使用国内的仓库"></a>Docker使用国内的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑docker配置文件，使用国内仓库进行镜像下载</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#重启docker加载配置</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="创建MySQL容器"><a href="#创建MySQL容器" class="headerlink" title="创建MySQL容器"></a>创建MySQL容器</h3><p>注意！指定UTF8字符集为重要参数，否则安装后在配置过程中，不能使用中文字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sunmysql -t \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix123$%^"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_123$%^"</span> \</span><br><span class="line">-v /data/zabbix/mysql:/var/lib/mysql \</span><br><span class="line">-d mysql:5.7 \</span><br><span class="line">--character-set-server=utf8 --collation-server=utf8_bin</span><br></pre></td></tr></table></figure><h3 id="创建java-gateway容器"><a href="#创建java-gateway容器" class="headerlink" title="创建java-gateway容器"></a>创建java-gateway容器</h3><p>默认zabbix不支持对java的监控，需要安装java-gateway来支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name zabbix-java-gateway -t \</span><br><span class="line">-d zabbix/zabbix-java-gateway:centos-5.0-latest</span><br></pre></td></tr></table></figure><h3 id="创建Zabbix服务端容器"><a href="#创建Zabbix服务端容器" class="headerlink" title="创建Zabbix服务端容器"></a>创建Zabbix服务端容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run --name zabbix-server -t \</span><br><span class="line">--link sunmysql:mysql \</span><br><span class="line">--link zabbix-java-gateway:zabbix-java-gateway \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /etc/timezone:/etc/timezone \</span><br><span class="line">-v /data/zabbix/alertscripts:/usr/lib/zabbix/alertscripts \</span><br><span class="line">-v /data/zabbix/externalscripts:/usr/lib/zabbix/externalscripts \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">"sunmysql"</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix_123$%^"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_123$%^"</span> \</span><br><span class="line">-e ZBX_CACHESIZE=2G \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-d zabbix/zabbix-server-mysql:centos-5.0-latest</span><br></pre></td></tr></table></figure><h3 id="创建Zabbix前端页面容器"><a href="#创建Zabbix前端页面容器" class="headerlink" title="创建Zabbix前端页面容器"></a>创建Zabbix前端页面容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --name zabbix-web -t \</span><br><span class="line">--link sunmysql:mysql \</span><br><span class="line">--link zabbix-server:zabbix-server \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">"sunmysql"</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix_123$%^"</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">"root_123$%^"</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">"Asia/Shanghai"</span> \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql:centos-5.0-latest</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>直接浏览器访问<a href="http://ip/即可。默认用户名和密码是：Admin/zabbix" rel="noopener" target="_blank">http://ip/即可。默认用户名和密码是：Admin/zabbix</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a16acd4c/1.png" alt></p><h2 id="优化教程"><a href="#优化教程" class="headerlink" title="优化教程"></a>优化教程</h2><h3 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h3><p>很多报警媒介原来都是用python写的，但是用docker安装zabbix默认没有python环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用root用户权限进入zabbix server容器中</span></span><br><span class="line">docker <span class="built_in">exec</span> -it --user root zabbix-server  /bin/bash</span><br><span class="line"><span class="comment">#下载依赖包</span></span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc* make -y</span><br><span class="line"><span class="comment">#下载python3的安装包</span></span><br><span class="line">yum install wget -y</span><br><span class="line">wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz</span><br><span class="line"><span class="comment">#解压安装包</span></span><br><span class="line">tar -Jxvf Python-3.5.2.tar.xz</span><br><span class="line"><span class="comment">#配置安装环境（切入解压目录下）</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.5.2</span><br><span class="line">./configure prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line"><span class="comment">#编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment">#配置软链接（如果有软连可省略）</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/bin/pip3</span><br><span class="line"><span class="comment">#添加默认软连</span></span><br><span class="line">ln -s /usr/bin/python3 /usr/bin/python</span><br><span class="line">ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure><h3 id="时间设置"><a href="#时间设置" class="headerlink" title="时间设置"></a>时间设置</h3><p>默认docker启动的zabbix-server用的是utc时间，那么在报警时的时间点就不准了。所以需要对时间进行设置。</p><p><strong>方法一</strong></p><p>把本机时区复制到宿主机即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /etc/localtime a9c27487faf4:/etc/localtime</span><br></pre></td></tr></table></figure><p>然后重启容器。</p><p><strong>方法二</strong></p><p>容器内修改时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;容器名&gt; /bin/bash</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai    /etc/localtime</span><br><span class="line">docker restart &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p>当然，你也可以在docker run创建容器时对localtime做映射，保证容器中和宿主机时间一致。</p><h3 id="绘制图形中文字符乱码"><a href="#绘制图形中文字符乱码" class="headerlink" title="绘制图形中文字符乱码"></a>绘制图形中文字符乱码</h3><p>需要安装中文字体来解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找字体文件，这里以下载文泉驿中文字体为例</span></span><br><span class="line">wget http://xze.197946.com/wenquanyiziti.zip</span><br><span class="line">unzip wenquanyiziti.zip</span><br><span class="line"><span class="comment">#将解压缩的字体拷贝到容器中</span></span><br><span class="line">docker cp ~/文泉驿点阵正黑.ttf zabbix-web:/usr/share/zabbix/assets/fonts/wqy.ttf</span><br><span class="line"><span class="comment">#进入容器返回的终端进行之后配置，我覆盖了默认字体文件</span></span><br><span class="line">docker <span class="built_in">exec</span> --user root -it zabbix-web bash</span><br><span class="line"><span class="built_in">cd</span> /usr/share/zabbix/assets/fonts/</span><br><span class="line">cp DejaVuSans.ttf DejaVuSans.ttf.bak</span><br><span class="line">mv wqy.ttf DejaVuSans.ttf</span><br></pre></td></tr></table></figure><p>到这来zabbix服务教程已完成。</p><h2 id="agent批量安装和自动注册"><a href="#agent批量安装和自动注册" class="headerlink" title="agent批量安装和自动注册"></a>agent批量安装和自动注册</h2><p>每台服务器上安装运行zabbix-agent，改好配置启动，然后要在服务端web页面逐个添加太麻烦。这里就用shell脚本批量安装zabbix-agent，然后自动去注册添加。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>这里以4.0  lst agent为例。<a href="https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/" rel="noopener" target="_blank">离线包官方下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">vernum=`cat /etc/redhat-release|sed -r <span class="string">'s/.* ([0-9]+)\..*/\1/'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#在线</span></span><br><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">yum install zabbix-sender zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="comment">#离线</span></span><br><span class="line">\cp -f zabbix-agent-4.0.9-3.el<span class="variable">$&#123;vernum&#125;</span>.x86_64.rpm /root/</span><br><span class="line">rpm -ivh /root/zabbix-agent-4.0.9-3.el<span class="variable">$&#123;vernum&#125;</span>.x86_64.rpm</span><br><span class="line"></span><br><span class="line">ipaddr=$(ifconfig eth0|grep -w inet|awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"></span><br><span class="line">sed -i.ori <span class="string">'s#Server=127.0.0.1#Server=xxxxxxxx#'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">sed -i.ori <span class="string">'s#ServerActive=127.0.0.1#ServerActive=xxxxxxxxxx#'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">sed -i.ori <span class="string">'s#Hostname=Zabbix server#Hostname='</span><span class="variable">$&#123;ipaddr&#125;</span><span class="string">'#'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">sed -i.ori <span class="string">'180a HostMetadataItem=system.uname'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">service zabbix-agent start</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$vernum</span> == 6 ];<span class="keyword">then</span></span><br><span class="line">        chkconfig --add zabbix-agent</span><br><span class="line">        chkconfig zabbix-agent on</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        systemctl <span class="built_in">enable</span>  zabbix-agent.service</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h3><p>添加自动注册规则</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a16acd4c/2.png" alt></p><p>注意：zabbix_server页面配置agent代理程序的接口地址为“172.17.0.1”。而zabbix_agentd.conf中server的地址也为server容器的内网地址，例如172.17.0.3。</p><h2 id="多机房zabbix-proxy创建"><a href="#多机房zabbix-proxy创建" class="headerlink" title="多机房zabbix  proxy创建"></a>多机房zabbix  proxy创建</h2><h3 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照上面步骤按照docker。</span></span><br><span class="line"><span class="comment"># 按照上面教程创建mysql和java gateway容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行zabbix proxy容器</span></span><br><span class="line">docker run --name zabbix-proxy -t \</span><br><span class="line">--link  sunmysql:mysql \</span><br><span class="line">--link zabbix-java-gateway:zabbix-java-gateway \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">"sunmysql"</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">"101.198.176.99"</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">"zabbix"</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">"zabbix123$%^"</span> \</span><br><span class="line">-e ZBX_HOSTNAME=<span class="string">"Beijing-zabbix-proxy"</span> \</span><br><span class="line">-e ZBX_TIMEOUT=30 \</span><br><span class="line">-e ZBX_CONFIGFREQUENCY=<span class="string">"300"</span> \</span><br><span class="line">-e ZBX_DATASENDERFREQUENCY=3 \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">-d zabbix/zabbix-proxy-mysql:centos-5.0-latest</span><br></pre></td></tr></table></figure><h3 id="页面操作-1"><a href="#页面操作-1" class="headerlink" title="页面操作"></a>页面操作</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a16acd4c/3.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a16acd4c/4.png" alt></p><h2 id="钉钉告警"><a href="#钉钉告警" class="headerlink" title="钉钉告警"></a>钉钉告警</h2><h3 id="脚本一：关键字"><a href="#脚本一：关键字" class="headerlink" title="脚本一：关键字"></a>脚本一：关键字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests,json,sys,os,datetime</span><br><span class="line">webhook=<span class="string">"https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx"</span></span><br><span class="line">user=sys.argv[<span class="number">1</span>]</span><br><span class="line">text=sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"text"</span>: &#123;</span><br><span class="line">        <span class="string">"content"</span>: text</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"at"</span>: &#123;</span><br><span class="line">        <span class="string">"atMobiles"</span>: [</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"isAtAll"</span>: <span class="literal">True</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;</span><br><span class="line">x=requests.post(url=webhook,data=json.dumps(data),headers=headers)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">"/tmp/dingding.log"</span>):</span><br><span class="line">    f=open(<span class="string">"/tmp/dingding.log"</span>,<span class="string">"a+"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    f=open(<span class="string">"/tmp/dingding.log"</span>,<span class="string">"w+"</span>)</span><br><span class="line">f.write(<span class="string">"\n"</span>+<span class="string">"--"</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x.json()[<span class="string">"errcode"</span>] == <span class="number">0</span>:</span><br><span class="line">    f.write(<span class="string">"\n"</span>+str(datetime.datetime.now())+<span class="string">"    "</span>+str(user)+<span class="string">"    "</span>+<span class="string">"发送成功"</span>+<span class="string">"\n"</span>+str(text))</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    f.write(<span class="string">"\n"</span>+str(datetime.datetime.now()) + <span class="string">"    "</span> + str(user) + <span class="string">"    "</span> + <span class="string">"发送失败"</span> + <span class="string">"\n"</span> + str(text))</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h3 id="脚本二：加签"><a href="#脚本二：加签" class="headerlink" title="脚本二：加签"></a>脚本二：加签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(url,data)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span><br><span class="line">        r = requests.post(url,data = json.dumps(data),headers=headers)</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(secret)</span>:</span></span><br><span class="line">        timestamp = long(round(time.time() * <span class="number">1000</span>))</span><br><span class="line">        secret = secret</span><br><span class="line">        secret_enc = bytes(secret).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        string_to_sign = <span class="string">'&#123;&#125;\n&#123;&#125;'</span>.format(timestamp, secret)</span><br><span class="line">        string_to_sign_enc = bytes(string_to_sign).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()</span><br><span class="line">        sign = urllib.quote_plus(base64.b64encode(hmac_code))</span><br><span class="line">        authlist=[timestamp,sign]</span><br><span class="line">        <span class="keyword">return</span> authlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> content = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"> data = &#123;</span><br><span class="line"> <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line"> <span class="string">"text"</span>: &#123;</span><br><span class="line">  <span class="string">"content"</span>: content</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"at"</span>:&#123;</span><br><span class="line">        <span class="string">"isAtAll"</span>: <span class="literal">True</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> authlist = auth(<span class="string">"SEC946d89502be22297135dca79f844e34d6b26c4e0e045a6a2e13a149a59ea430c"</span>)</span><br><span class="line"> url = <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxxx"</span>+<span class="string">"&amp;timestamp="</span>+str(authlist[<span class="number">0</span>])+<span class="string">"&amp;sign="</span>+authlist[<span class="number">1</span>]</span><br><span class="line"> print(send_msg(url,data))</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在操作系统上直接部署安装zabbix太麻烦了，最近在搞k8s，正好研究下用docker容器来安装zabbix5.0LTS长期支持版。&lt;/p&gt;
    
    </summary>
    
      <category term="监控技术" scheme="https://wandouduoduo.github.io/categories/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Zabbix" scheme="https://wandouduoduo.github.io/categories/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/Zabbix/"/>
    
    
      <category term="Docker" scheme="https://wandouduoduo.github.io/tags/Docker/"/>
    
      <category term="Zabbix" scheme="https://wandouduoduo.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>详解glusterfs模式调换</title>
    <link href="https://wandouduoduo.github.io/articles/895840ae.html"/>
    <id>https://wandouduoduo.github.io/articles/895840ae.html</id>
    <published>2020-09-28T07:11:41.000Z</published>
    <updated>2020-09-28T08:02:41.175Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><code>glusterfs</code>集群存储有七种模式，在搭建集群时选择的模式，可能在使用过一段时间后发现当前的模式不是最优的方案，换种模式可能会更好。那么怎么在保证数据安全的情况下，对<code>glusterfs</code>集群更改模式，以最优适配我们的使用，最大化资源利用呢？本文就这一痛点详细说明。</p><a id="more"></a><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p><strong>glusterfs集群</strong></p><p>搭建好的glusterfs集群，这里不再赘述。如有疑问，请参考<a href="https://wandouduoduo.github.io/articles/afd78e52.html">CentOS7安装GlusterFS集群教程</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/1.png" alt></p><p><strong>模式更改</strong></p><p>从复制模式改为扩展模式。搭建是可能是出于数据安全考虑，采用复制模式，但我们是作为日志存储来使用的，那么大的磁盘空间就是首要考虑的，所以采用扩展模式更好些。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/2.png" alt></p><h2 id="教程步骤"><a href="#教程步骤" class="headerlink" title="教程步骤"></a>教程步骤</h2><h3 id="移除brick"><a href="#移除brick" class="headerlink" title="移除brick"></a>移除brick</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">gluster volume remove-brick 卷名 brick所在的IP：brick所在的地址</span><br><span class="line"></span><br><span class="line">gluster volume remove-brick gsfs gs02:/opt/gluster/data gs03:/opt/gluster/data commit</span><br><span class="line"></span><br><span class="line">Removing brick(s) can result <span class="keyword">in</span> data loss. Do you want to Continue? (y/n) y</span><br><span class="line">volume remove-brick commit: failed: Removing bricks from replicate configuration is not allowed without reducing replica count explicitly.</span><br></pre></td></tr></table></figure><p>根据上面命令语法执行，但是失败了，根据提示需要先减少replica的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gluster volume remove-brick gsfs replica 1 gs02:/opt/gluster/data gs03:/opt/gluster/data force</span><br><span class="line"></span><br><span class="line">Removing brick(s) can result <span class="keyword">in</span> data loss. Do you want to Continue? (y/n) y</span><br><span class="line">volume remove-brick commit force: success</span><br></pre></td></tr></table></figure><p>执行上面的命令将复本数从3降到1。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/3.png" alt></p><h3 id="GlusterFS磁盘操作"><a href="#GlusterFS磁盘操作" class="headerlink" title="GlusterFS磁盘操作"></a>GlusterFS磁盘操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止磁盘</span></span><br><span class="line">gluster volume stop gsfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除磁盘</span></span><br><span class="line">gluster volume delete gsfs</span><br></pre></td></tr></table></figure><p>为什么要删除呢？删除了是否会影响数据安全行呢？</p><p>答案是：GlusterFS在选择模式创建的磁盘是虚拟磁盘，删除虚拟磁盘，实际磁盘上的数据并不会有影响。安全性和可靠性是没有问题的，数据全部存在实际磁盘上。而要删除的必要性是因为更改模式时，还要创建虚拟磁盘，如果不删除，就会报磁盘存在而创建不成功。</p><h3 id="更改扩展模式"><a href="#更改扩展模式" class="headerlink" title="更改扩展模式"></a>更改扩展模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create gsfs gs01:/opt/gluster/data gs02:/opt/gluster/data gs03:/opt/gluster/data force</span><br><span class="line"></span><br><span class="line">volume create: gsfs: success: please start the volume to access data</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/4.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 磁盘启动</span><br><span class="line">gluster volume start gsfs</span><br><span class="line"># 重新挂载</span><br><span class="line">mount -t glusterfs gs01:gsfs /mnt</span><br><span class="line"># 查看</span><br><span class="line">df -h</span><br><span class="line"># 检查挂载盘</span><br><span class="line">ls -lrt /mnt/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/E:%5CBlog%5Csunhexo%5Csource_posts%5C%E8%AF%A6%E8%A7%A3glusterfs%E6%A8%A1%E5%BC%8F%E8%B0%83%E6%8D%A2%5C5.png" alt></p><p>模式已经更改为扩展模式了。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/895840ae/6.png" alt></p><p>可以看到挂载后的磁盘包含了原复制模式下的3份文件，而且都是相同的。这是因为实际文件是存在磁盘上，而集群的虚拟磁盘把他们汇总了。只需要把其他两个节点上数据删除，就只保留一份文件了。以后的文件会平衡分配到集群节点，也可以执行磁盘平衡命令手动平衡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume models lay-outstart</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上面教程，复制模式就变为了扩展模式。这两种模式日常用的最多。其他的模式，大家可以根据上面思路，自行测试。要摘除节点需要先移除brick，要移除brick需先减少复制文本的份数。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;glusterfs&lt;/code&gt;集群存储有七种模式，在搭建集群时选择的模式，可能在使用过一段时间后发现当前的模式不是最优的方案，换种模式可能会更好。那么怎么在保证数据安全的情况下，对&lt;code&gt;glusterfs&lt;/code&gt;集群更改模式，以最优适配我们的使用，最大化资源利用呢？本文就这一痛点详细说明。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="GlusterFS" scheme="https://wandouduoduo.github.io/tags/GlusterFS/"/>
    
  </entry>
  
  <entry>
    <title>Centos7文件共享服务Samba的部署</title>
    <link href="https://wandouduoduo.github.io/articles/bf19f399.html"/>
    <id>https://wandouduoduo.github.io/articles/bf19f399.html</id>
    <published>2020-09-15T11:15:38.000Z</published>
    <updated>2020-09-15T11:27:52.578Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>搭建Samba服务器是为了实现Linux共享目录之后，在Windows可以直接访问该共享目录。</p><a id="more"></a><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="关闭selinux服务"><a href="#关闭selinux服务" class="headerlink" title="关闭selinux服务"></a><strong>关闭selinux服务</strong></h3><p><em>该服务不关闭会导致Windows没有访问权限</em></p><h4 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a><strong>临时关闭</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0（只对当前有效，重启后，该服务又会重新启动。）</span><br></pre></td></tr></table></figure><h4 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a><strong>永久关闭</strong></h4><p>打开selinux的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure><p>将SELINUX=enforcing修改为SELINUX=disabled</p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#关闭防火墙开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="查看是已安装samba包"><a href="#查看是已安装samba包" class="headerlink" title="查看是已安装samba包"></a>查看是已安装samba包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep samba</span><br><span class="line">------------------------------------</span><br><span class="line">samba-common-4.8.3-4.el7.noarch</span><br><span class="line">samba-client-libs-4.8.3-4.el7.x86_64</span><br><span class="line">samba-client-4.8.3-4.el7.x86_64</span><br><span class="line">samba-common-libs-4.8.3-4.el7.x86_64</span><br><span class="line">------------------------------------</span><br></pre></td></tr></table></figure><p>这里列出所有已安装的samba包，但是现在samba服务还未安装。</p><h3 id="安装Samba服务"><a href="#安装Samba服务" class="headerlink" title="安装Samba服务"></a><strong>安装Samba服务</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y samba</span><br></pre></td></tr></table></figure><p>使用yum安装是因为安装时会自动检测需要的依赖并安装。</p><h3 id="Samba配置"><a href="#Samba配置" class="headerlink" title="Samba配置"></a>Samba配置</h3><p>至此，我们已经将Samba安装完毕，现在进行Samba的配置。</p><h4 id="创建共享目录"><a href="#创建共享目录" class="headerlink" title="创建共享目录"></a><strong>创建共享目录</strong></h4><p>在home目录新建共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/share</span><br></pre></td></tr></table></figure><p>赋予目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /home/share</span><br></pre></td></tr></table></figure><h4 id="添加samba服务器用户"><a href="#添加samba服务器用户" class="headerlink" title="添加samba服务器用户"></a>添加samba服务器用户</h4><p>首先创建一个普通用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser sun</span><br><span class="line">passwd sun</span><br></pre></td></tr></table></figure><p>将该用户添加到samba服务列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd –a sun</span><br><span class="line">------------------------</span><br><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line">Added user fenxiang.</span><br><span class="line">------------------------</span><br><span class="line">出现Added user *表示添加成功</span><br></pre></td></tr></table></figure><h4 id="修改Samba配置文件"><a href="#修改Samba配置文件" class="headerlink" title="修改Samba配置文件"></a>修改Samba配置文件</h4><p>首先备份Samba配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br></pre></td></tr></table></figure><p>打开配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line">做如下修改：</span><br><span class="line">security = user</span><br><span class="line"><span class="comment">#这里是设置samba的共享级别，share表示共享级访问，服务器不对客户机进行身份认证，user表示用户级访问，被访问的samba服务器要对客户机进行身份验证</span></span><br></pre></td></tr></table></figure><p>在配置文件最后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">comment = my share</span><br><span class="line"><span class="comment">#对该共享资源的说明</span></span><br><span class="line">path = /home/share</span><br><span class="line"><span class="comment">#共享资源的路径</span></span><br><span class="line">valid user = sun</span><br><span class="line"><span class="comment">#设置允许访问共享的用户或组的列表</span></span><br><span class="line">writable = yes</span><br><span class="line"><span class="comment">#指定共享的路径是否可写</span></span><br><span class="line">browseable = yes</span><br><span class="line"><span class="comment">#是否可以浏览共享目录</span></span><br><span class="line">create mode = 0777</span><br><span class="line"><span class="comment">#指定客户机在共享目录中创建文件的默认权限</span></span><br><span class="line">directory mode = 0777</span><br><span class="line"><span class="comment">#指定客户机共享目录中创建文件目录的默认权限</span></span><br></pre></td></tr></table></figure><p>保存退出</p><h4 id="启动samba服务"><a href="#启动samba服务" class="headerlink" title="启动samba服务"></a><strong>启动samba服务</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启服务</span></span><br><span class="line">systemctl start smb </span><br><span class="line">systemctl start nmb</span><br><span class="line"><span class="comment">#将服务加入到开机启动中</span></span><br><span class="line">systemctl <span class="built_in">enable</span> smb</span><br><span class="line">systemctl <span class="built_in">enable</span> nmb</span><br></pre></td></tr></table></figure><h4 id="Windows访问"><a href="#Windows访问" class="headerlink" title="Windows访问"></a><strong>Windows访问</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bf19f399/1.png" alt></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建Samba服务器是为了实现Linux共享目录之后，在Windows可以直接访问该共享目录。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务部署" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Samba" scheme="https://wandouduoduo.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>openssl版本升级</title>
    <link href="https://wandouduoduo.github.io/articles/41a25a14.html"/>
    <id>https://wandouduoduo.github.io/articles/41a25a14.html</id>
    <published>2020-09-14T02:58:59.000Z</published>
    <updated>2020-09-14T03:10:37.826Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><strong>OpenSSL</strong>是一个<a href="https://baike.baidu.com/item/开放源代码" rel="noopener" target="_blank">开放源代码</a>的<a href="https://baike.baidu.com/item/软件" rel="noopener" target="_blank">软件</a><a href="https://baike.baidu.com/item/库" rel="noopener" target="_blank">库</a>包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。这个包广泛被应用在互联网的网页服务器上。</p><a id="more"></a><h2 id="升级教程"><a href="#升级教程" class="headerlink" title="升级教程"></a>升级教程</h2><h3 id="查看openssl版本"><a href="#查看openssl版本" class="headerlink" title="查看openssl版本"></a>查看openssl版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line">OpenSSL 1.0.1e-fips 11 Feb 2013</span><br></pre></td></tr></table></figure><h3 id="下载指定版本的openssl软件"><a href="#下载指定版本的openssl软件" class="headerlink" title="下载指定版本的openssl软件"></a>下载指定版本的openssl软件</h3><p>在<a href="https://www.openssl.org/source/" rel="noopener" target="_blank">官网</a>下载最新长期支持版本，教程文档编写时，最新长期支持版本为1.1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1g.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xf openssl-1.1.1g.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.1.1g</span><br><span class="line">./config shared zlib</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class="line">mv /usr/include/openssl /usr/include/openssl.bak</span><br><span class="line">find / -name openssl</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/include/openssl /usr/include/openssl</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/lib64/"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig </span><br><span class="line">openssl version -a</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl version </span><br><span class="line"></span><br><span class="line">OpenSSL 1.1.1g  14 Sep 2020</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;OpenSSL&lt;/strong&gt;是一个&lt;a href=&quot;https://baike.baidu.com/item/开放源代码&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;开放源代码&lt;/a&gt;的&lt;a href=&quot;https://baike.baidu.com/item/软件&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;软件&lt;/a&gt;&lt;a href=&quot;https://baike.baidu.com/item/库&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;库&lt;/a&gt;包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。这个包广泛被应用在互联网的网页服务器上。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Openssl" scheme="https://wandouduoduo.github.io/tags/Openssl/"/>
    
  </entry>
  
  <entry>
    <title>用cat3.0集群构建实时监控系统</title>
    <link href="https://wandouduoduo.github.io/articles/77f415e1.html"/>
    <id>https://wandouduoduo.github.io/articles/77f415e1.html</id>
    <published>2020-08-27T09:47:21.000Z</published>
    <updated>2020-09-14T03:33:17.910Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>在日常工作中常常遇到很多问题，出现问题不可怕，可怕的是不知道问题出在哪里。当出现问题时，我们如无头苍蝇，无所适从，不知所措。这是因为我们的眼睛还不够犀利，没有洞察本质。常常会有疑问：服务的依赖关系是怎样的？当前线上各个服务的实时状态又是如何呢？访问卡顿是在哪个环节导致的呢？如何快速定位问题，并快速排除，恢复服务呢？如何去擦亮我们的眼睛，让服务可靠性达到5个9甚至6个9，7个9呢？</p><p>面对这些问题，我们找到了大众点评的Cat，有了Cat这些问题都可以迎刃而解！接下来我们将介绍Cat的简单使用。</p><a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dianping/cat" rel="noopener" target="_blank">官网</a></p><p><a href="https://github.com/dianping/cat/wiki/readme_server" rel="noopener" target="_blank">官方文档</a></p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Linux 2.6以及之上（2.6内核才可以支持epoll），线上服务端部署请使用Linux环境，Mac以及Windows环境可以作为开发环境，美团点评内部CentOS 6.5</li><li>Java 6，7，8，服务端推荐使用jdk7的版本，客户端jdk6、7、8都支持</li><li>Maven 3及以上</li><li>MySQL 5.6，5.7，更高版本MySQL都不建议使用，不清楚兼容性</li><li>J2EE容器建议使用tomcat，建议使用推荐版本7.<em>.</em>或8.0.*</li><li>Hadoop环境可选，一般建议规模较小的公司直接使用磁盘模式，可以申请CAT服务端，500GB磁盘或者更大磁盘，这个磁盘挂载在/data/目录上</li></ul><h2 id="CAT组件"><a href="#CAT组件" class="headerlink" title="CAT组件"></a>CAT组件</h2><p>CAT主要由以下组件组成：</p><ul><li><strong>cat-home</strong>: 服务端组件，负责收集监控信息，分析处理生成报告、执行告警</li><li><strong>cat-client</strong>: 客户端组件，负责与服务端进行连接通信，</li><li><strong>cat-core</strong>: 核心处理组件，负责具体的与客户端通信服务，解析数据、输出报告</li><li><strong>cat-consumer</strong> : 消费处理组件，负责实际的监控数据分析，处理工作</li><li><strong>cat-hadoop</strong> : HDFS存储组件</li></ul><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h3><ol><li>初始化Mysql数据库，<code>一套CAT集群需要部署一个数据库</code>，数据库脚本script/CatApplication.sql</li><li>准备若干台CAT服务器用于搭建集群，假设目前有IP为10.1.1.1，10.1.1.2，10.1.1.3的三台服务器，以下部署方式会以这些IP为例</li><li>初始化/data/目录，配置几个配置文件/data/appdatas/cat/*.xml 几个配置文件，具体下面有详细说明</li><li><code>打包并重命名为cat.war</code>，放入tomcat容器webapps根目录下，并启动tomcat</li><li>修改服务器配置、及路由配置，重启tomcat</li></ol><h3 id="步骤1：-部署tomcat"><a href="#步骤1：-部署tomcat" class="headerlink" title="步骤1： 部署tomcat"></a><strong>步骤1：</strong> 部署tomcat</h3><ul><li><p>调整启动参数，修改catalina.sh文件，建议在tomcat的bin下新建setenv.sh然后添加环境变量【服务端】</p><ol><li>需要每台CAT集群10.1.1.1，10.1.1.2，10.1.1.3都进行部署</li><li>建议使用Cms Gc策略</li><li>建议cat的使用堆大小至少10G以上，开发环境启动2G堆启动即可</li><li>不希望使用软连接的同学，可以定义CAT_HOME为自定义目录。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CAT_HOME=/data/appdatas/cat/</span><br><span class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$CATALINA_OPTS</span> -server -DCAT_HOME=<span class="variable">$CAT_HOME</span> -Djava.awt.headless=true -Xms25G -Xmx25G -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=10144m -XX:MaxNewSize=10144m -XX:SurvivorRatio=10 -XX:+UseParNewGC -XX:ParallelGCThreads=4 -XX:MaxTenuringThreshold=13 -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:+UseCMSInitiatingOccupancyOnly -XX:+ScavengeBeforeFullGC -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:CMSFullGCsBeforeCompaction=9 -XX:CMSInitiatingOccupancyFraction=60 -XX:+CMSClassUnloadingEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:-ReduceInitialCardMarks -XX:+CMSPermGenSweepingEnabled -XX:CMSInitiatingPermOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrent -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.EPollSelectorProvider -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCApplicationConcurrentTime -XX:+PrintHeapAtGC -Xloggc:/data/applogs/heap_trace.txt -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/applogs/HeapDumpOnOutOfMemoryError -Djava.util.Arrays.useLegacyMergeSort=true"</span></span><br></pre></td></tr></table></figure></li><li><p>修改中文乱码 tomcat conf 目录下 server.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">           URIEncoding=<span class="string">"utf-8"</span>    connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;  &lt;!-- 增加  URIEncoding=<span class="string">"utf-8"</span>  --&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="步骤2：-程序对于-data-目录具体读写权限（重要）"><a href="#步骤2：-程序对于-data-目录具体读写权限（重要）" class="headerlink" title="步骤2： 程序对于/data/目录具体读写权限（重要）"></a><strong>步骤2：</strong> 程序对于/data/目录具体读写权限（重要）</h3><ol><li><p>要求/data/目录能进行读写操作，如果/data/目录不能写，建议使用linux的软链接链接到一个固定可写的目录。所有的客户端集成程序的机器以及CAT服务端机器都需要进行这个权限初始化。（可以通过公司运维工具统一处理）</p></li><li><p>此目录会存一些CAT必要的配置文件以及运行时候的数据存储目录。</p></li><li><p>CAT支持CAT_HOME环境变量，可以通过JVM参数修改默认的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">chmod -R 777 /data/</span><br></pre></td></tr></table></figure></li></ol><h3 id="步骤3：-创建客户端配置文件"><a href="#步骤3：-创建客户端配置文件" class="headerlink" title="步骤3： 创建客户端配置文件"></a><strong>步骤3：</strong> 创建客户端配置文件</h3><p>​    $CAT_HOME/client.xml这里为/data/appdatas/cat/client.xml </p><ul><li><p>说明</p><ol><li>此配置文件的作用是所有的客户端都需要一个地址指向CAT的服务端</li><li>此文件可以通过运维统一进行部署和维护，比如使用puppet等运维工具</li><li>不同环境这份文件不一样，比如区分prod环境以及test环境，在美团点评内部一共是2套环境的CAT，一份是生产环境，一份是测试环境</li><li>注意：当路由错误，且该文件夹下存在client_cache.xml，请删除client_cache.xml，再重启服务</li></ol></li><li><p>集群配置</p><p>以10.1.1.1，10.1.1.2，10.1.1.3三台CAT服务器为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span> <span class="attr">mode</span>=<span class="string">"client"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span> <span class="attr">ip</span>=<span class="string">"10.1.1.1"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">http-port</span>=<span class="string">"8080"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span> <span class="attr">ip</span>=<span class="string">"10.1.1.2"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">http-port</span>=<span class="string">"8080"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span> <span class="attr">ip</span>=<span class="string">"10.1.1.3"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">http-port</span>=<span class="string">"8080"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>2280是默认的CAT服务端接受数据的端口，不允许修改，http-port是Tomcat启动的端口，默认是8080，建议使用默认端口</code></p></blockquote></li></ul><h3 id="步骤4：-安装CAT的数据库"><a href="#步骤4：-安装CAT的数据库" class="headerlink" title="步骤4： 安装CAT的数据库"></a><strong>步骤4：</strong> 安装CAT的数据库</h3><ul><li><p>数据库的脚本文件 script/CatApplication.sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -Dcat &lt; CatApplication.sql</span><br></pre></td></tr></table></figure></li><li><p>MySQL的一个系统参数：<code>max_allowed_packet</code>，其默认值为1048576(1M)，修改为1000M，修改完需要重启mysql</p></li><li><p>说明：</p><ol><li>注意1：<code>一套独立的CAT集群只需要一个数据库</code>（之前碰到过个别同学在每台cat的服务端节点都安装了一个数据库）</li><li>注意2：<code>数据库编码使用utf8mb4，否则可能造成中文乱码等问题</code></li></ol></li></ul><h3 id="步骤5：-配置数据源"><a href="#步骤5：-配置数据源" class="headerlink" title="步骤5： 配置数据源"></a><strong>步骤5：</strong> 配置数据源</h3><p><code>$CAT_HOME/datasources.xml</code>,这里是<code>/data/appdatas/cat/datasources.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">data-sources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data-source</span> <span class="attr">id</span>=<span class="string">"cat"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maximum-pool-size</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maximum-pool-size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connection-timeout</span>&gt;</span>1s<span class="tag">&lt;/<span class="name">connection-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">idle-timeout</span>&gt;</span>10m<span class="tag">&lt;/<span class="name">idle-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">statement-cache-size</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">statement-cache-size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>&lt;![CDATA[jdbc:mysql://127.0.0.1:3306/cat]]&gt;<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="comment">&lt;!-- 请替换为真实数据库URL及Port  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span>  <span class="comment">&lt;!-- 请替换为真实数据库用户名  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  <span class="comment">&lt;!-- 请替换为真实数据库密码  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connectionProperties</span>&gt;</span>&lt;![CDATA[useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;socketTimeout=120000]]&gt;<span class="tag">&lt;/<span class="name">connectionProperties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data-source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data-sources</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>说明<ol><li>此xml仅仅为模板，请根据自己实际的情况<code>替换jdbc.url,jdbc.user,jdbc.password的实际值</code>。</li><li><code>集群模式每台CAT集群10.1.1.1，10.1.1.2，10.1.1.3都需要部署此文件</code></li></ol></li></ul><h3 id="步骤6：-war打包"><a href="#步骤6：-war打包" class="headerlink" title="步骤6： war打包"></a><strong>步骤6：</strong> war打包</h3><ul><li><p>源码构建</p><ol><li>在cat的源码目录，执行<code>mvn clean install -DskipTests</code></li><li>如果发现cat的war打包不通过，CAT所需要依赖jar都部署在 <a href="http://unidal.org/nexus/" rel="noopener" target="_blank">http://unidal.org/nexus/</a></li><li>可以配置这个公有云的仓库地址到本地Maven配置（一般为~/.m2/settings.xml)，理论上不需要配置即可，可以参考cat的pom.xml配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven2 Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>unidal.releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://unidal.org/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>官方下载</p><ol><li><p>如果自行打包仍然问题，请使用下面链接进行下载：</p><p><a href="http://unidal.org/nexus/service/local/repositories/releases/content/com/dianping/cat/cat-home/3.0.0/cat-home-3.0.0.war" rel="noopener" target="_blank">http://unidal.org/nexus/service/local/repositories/releases/content/com/dianping/cat/cat-home/3.0.0/cat-home-3.0.0.war</a></p></li><li><p>官方的cat的master版本，<code>重命名为cat.war进行部署，注意此war是用jdk8，服务端请使用jdk8版本</code></p></li></ol></li></ul><h3 id="步骤7：-war部署"><a href="#步骤7：-war部署" class="headerlink" title="步骤7： war部署"></a><strong>步骤7：</strong> war部署</h3><ol><li>将步骤6的war包部署到本机tomcat的webapps下，启动tomcat。</li><li>Cat服务需要部署在tomcat下的/cat路径下，方式请自行搜索“tomcat contextPath配置”</li><li>打开控制台的URL，<a href="http://10.1.1.1:8080/cat/s/config?op=routerConfigUpdate" rel="noopener" target="_blank">http://10.1.1.1:8080/cat/s/config?op=routerConfigUpdate</a></li><li>默认用户名：admin 默认密码：admin。CAT本身无登录和权限校验功能，请按需定制</li><li>更新配置示例如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-config</span> <span class="attr">backup-server</span>=<span class="string">"10.1.1.1"</span> <span class="attr">backup-server-port</span>=<span class="string">"2280"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">default-server</span> <span class="attr">id</span>=<span class="string">"10.1.1.1"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">enable</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">default-server</span> <span class="attr">id</span>=<span class="string">"10.1.1.2"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">enable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">default-server</span> <span class="attr">id</span>=<span class="string">"10.1.1.3"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">enable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">network-policy</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">title</span>=<span class="string">"default"</span> <span class="attr">block</span>=<span class="string">"false"</span> <span class="attr">server-group</span>=<span class="string">"default_group"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">network-policy</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server-group</span> <span class="attr">id</span>=<span class="string">"default_group"</span> <span class="attr">title</span>=<span class="string">"default-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group-server</span> <span class="attr">id</span>=<span class="string">"10.1.1.2"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group-server</span> <span class="attr">id</span>=<span class="string">"10.1.1.3"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server-group</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">domain</span> <span class="attr">id</span>=<span class="string">"cat"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">group</span> <span class="attr">id</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">server</span> <span class="attr">id</span>=<span class="string">"10.1.1.2"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">server</span> <span class="attr">id</span>=<span class="string">"10.1.1.3"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-config</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>重启10.1.1.1的机器的tomcat</li><li>将cat.war部署到10.1.1.2，10.1.1.3这两台机器中，启动tomcat</li></ol><p>说明：</p><ol><li>注意10.1.1.1，10.1.1.2，10.1.1.3这几个IP需要<code>替换为自己实际的IP</code>，修改路由配置仅仅需要修改一次即可，这部分数据会存入mysql中。</li><li><code>enable=false表示机器不可用，10.1.1.1机器不做为消费机集群。所有客户端上报的消息都由于10.1.1.2，10.1.1.3来处理</code>。</li><li>更多服务端机器按需添加Xml配置即可。</li></ol><h3 id="步骤8：-服务端配置"><a href="#步骤8：-服务端配置" class="headerlink" title="步骤8： 服务端配置"></a><strong>步骤8：</strong> 服务端配置</h3><p>配置链接：http://{ip:port}/cat/s/config?op=serverConfigUpdate</p><p>说明：这个只需要更新一次，配置是保存在mysql的数据库里面。</p><ul><li><p>CAT节点职责</p><ol><li>控制台 - 提供给业务人员进行数据查看【默认所有的cat节点都可以作为控制台，不可配置】</li><li>消费机 - 实时接收业务数据，实时处理，提供实时分析报表【默认所有的cat节点都可以作为消费机，不可配置】</li><li>告警端 - 启动告警线程，进行规则匹配，发送告警（目前仅支持单点部署）【可以配置】</li><li>任务机 - 做一些离线的任务，合并天、周、月等报表 【可以配置】</li></ol></li><li><p>集群配置</p><p>线上做多集群部署，假设有10.1.1.1，10.1.1.2，10.1.1.3这三台机器</p><ol><li>建议选取一台或多台机器负责角色有控制台、告警端、任务机，例如10.1.1.1。配置域名访问CAT，该域名关联至10.1.1.1</li><li>10.1.1.2，10.1.1.3 负责消费机处理，这样能做到有效隔离，任务机、告警等问题不影响实时数据处理</li><li>remote-servers 这个一定要配置正确，端口号为8080，这里面的remote-servers为10.1.1.1:8080,10.1.1.2:8080,10.1.1.3:8080</li><li>完成以上步骤，重启下当前CAT节点</li></ol><p>配置的sample如下： id=”default”是默认的配置信息，server id=”10.1.1.1” 如下的配置是表示10.1.1.1这台服务器的节点配置覆盖default的配置信息，比如下面的job-machine，alarm-machine，send-machine为true。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span> <span class="attr">id</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"local-mode"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"job-machine"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"send-machine"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alarm-machine"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hdfs-enabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"remote-servers"</span> <span class="attr">value</span>=<span class="string">"10.1.1.1:8080,10.1.1.2:8080,10.1.1.3:8080"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">storage</span>  <span class="attr">local-base-dir</span>=<span class="string">"/data/appdatas/cat/bucket/"</span> <span class="attr">max-hdfs-storage-time</span>=<span class="string">"15"</span> <span class="attr">local-report-storage-time</span>=<span class="string">"7"</span> <span class="attr">local-logivew-storage-time</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hdfs</span> <span class="attr">id</span>=<span class="string">"logview"</span> <span class="attr">max-size</span>=<span class="string">"128M"</span> <span class="attr">server-uri</span>=<span class="string">"hdfs://10.1.77.86/"</span> <span class="attr">base-dir</span>=<span class="string">"user/cat/logview"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hdfs</span> <span class="attr">id</span>=<span class="string">"dump"</span> <span class="attr">max-size</span>=<span class="string">"128M"</span> <span class="attr">server-uri</span>=<span class="string">"hdfs://10.1.77.86/"</span> <span class="attr">base-dir</span>=<span class="string">"user/cat/dump"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hdfs</span> <span class="attr">id</span>=<span class="string">"remote"</span> <span class="attr">max-size</span>=<span class="string">"128M"</span> <span class="attr">server-uri</span>=<span class="string">"hdfs://10.1.77.86/"</span> <span class="attr">base-dir</span>=<span class="string">"user/cat/remote"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">storage</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">consumer</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">long-config</span> <span class="attr">default-url-threshold</span>=<span class="string">"1000"</span> <span class="attr">default-sql-threshold</span>=<span class="string">"100"</span> <span class="attr">default-service-threshold</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">url-threshold</span>=<span class="string">"500"</span> <span class="attr">sql-threshold</span>=<span class="string">"500"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">domain</span> <span class="attr">name</span>=<span class="string">"OpenPlatformWeb"</span> <span class="attr">url-threshold</span>=<span class="string">"100"</span> <span class="attr">sql-threshold</span>=<span class="string">"500"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">long-config</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">consumer</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span> <span class="attr">id</span>=<span class="string">"10.1.1.1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"job-machine"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alarm-machine"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"send-machine"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置说明：</p></li></ul><p><strong>请注意：当一个机器角色更改后，请重启该机器！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server模型：代表一台机器的配置。如果id为default，代表默认配置；如果id为ip，代表该台服务器的配置</span><br><span class="line"></span><br><span class="line">  * property local-mode : 定义服务是否为本地模式（开发模式），在生产环境时，设置为false,启动远程监听模式。默认为 false;</span><br><span class="line">  * property hdfs-machine : 定义是否启用HDFS存储方式，默认为 false；</span><br><span class="line">  * property job-machine : 定义当前服务是否为报告工作机（开启生成汇总报告和统计报告的任务，只需要一台服务机开启此功能），默认为 false；</span><br><span class="line">  * property alarm-machine : 定义当前服务是否为报警机（开启各类报警监听，只需要一台服务机开启此功能），默认为 false；</span><br><span class="line">  * property send-machine : 定义当前服务告警是否发送（当时为了解决测试环境开启告警线程，但是最后告警不通知，此配置后续会逐步去除，建议alarm-machine开启为true的时候，这个同步为true）</span><br><span class="line">  </span><br><span class="line">storage模型: 定义数据存储配置信息</span><br><span class="line"></span><br><span class="line">  * property local-report-storage-time : 定义本地报告存放时长，单位为（天）</span><br><span class="line">  * property local-logivew-storage-time : 定义本地日志存放时长，单位为（天）</span><br><span class="line">  * property local-base-dir : 定义本地数据存储目录，此目录为上传到HDFS时所查找的源文件路径</span><br><span class="line">  * property hdfs : 定义HDFS配置信息，便于直接登录系统</span><br><span class="line">  * property server-uri : 定义HDFS服务地址，支持配置Nameservice</span><br><span class="line">  * property console : 定义服务控制台信息</span><br><span class="line">  * property remote-servers : 定义HTTP服务列表，（远程监听端同步更新服务端信息即取此值）</span><br><span class="line">  * ldap : 定义LDAP配置信息（这个可以忽略）</span><br><span class="line">  * ldapUrl : 定义LDAP服务地址（这个可以忽略）</span><br></pre></td></tr></table></figure><h3 id="步骤9：-重启不影响数据可用性"><a href="#步骤9：-重启不影响数据可用性" class="headerlink" title="步骤9： 重启不影响数据可用性"></a><strong>步骤9：</strong> 重启不影响数据可用性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单机模式部署可略过此步骤，线上环境使用建议配置。</span><br></pre></td></tr></table></figure><ol><li>请在tomcat重启之前调用当前tomcat的存储数据的链接 http://${ip}:8080/cat/r/home?op=checkpoint，重启之后数据会恢复。【注意重启时间在每小时的整点10-55分钟之间】</li><li>线上部署时候，建议把此链接调用存放于tomcat的stop脚本中，这样不需要每次手工调用</li></ol><h3 id="步骤10：-本地开发环境运行CAT"><a href="#步骤10：-本地开发环境运行CAT" class="headerlink" title="步骤10： 本地开发环境运行CAT"></a><strong>步骤10：</strong> 本地开发环境运行CAT</h3><ol><li>请参照上述步骤，进行如下配置：</li></ol><ul><li>配置/data/appdatas/cat/client.xml文件</li><li>配置/data/appdatas/cat/datasources.xml文件</li><li>服务器配置 http://{ip:port}/cat/s/config?op=serverConfigUpdate （注意本地节点的角色，job-machine&amp;alarm-machine都可以配置为true，以便于debug）</li></ul><ol><li>根据ide的类型，在cat目录中执行 mvn eclipse:eclipse 或者 mvn idea:idea，此步骤会生成一些代码文件，直接导入到工程会发现找不到类</li><li>如果ide是eclipse，将源码以普通项目到入eclipse中，注意不要以maven项目导入工程</li><li>启动方式：</li></ol><ul><li>Intellij IDEA 推荐使用tomcat插件启动cat-home模块，application context设置为/cat。</li><li>Tomcat启动：打成war包，将war包部署在Tomcat后，启动Tomcat</li><li>test case启动：运行com.dianping.cat.TestServer 这个类，即可启动cat服务器；注意：执行的是startWebApp()这个test case</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常工作中常常遇到很多问题，出现问题不可怕，可怕的是不知道问题出在哪里。当出现问题时，我们如无头苍蝇，无所适从，不知所措。这是因为我们的眼睛还不够犀利，没有洞察本质。常常会有疑问：服务的依赖关系是怎样的？当前线上各个服务的实时状态又是如何呢？访问卡顿是在哪个环节导致的呢？如何快速定位问题，并快速排除，恢复服务呢？如何去擦亮我们的眼睛，让服务可靠性达到5个9甚至6个9，7个9呢？&lt;/p&gt;
&lt;p&gt;面对这些问题，我们找到了大众点评的Cat，有了Cat这些问题都可以迎刃而解！接下来我们将介绍Cat的简单使用。&lt;/p&gt;
    
    </summary>
    
      <category term="监控技术" scheme="https://wandouduoduo.github.io/categories/%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cat" scheme="https://wandouduoduo.github.io/tags/Cat/"/>
    
  </entry>
  
</feed>
