<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维随笔</title>
  
  <subtitle>SRE &amp; Devops &amp; Architect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wandouduoduo.github.io/"/>
  <updated>2023-03-16T08:43:09.311Z</updated>
  <id>https://wandouduoduo.github.io/</id>
  
  <author>
    <name>豌豆多多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yum安装Nginx增添第三方模块教程</title>
    <link href="https://wandouduoduo.github.io/articles/2625c898.html"/>
    <id>https://wandouduoduo.github.io/articles/2625c898.html</id>
    <published>2023-03-16T03:37:19.000Z</published>
    <updated>2023-03-16T08:43:09.311Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>nginx作为世界上使用最广的web服务，因其可以自由添加不同功能模块来对业务的支持，几乎所有的互联网大厂都在使用。现在有个业务场景需要nginx支持ipv6，但是nginx是用yum直接安装的，那要怎样去增添对第三方模块的支持，而且对原有yum安装的nginx平滑过渡几乎无感呢？本文以nginx增添ipv6模块为例，详细给大家介绍一下yum安装nginx后增添第三方模块的过程步骤，按步操作，其他模块大同小异。</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>这里Centos7下yum已经安装的nginx，先来简单介绍下方法：我们无论原始nginx怎么安装的，为了平滑无感影响最小，增添第三方模块就需要源码重新再次编译nginx，只是再次编译时要添加所需的模块参数。例如：添加支持tcp 4层转发，要添加–with-stream参数。本文以支持ipv6，添加参数：<strong>–with-ipv6</strong>为例。编译通过后，只需把编译生成的二进制文件nginx进行替换即可。</p><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="查看nginx版本"><a href="#查看nginx版本" class="headerlink" title="查看nginx版本"></a>查看nginx版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2625c898/1.png" alt></p><h3 id="下载Nginx源码"><a href="#下载Nginx源码" class="headerlink" title="下载Nginx源码"></a>下载Nginx源码</h3><p>在<a href="https://nginx.org" rel="noopener" target="_blank">官网</a>下载合适的版本，建议选择稳定版本。根据当前版本，选择合适版本。这里选择的版本是nginx-1.20.2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.20.2.tar.gz </span><br><span class="line">tar zxf nginx-1.20.2.tar.gz </span><br><span class="line"><span class="built_in">cd</span> nginx-1.20.2</span><br></pre></td></tr></table></figure><h3 id="备份原Nginx文件"><a href="#备份原Nginx文件" class="headerlink" title="备份原Nginx文件"></a>备份原Nginx文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/sbin/nginx /usr/sbin/nginx.bak</span><br></pre></td></tr></table></figure><h3 id="重新编译Nginx"><a href="#重新编译Nginx" class="headerlink" title="重新编译Nginx"></a>重新编译Nginx</h3><p>根据第1步查到已有的模块，加上本次需新增的模块参数: <strong>–with-ipv6</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-compat --with-debug --with-file-aio --with-google_perftools_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module --with-http_perl_module=dynamic --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-stream_ssl_preread_module --with-threads --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E'</span> --with-ipv6</span><br></pre></td></tr></table></figure><p>编译过程可能报错，报错是因为缺少依赖，一般需要安装以下模块，安装完再次编译即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libxml2 libxml2-dev libxslt-devel </span><br><span class="line">yum -y install gd-devel </span><br><span class="line">yum -y install perl-devel perl-ExtUtils-Embed </span><br><span class="line">yum -y install GeoIP GeoIP-devel GeoIP-data</span><br><span class="line">yum -y install pcre-devel</span><br><span class="line">yum -y install openssl openssl-devel gperftools</span><br></pre></td></tr></table></figure><h3 id="编译通过"><a href="#编译通过" class="headerlink" title="编译通过"></a>编译通过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2625c898/3.png" alt></p><p><strong>注意：</strong>make完成后不要继续输入“make install”，以免现在的nginx出现问题<br>以上完成后，会在objs目录下生成一个nginx文件，先验证： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx-1.20.2/objs/nginx -V</span><br></pre></td></tr></table></figure><h3 id="替换Nginx文件并重启"><a href="#替换Nginx文件并重启" class="headerlink" title="替换Nginx文件并重启"></a>替换Nginx文件并重启</h3><p>验证生成的二进制nginx文件没有问题，进行文件替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp nginx-1.20.2/objs/nginx /usr/sbin/ </span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2625c898/2.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据以上教程的操作步骤逐步操作，添加模块就成功了。如果以后还需添加模块，和上面操作大同小异。只需添加模块参数重新编译通过后，替换编译后的二进制nginx文件即可。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;nginx作为世界上使用最广的web服务，因其可以自由添加不同功能模块来对业务的支持，几乎所有的互联网大厂都在使用。现在有个业务场景需要nginx支持ipv6，但是nginx是用yum直接安装的，那要怎样去增添对第三方模块的支持，而且对原有yum安装的nginx平滑过渡几乎无感呢？本文以nginx增添ipv6模块为例，详细给大家介绍一下yum安装nginx后增添第三方模块的过程步骤，按步操作，其他模块大同小异。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>三大主流负载均衡器LVS、Nginx、HAproxy详解</title>
    <link href="https://wandouduoduo.github.io/articles/ecac59e3.html"/>
    <id>https://wandouduoduo.github.io/articles/ecac59e3.html</id>
    <published>2023-02-27T07:57:40.000Z</published>
    <updated>2023-02-27T08:39:13.304Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>本文对三大主流负载均衡器LVS、Nginx、HAproxy进行对比和详解，以及适合的场景，技术选型等等</p><a id="more"></a><h2 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LVS的是Linux Virtual Server的简写，翻译为Linux虚拟服务器，即一个虚拟的服务器集群系统，</span><br><span class="line">是由我国章文嵩博士在1998年5月所研究成立，也是中国国内最早出现的自由软件项目之一。</span><br><span class="line">LVS由2部分程序组成，包括 ipvs 和 ipvsadm</span><br><span class="line"></span><br><span class="line">1. ipvs(ip virtual server)：一段代码工作在内核空间，叫ipvs，是真正生效实现调度的代码。</span><br><span class="line">2. ipvsadm：另外一段是工作在用户空间，叫ipvsadm，负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)</span><br></pre></td></tr></table></figure><p><strong>LVS相关的几种IP</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VIP :（virtual IP）   LVS服务器上接收外网数据报文的网卡IP地址</span><br><span class="line">DIP: （director IP）  LVS服务器上发送数据报文到real server的网卡IP地址</span><br><span class="line">RIP :（real server）  真实服务器上的IP，即提供服务的服务器IP(常简称为RS)</span><br><span class="line">CIP :（client IP ）   客户端的IP</span><br></pre></td></tr></table></figure><p><strong>工作模式</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LVS常用的工作模式有DR模式、TUN模式、以及NAT模式</span><br></pre></td></tr></table></figure><h3 id="DR模式"><a href="#DR模式" class="headerlink" title="DR模式"></a>DR模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接路由: Director Route</span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a><strong>工作原理</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/1.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每个RS（Real Server）上都有两个IP：VIP和RIP，但是VIP是隐藏的，即不能提供解析等功能，</span><br><span class="line">只是用来做请求回复的源IP的，Director（VS）上只需要一个网卡，在该网卡上配置两个IP：VIP和DIP，</span><br><span class="line">在VS接收到客户端的请求后，VS根据负载算法选择一台RS的网卡mac作为客户端请求包中的目标mac，</span><br><span class="line">通过arp转交给后端RS处理，后端RS再通过自己的路由网关回复给客户端client。</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.各DIP（VS）必须与 RIP（RS） 在同一局域网内(即具有相同的广播域)，且两个有相同的目标地址（vip）；</span><br><span class="line">2.RS的RIP可以使用私有地址，也可以使用公网地址，以方便配置；不支持支持端口映射；</span><br><span class="line">3.RS可以使用必须为uninx操作系统（OS）；且RS需要配置vip但不做响应；</span><br><span class="line">4.Director（VS）仅负责处理入站请求，响应报文由RS( Real server) 直接发往客户端；</span><br><span class="line">5.Real server（RS）不能将网关指向DIP（DS），而直接使用前端网关响应请求报文；</span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">负载均衡器VS只负责将请求包分发给物理服务器RS，而物理服务器RS将应答包直接发给用户。所以，负载均衡器VS能处理很巨大的请求量。</span><br><span class="line">这种方式，一台负载均衡能为超过100台的物理服务器服务，负载均衡器不再是系统的瓶颈。</span><br><span class="line">使用LVS/DR方式，如果你的负载均VS拥有100M的全双工网卡的话，就能使得整个Virtual Server能达到1G的吞吐量，甚至更高；</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种方式需要所有的DIR和RIP都在同一广播域；不支持异地容灾。</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LVS/DR是三种模式中性能最高的一种模式，比LVS-NAT模式下负载的RS serve更多，通常在100台左右，对网络环境要求更高，也是日常应用的最多的一种工作模式。</span><br></pre></td></tr></table></figure><h3 id="TUN模式"><a href="#TUN模式" class="headerlink" title="TUN模式"></a>TUN模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">隧道模式: tunnel</span><br></pre></td></tr></table></figure><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">它的连接调度和管理与LVS/NAT中的一样，利用ip隧道技术的原理，即在原有的客户端请求包头中再加一层IP Tunnel的包头ip首部信息，</span><br><span class="line">不改变原来整个请求包信息，只是新增了一层ip首部信息，再利用路由原理将请求发给RS server，不过要求的是所有的server必须支持”IPTunneling”或者”IP Encapsulation”协议。</span><br></pre></td></tr></table></figure><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.RIP、VIP、DIP全是公网地址</span><br><span class="line">2.RS的网关不会也不可能指向DIP</span><br><span class="line">3.所有的请求报文经由Director Server，但响应报文必须不能进过Director Server</span><br><span class="line">4.不支持端口映射,</span><br><span class="line">5.RS的系统必须支持隧道</span><br></pre></td></tr></table></figure><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.不需要调度应答报文，负载能力强；</span><br><span class="line">2.服务器和调度器可以不在同一个VLAN中；</span><br><span class="line">3.支持广域负载均衡；</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.所有的服务器必须支持“IP Tunneling”协议，需安装内核模块，安装复杂；</span><br><span class="line">2.建立IP隧道的开销大；</span><br><span class="line">3.服务器需要联通外网，风险较大；</span><br><span class="line">4.不支持端口映射；</span><br></pre></td></tr></table></figure><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAT（Network address translation）即网络地址转换，作为一种过渡解决手段，可以用来减少对全球合法IP地址的需求。</span><br><span class="line">简单的说，NAT就是在内部专用网络中使用内部地址，而当内部节点要与外界网络发生联系时，就在边缘路由器或者防火墙处，</span><br><span class="line">将内部地址转换成全局地址，从而使得在外部公共网（Internet）上使用一个和数个合法IP地址正常传输数据。</span><br><span class="line">其中，这里的外网和内网是相对来讲的，下面假设能够访问互联网的网络为外网。</span><br></pre></td></tr></table></figure><h4 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当数据包到达VS时，VS做目标地址转换（DNAT），将目标IP改为RS的IP。RS接收到数据包以后，仿佛是客户端直接发给它的一样。</span><br><span class="line">RS处理完，返回响应时，源IP是RIP，目标IP是客户端的IP。这时RS的包通过网关（VS）中转，VS会做源地址转换（SNAT），</span><br><span class="line">将包的源地址改为VIP，这样，这个包对客户端看起来就仿佛是VS直接返回给它的</span><br></pre></td></tr></table></figure><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.RS应该使用私有地址，RS的网关必须指向DIP</span><br><span class="line">2.DIP和RIP必须在同一个网段内</span><br><span class="line">3.请求和响应报文都需要经过DS，高负载场景中，DS易成为性能瓶颈</span><br><span class="line">4.支持端口映射</span><br><span class="line">5.RS可以使用任意操作系统</span><br><span class="line">6.缺陷：对Director Server压力会比较大，请求和响应都需经过director server</span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集群中的物理服务器可以使用任何支持TCP/IP操作系统，物理服务器可以分配Internet的保留私有地址，只有负载均衡器需要一个合法的IP地址。</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">扩展性有限；当服务器节点（普通PC服务器）数据增长到20个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LVS无论NAT及DR模式，均要求VS和RS在同一个网段内，NAT需要把VS当作各个RS的默认网关，</span><br><span class="line">DR模式采用修改mac地址直接从数据链路层转发、要求必须在同一个物理网段内</span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx是一款轻量级的Web服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强。</span><br><span class="line">国内使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</span><br></pre></td></tr></table></figure><h3 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Nginx由内核和模块组成。Nginx本身做的工作实际很少，当它接到一个HTTP请求时，它仅仅是通过查找配置文件将此次请求映射到一个location block，</span><br><span class="line">而此location中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做Nginx真正的劳动工作者。</span><br><span class="line">通常一个location中的指令会涉及一个handler模块和多个filter模块（当然，多个location可以复用同一个模块）。</span><br><span class="line">handler模块负责处理请求，完成响应内容的生成，而filter模块对响应内容进行处理。用户根据自己的需要开发的模块都属于第三方模块。正是有了这么多模块的支撑，Nginx的功能才会如此强大。</span><br></pre></td></tr></table></figure><p>Nginx的模块从结构上分为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">核心模块：HTTP模块、EVENT模块和MAIL模块</span><br><span class="line">基础模块：HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块，</span><br><span class="line">第三方模块：HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块。</span><br></pre></td></tr></table></figure><p>Nginx的模块从功能上分为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Core    ： 核心模块；构建nginx基础服务、管理其他模块。</span><br><span class="line">Handlers： 处理器模块；此类模块直接处理请求，并进行输出内容和修改headers信息等操作。Handlers处理器模块一般只能有一个。</span><br><span class="line">Filters ： 过滤器模块；此类模块主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。</span><br><span class="line">Proxies ： 代理类模块；此类模块是Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如FastCGI等进行交互，实现服务代理和负载均衡等功能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Nginx的核心模块：主要负责建立nginx服务模型、管理网络层和应用层协议、以及启动针对特定应用的一系列候选模块。</span><br><span class="line">其他模块负责分配给web服务器的实际工作：</span><br><span class="line">    (1) 当Nginx发送文件或者转发请求到其他服务器，由Handlers(处理模块)或Proxies（代理类模块）提供服务；</span><br><span class="line">    (2) 当需要Nginx把输出压缩或者在服务端加一些东西，由Filters(过滤模块)提供服务。</span><br></pre></td></tr></table></figure><p>Nginx模块处理流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.客户端发送HTTP请求</span><br><span class="line">2.Nginx基于配置文件中的位置选择一个合适的处理模块</span><br><span class="line">3.负载均衡模块选择一台后端服务器 (如果有)</span><br><span class="line">4.处理模块进行处理并把输出缓冲放到第一个过滤模块上</span><br><span class="line">5.第一个过滤模块处理后输出给第二个过滤模块 </span><br><span class="line">6.然后第二个过滤模块又到第三个 </span><br><span class="line">7.依此类推，最后把响应发给客户端。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/4.png" alt></p><p>Nginx请求处理流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nginx在启动时会以daemon形式在后台运行，采用多进程+异步非阻塞IO事件模型来处理各种连接请求。</span><br><span class="line">多进程模型包括一个master进程，多个worker进程，一般worker进程个数是根据服务器CPU核数来决定的。</span><br><span class="line">master进程负责管理Nginx本身和其他worker进程。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.操作系统提供的机制（例如 epoll, kqueue 等）产生相关的事件。</span><br><span class="line">2.接收和处理这些事件，如是接收到数据，则产生更高层的 request 对象。</span><br><span class="line">3.处理 request 的 header 和 body。</span><br><span class="line">4.产生响应，并发送回客户端。</span><br><span class="line">5.完成 request 的处理。</span><br><span class="line">6.重新初始化定时器及其他事件。</span><br></pre></td></tr></table></figure><p>Nginx进程模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nginx默认采用多进程工作方式，Nginx启动后，会运行一个master进程和多个worker进程。</span><br><span class="line">master充当整个进程组与用户的交互接口，同时对进程进行监护，管理worker进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。</span><br><span class="line">worker用来处理基本的网络事件，worker之间是平等的，他们共同竞争来处理来自客户端的请求。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/5.png" alt></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nginx能做： 正向代理  反向代理  负载均衡  HTTP服务器(包含动静分离)</span><br></pre></td></tr></table></figure><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正向代理（Forward Proxy）：通常都被简称为代理，就是在用户无法正常访问外部资源，</span><br><span class="line">比方说受到GFW的影响无法访问twitter的时候，我们可以通过代理的方式，让用户绕过防火墙，</span><br><span class="line">从而连接到目标网络或者服务。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正向代理的工作原理就像一个跳板，比如：我访问不了google.com，但是我能访问一个代理服务器A，A能访问google.com，</span><br><span class="line">于是我先连上代理服务器A，告诉他我需要google.com的内容，A就去取回来，然后返回给我。从网站的角度，</span><br><span class="line">只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理是一个位于客户端和原始服务器之间的服务器。为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，</span><br><span class="line">然后代理向原始服务器转交请求并将获得的内容返回给客户端。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/6.png" alt></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反向代理（Reverse Proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，</span><br><span class="line">并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子，比如我想访问 http://www.test.com/readme，但www.test.com上并不存在readme页面，于是他是偷偷从另外一台服务器上取回来，</span><br><span class="line">然后作为自己的内容返回用户，但用户并不知情。这里所提到的 www.test.com 这个域名对应的服务器就设置了反向代理功能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反向代理服务器对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，</span><br><span class="line">接着反向代理服务器将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/ecac59e3/7.png" alt></p><p><strong>总结</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正向代理：针对客户端而言，代理服务器代理客户端，转发请求，并将获得的内容返回给客户端。</span><br><span class="line">反向代理：针对客户端而言，代理服务器就像是原始服务器,代理集群的web节点服务器返回结果。</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</span><br><span class="line">简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</span><br><span class="line">Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。</span><br></pre></td></tr></table></figure><p>1.<strong>轮询（rr）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。</span><br></pre></td></tr></table></figure><p>2.<strong>权重(weight)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream westos&#123;</span><br><span class="line">     server 172.25.66.2:80  weight=9;</span><br><span class="line">     server 172.25.66.3:80  weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>ip哈希（ip_hash）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），</span><br><span class="line">这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，</span><br><span class="line">所以很多时候我们需要一个客户只访问一个服务器，那么就需要用ip_hash了，ip_hash的每个请求按访问ip的hash结果分配，</span><br><span class="line">这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip_hash： 来自同一个IP的请求会分发到相同的后端服务器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream westos&#123;</span><br><span class="line"> ip_hash;</span><br><span class="line">     server 172.25.66.2:80;</span><br><span class="line">     server 172.25.66.3:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三方策略：</p><p>1.<strong>fair</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend&#123;</span><br><span class="line"> fair;</span><br><span class="line">     server 172.25.66.2:80;</span><br><span class="line">     server 172.25.66.3:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<strong>url_hash</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 </span><br><span class="line">在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend&#123;</span><br><span class="line"> hash $request_uri; </span><br><span class="line">     hash_method crc32; </span><br><span class="line">     server 172.25.66.2:80;</span><br><span class="line">     server 172.25.66.3:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4).<strong>HTTP服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，</span><br><span class="line">就可以通过Nginx来实现，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，</span><br><span class="line">我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</span><br></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>(1).支持高并发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官方测试Nginx能够支撑5万并发连接，实际生产环境中可以支撑2~4万并发连接数。</span><br><span class="line">原因主要是Nginx使用了最新的epoll（Linux2.6内核）和kqueue（freeBSD）网路I/O模型，</span><br><span class="line">而Apache使用的是传统的Select模型，其比较稳定的Prefork模式为多进程模式，需要经常派生子进程，所以消耗的CPU等服务器资源，要比Nginx高很多。</span><br></pre></td></tr></table></figure><p>(2).内存消耗少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx+PHP（FastCGI）服务器，在3万并发连接下，开启10个Nginx进程消耗150MB内存，15MB*10=150MB，开启的64个PHP-CGI进程消耗1280内存，20MB*64=1280MB，加上系统自身消耗的内存，总共消耗不到2GB的内存。</span><br><span class="line">如果服务器的内存比较小，完全可以只开启25个PHP-CGI进程，这样PHP-CGI消耗的总内存数才500MB。</span><br></pre></td></tr></table></figure><p>(3).成本低廉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">购买F5BIG-IP、NetScaler等硬件负载均衡交换机，需要十多万到几十万人民币，而Nginx为开源软件，采用的是2-clause BSD-like协议，可以免费试用，并且可用于商业用途。</span><br><span class="line">BSD开源协议是一个给使用者很大自由的协议，协议指出可以自由使用、修改源代码、也可以将修改后的代码作为开源或专用软件再发布。</span><br></pre></td></tr></table></figure><p>(4).配置简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网络和程序一样通俗易懂，即使，非专用系统管理员也能看懂。</span><br></pre></td></tr></table></figure><p>(5).支持Rewrite重写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rewrite:重定向；能够根据域名、URL的不同，将http请求分到不同的后端服务器群组。</span><br></pre></td></tr></table></figure><p>(6).内置健康检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果NginxProxy后端的某台Web服务器宕机了，不会影响前端的访问。</span><br></pre></td></tr></table></figure><p>(7).节省带宽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">支持GZIP压缩，可以添加浏览器本地缓存的Header头。</span><br></pre></td></tr></table></figure><p>(8).支持热部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Nginx支持热部署，它的自动特别容易，并且，几乎可以7天*24小时不间断的运行，</span><br><span class="line">即使运行数个月也不需要重新启动，还能够在不间断服务的情况下，对软件版本进行升级。</span><br></pre></td></tr></table></figure><h2 id="HAproxy"><a href="#HAproxy" class="headerlink" title="HAproxy"></a>HAproxy</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAProxy是一个使用C语言编写的自由及开放源代码软件，它提供高可用性、负载均衡，以及基于TCP(第四层)和HTTP（第七层）的应用程序代理。</span><br><span class="line">HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，</span><br><span class="line">完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAProxy实现了一种事件驱动, 单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制 、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。</span><br><span class="line">事件驱动模型因为在有更好的资源和时间管理的用户空间(User-Space) 实现所有这些任务，所以没有这些问题。</span><br><span class="line">此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化以使每个CPU时间片(Cycle)做更多的工作</span><br></pre></td></tr></table></figure><p>HAProxy的负载均衡算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. roundrobin：简单的轮询</span><br><span class="line">2. static-rr：权重轮询</span><br><span class="line">3. leastconn：最少连接者优先</span><br><span class="line">4. source：根据请求源IP,这个跟Nginx的ip_hash机制类似</span><br><span class="line">5. ri：根据请求的URI</span><br><span class="line">6. rl_param：表示根据请求的URI参数‘balance url_param’requires an URL parameter name;</span><br><span class="line">7. hdr(name)：根据HTTP请求头来锁定每一次HTTP请求</span><br><span class="line">8. rdp-cookie(name)：根据cookie来锁定并哈希每一次TCP请求</span><br></pre></td></tr></table></figure><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.免费开源，稳定性也是非常好。单HAproxy也跑得不错，稳定性可以与硬件级的F5相媲美。</span><br><span class="line">2.根据官方文档，HAproxy可以跑满10Gbps，这个数值作为软件级负载均衡器是相当惊人的。</span><br><span class="line">3.HAproxy支持连接拒绝:因为维护一个连接的打开的开销是很低的，有时我们很需要限制攻击蠕虫（attack bots），也就是说限制它们的连接打开从而限制它们的危害。这个已经为一个陷于小型DDoS攻击的网站开发了而且已经拯救了很多站点，这个优点也是其它负载均衡器没有的。</span><br><span class="line">4.HAproxy支持全透明代理（已具备硬件防火墙的典型特点）:可以用客户端IP地址或者任何其他地址来连接后端服务器。这个特性仅在Linux 2.4/2.6内核打了tcp proxy补丁后才可以使用。这个特性也使得为某特殊服务器处理部分流量同时又不修改服务器的地址成为可能。</span><br><span class="line">5.HAproxy现多于线上的Mysql集群环境，我们常用于它作为MySQL（读）负载均衡。</span><br><span class="line">6.自带强大的监控服务器状态的页面，实际环境中我们结合Nagios进行邮件或短信报警。</span><br><span class="line">7.HAproxy支持虚拟主机，许多朋友说它不支持虚拟主机是错误的，通过测试我们知道，HAProxy是支持虚拟主机的。</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较LVS、Nginx、HAproxy优缺点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三大主流负载均衡器： LVS  Nginx  HAproxy</span><br></pre></td></tr></table></figure><h3 id="LVS-1"><a href="#LVS-1" class="headerlink" title="LVS"></a>LVS</h3><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.抗负载能力强,工作在网络4层之上,仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低。</span><br><span class="line">2.配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率。</span><br><span class="line">3.工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如LVS+Keepalived，不过我们在项目实施中用得最多的还是LVS/DR+Keepalived。</span><br><span class="line">4.无流量，LVS只分发请求，而流量并不从它本身出去，这点保证了均衡器IO的性能不会收到大流量的影响。</span><br><span class="line">5.应用范围比较广，因为LVS工作在4层，所以它几乎可以对所有应用做负载均衡，包括http、数据库、在线聊天室等等。</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.软件本身不支持正则表达式处理，不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在。</span><br><span class="line">2.如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了，特别后面有Windows Server的机器的话，如果实施及配置还有维护过程就比较复杂了，相对而言，Nginx/HAProxy+Keepalived就简单多了。</span><br></pre></td></tr></table></figure><h3 id="Nginx-1"><a href="#Nginx-1" class="headerlink" title="Nginx"></a>Nginx</h3><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构。它的正则规则比HAProxy更为强大和灵活，这也是它目前广泛流行的主要原因之一，Nginx单凭这点可利用的场合就远多于LVS了。</span><br><span class="line">2.对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能。</span><br><span class="line">3.安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来。LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。</span><br><span class="line">3.抗高并发且稳定，在硬件不差的情况下一般能支撑几万次的并发量，负载度比LVS相对小些。</span><br><span class="line">4.可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点。</span><br><span class="line">5.不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器。LNMP也是近几年非常流行的web架构，在高流量的环境中稳定性也很好。</span><br><span class="line">6.作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可以考虑用其作为反向代理加速器。</span><br><span class="line">7.可作为中层反向代理使用，这一层面Nginx基本上无对手，唯一可以对比Nginx的就只有lighttpd了，不过lighttpd目前还没有做到Nginx完全的功能，配置也不那么清晰易读，社区资料也远远没Nginx活跃。</span><br><span class="line">8.可作为静态网页和图片服务器，这方面的性能也无对手。</span><br><span class="line">9.Nginx社区非常活跃，第三方模块也很多。</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.Nginx仅能支持http、https和Email协议，适用范围小。</span><br><span class="line">2.对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。不支持Session的直接保持，但能通过ip_hash来解决。</span><br></pre></td></tr></table></figure><h3 id="HAproxy-1"><a href="#HAproxy-1" class="headerlink" title="HAproxy"></a>HAproxy</h3><p><strong>优点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.支持两种代理模式：TCP（四层）和HTTP（七层），支持虚拟主机；</span><br><span class="line">2.支持Session的保持，Cookie的引导；同时支持通过获取指定的url来检测后端服务器的状态。能够补充Nginx的一些缺点。</span><br><span class="line">3.HAProxy跟LVS类似，本身就只是一款负载均衡软件；单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。</span><br><span class="line">4.HAProxy可以对Mysql进行负载均衡，对后端的DB节点进行检测和负载均衡。</span><br><span class="line">5.HAProxy负载均衡策略非常多，比如：动态加权轮循(Dynamic Round Robin)，加权源地址哈希(Weighted Source Hash)，加权URL哈希和加权参数哈希(Weighted Parameter Hash)</span><br><span class="line">6.免费开源，稳定性也是非常好，可以与LVS相媲美；</span><br><span class="line">7.自带强大的监控服务器状态的页面，实际环境中我们结合Nagios进行邮件或短信报警；</span><br></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 不支持POP/SMTP协议 SPDY协议；</span><br><span class="line">2. 不能做Web服务器，即不支持HTTP cache功能；</span><br><span class="line">3. 重载配置的功能需要重启进程，虽然也是soft restart，但没有Nginx的reaload更为平滑和友好；</span><br><span class="line">4. 多进程模式支持不够好；</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.网站建设初期，可以选用Nigix/HAproxy作为反向代理负载均衡（或者流量不大都可以不选用负载均衡），因为其配置简单，性能也能满足一般的业务场景。</span><br><span class="line">  如果考虑到负载均衡器是有单点问题，可以采用Nginx/HAproxy+Keepalived来避免。</span><br><span class="line">2.网站并发达到一定程度之后，为了提高稳定性和转发效率，可以使用LVS、毕竟LVS比Nginx/HAproxy要更稳定，转发效率也更高。不过维护LVS对维护人员的要求也会更高，投入成本也更大。</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对三大主流负载均衡器LVS、Nginx、HAproxy进行对比和详解，以及适合的场景，技术选型等等&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Lvs" scheme="https://wandouduoduo.github.io/tags/Lvs/"/>
    
  </entry>
  
  <entry>
    <title>企业微服务分布式注册中心原理</title>
    <link href="https://wandouduoduo.github.io/articles/22da253e.html"/>
    <id>https://wandouduoduo.github.io/articles/22da253e.html</id>
    <published>2023-02-22T07:39:05.000Z</published>
    <updated>2023-02-22T09:42:27.516Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>随着互联网的发展，对应用服务的要求也在发生着变化。有原来的大而臃肿的单个大型应用服务解耦拆分成由很多微服务共同调用来实现其功能。单个大型应用它自身集合了所有的功能，如有单个模块有问题就需要整个应用重新打包上线和测试，影响大耗时费力。而分布式微服务调用每个服务只负责单一功能模块，更新模块功能只需更新对应功能模块的微服务即可。但分布式微服务相互之间要怎么远程调用呢？就需要用到<strong>注册中心</strong>。目前所有互联网公司都采用分布式微服务方式，所以注册中心都是必须且必要的。</p><a id="more"></a><h2 id="注册中心角色"><a href="#注册中心角色" class="headerlink" title="注册中心角色"></a>注册中心角色</h2><p>注册中心主要有三种角色：</p><ul><li><strong>服务提供者（RPC Server）</strong>：在启动时，向 Registry 注册自身服务，并向 Registry 定期发送心跳汇报存活状态。</li><li><strong>服务消费者（RPC Client）</strong>：在启动时，向 Registry 订阅服务，把 Registry 返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。</li><li><strong>服务注册中心（Registry）</strong>：用于保存 RPC Server 的注册信息，当 RPC Server 节点发生变更时，Registry 会同步变更，RPC Client 感知后会刷新本地 内存中缓存的服务节点列表。</li></ul><p>最后，RPC Client 从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起调用。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/22da253e/2.png" alt></p><h2 id="注册中心原理"><a href="#注册中心原理" class="headerlink" title="注册中心原理"></a>注册中心原理</h2><p>微服务网络远程调用为RPC调用，而RPC服务注册/发现过程如下：</p><ol><li>服务提供者启动时，会将其服务名称，ip地址注册到注册中心。</li><li>服务消费者在第一次调用服务时，会通过注册中心找到相应的服务的IP地址列表，并缓存到本地，以供后续使用。当消费者调用服务时，不会再去请求注册中心，而是直接通过负载均衡算法从IP列表中取一个服务提供者的服务器调用服务。</li><li>当服务提供者的某台服务器宕机或下线时，相应的ip会从服务提供者IP列表中移除。同时，注册中心会将新的服务IP地址列表发送给服务消费者机器，缓存在消费者本机。</li><li>当某个服务的所有服务器都下线了，那么这个服务也就下线了。</li><li>同样，当服务提供者的某台服务器上线时，注册中心会将新的服务IP地址列表发送给服务消费者机器，缓存在消费者本机。</li><li>服务提供方可以根据服务消费者的数量来作为服务下线的依据。</li></ol><h2 id="注册中心功能"><a href="#注册中心功能" class="headerlink" title="注册中心功能"></a>注册中心功能</h2><p>根据注册中心原理的描述，注册中心必须实现以下功能。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/22da253e/3.png" alt></p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP理论是分布式架构中重要理论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一致性(Consistency) (所有节点在同一时间具有相同的数据)</span><br><span class="line">可用性(Availability) (保证每个请求不管成功或者失败都有响应)</span><br><span class="line">分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</span><br></pre></td></tr></table></figure><h3 id="CAP理解"><a href="#CAP理解" class="headerlink" title="CAP理解"></a>CAP理解</h3><p>P的理解是在整个系统中某个部分挂掉或者宕机了，并不影响整个系统的运作或者使用，是网络层面的，通常认为网络是顺畅流通的。</p><p>A可用性是系统的某个节点挂了，但并不影响系统的接受请求或者发出响应。</p><p>C一致性是客户端请求系统中的任意节点，获取的返回结果都是一致的。系统中各个节点会实时同步信息来保证，通常各种微服务和注册中心都不是单台的，通常都是有多台组成服务集群，那么各个节点的数据一致性就要考量。</p><h3 id="CAP侧重"><a href="#CAP侧重" class="headerlink" title="CAP侧重"></a>CAP侧重</h3><p>但CAP 3项不可能都取，只能取其中2两项，造成侧重点不同。</p><p>如果C是第一需求的话，那么会影响A的性能，因为要数据同步，不然请求结果会有差异，但是数据同步会消耗时间，期间可用性就会降低。</p><p>如果A是第一需求，那么只要有一个服务在，就能正常接受请求，但是对与返回结果一致就不能保证，原因是，在分布式部署的时候，数据一致的过程不可能想切线路那么快。</p><p>再如果，同事满足一致性和可用性，那么分区容错就很难保证了，只能是单点，也是分布式的基本核心。好了，明白这些理论，就可以在相应的场景选取服务注册与发现了</p><h2 id="协议算法"><a href="#协议算法" class="headerlink" title="协议算法"></a>协议算法</h2><p>一致性协议算法主要有Paxos、Raft、ZAB。</p><p>Paxos算法是Leslie Lamport在1990年提出的一种基于消息传递的一致性算法，非常难以理解，基于Paxos协议的数据同步与传统主备方式最大的区别在于：Paxos只需超过半数的副本在线且相互通信正常，就可以保证服务的持续可用，且数据不丢失。</p><p>Raft是斯坦福大学的Diego Ongaro、John Ousterhout两个人以易理解为目标设计的一致性算法，已经有了十几种语言的Raft算法实现框架，较为出名的有etcd，Google的Kubernetes也是用了etcd作为他的服务发现框架。</p><p>Raft是Paxos的简化版，与Paxos相比，Raft强调的是易理解、易实现，Raft和Paxos一样只要保证超过半数的节点正常就能够提供服务。这篇文章 <a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTU5NzQ1Mw==&mid=2247484080&idx=1&sn=24ccb6e7de6d7a274c75296799b57c32&chksm=cf034052f874c944a601a6eb50d524753d7adaf59c0f2326a47a3104302c2544a6901104668f&token=333114218&lang=zh_CN&scene=21#wechat_redirect" rel="noopener" target="_blank">《ETCD教程-2.Raft协议》</a> 详细讲解了Raft原理，非常有意思，感兴趣的同学可以看看。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着互联网的发展，对应用服务的要求也在发生着变化。有原来的大而臃肿的单个大型应用服务解耦拆分成由很多微服务共同调用来实现其功能。单个大型应用它自身集合了所有的功能，如有单个模块有问题就需要整个应用重新打包上线和测试，影响大耗时费力。而分布式微服务调用每个服务只负责单一功能模块，更新模块功能只需更新对应功能模块的微服务即可。但分布式微服务相互之间要怎么远程调用呢？就需要用到&lt;strong&gt;注册中心&lt;/strong&gt;。目前所有互联网公司都采用分布式微服务方式，所以注册中心都是必须且必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="服务CAP" scheme="https://wandouduoduo.github.io/categories/%E6%9C%8D%E5%8A%A1CAP/"/>
    
    
      <category term="CAP" scheme="https://wandouduoduo.github.io/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>详解nfs文件共享存储服务</title>
    <link href="https://wandouduoduo.github.io/articles/bd4b669b.html"/>
    <id>https://wandouduoduo.github.io/articles/bd4b669b.html</id>
    <published>2023-02-20T07:39:22.000Z</published>
    <updated>2023-02-20T09:07:02.643Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h2 id="NFS介绍"><a href="#NFS介绍" class="headerlink" title="NFS介绍"></a>NFS介绍</h2><p>NFS(Network File System) 即网络文件系统，它允许网络中服务器之间通过TCP/IP网络共享资源，NFS的一个最大优点是可以节省本地存储空间，一台NFS服务器和若干台客户机。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备两台服务器一台做客户端，一台做服务器，根据自己的电脑网段来做</span></span><br><span class="line">A:192.168.10.51 <span class="comment">#做服务端</span></span><br><span class="line">B:192.168.10.52<span class="comment">#做客户端</span></span><br></pre></td></tr></table></figure><h2 id="服务搭建"><a href="#服务搭建" class="headerlink" title="服务搭建"></a>服务搭建</h2><h3 id="服务端操作"><a href="#服务端操作" class="headerlink" title="服务端操作"></a>服务端操作</h3><h4 id="安装nfs和rpcbind"><a href="#安装nfs和rpcbind" class="headerlink" title="安装nfs和rpcbind"></a>安装nfs和rpcbind</h4><p>在A服务端机器安装nfs-utils和rpcbind包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment"># nfs-utils:提供了NFS服务器程序和对应的管理工具</span></span><br><span class="line"><span class="comment"># rpcbind:获取nfs服务器端的端口等信息</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/1.png" alt></p><h4 id="启动rpcbind"><a href="#启动rpcbind" class="headerlink" title="启动rpcbind"></a>启动rpcbind</h4><p>启动rpcbind并检查是否启动了rpcbind服务并监听111端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind</span><br><span class="line">netstat -tunlp | grep 111</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/2.png" alt></p><h4 id="配置共享目录"><a href="#配置共享目录" class="headerlink" title="配置共享目录"></a>配置共享目录</h4><p>配置NFS服务的共享文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nfsdata</span><br><span class="line"></span><br><span class="line">vim /etc/exports</span><br><span class="line"></span><br><span class="line">/data/nfsdata 192.168.10.0/24(rw,sync)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/data/NFSdata<span class="comment">#表示要共享文件的目录</span></span><br><span class="line">192.168.10.0/24<span class="comment">#表示所有允许访问的客户端IP网段，也可以写成指定的ip，只允许当前客户机访问</span></span><br><span class="line">(rw,sync)<span class="comment">#rw:表示读写权限，sync:表示数据同步写入内存硬盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如exports做调整，修改后可以重新加载即可</span></span><br><span class="line">exportfs -r</span><br><span class="line">exportfs <span class="comment"># 查看共享目录</span></span><br></pre></td></tr></table></figure><p><strong>补充知识</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ro：共享目录只读；</span><br><span class="line">rw：共享目录可读可写；</span><br><span class="line">all_squash：所有访问用户都映射为匿名用户或用户组；</span><br><span class="line">no_all_squash(默认)：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；</span><br><span class="line">root_squash(默认)：将来访的root用户映射为匿名用户或用户组；</span><br><span class="line">no_root_squash：来访的root用户保持root帐号权限；</span><br><span class="line">anonuid=：指定匿名访问用户的本地用户UID，默认为nfsnobody(65534)；</span><br><span class="line">anongid=：指定匿名访问用户的本地用户组GID，默认为nfsnobody(65534)；</span><br><span class="line">secure(默认)：限制客户端只能从小于1024的tcp/ip端口连接服务器；</span><br><span class="line">insecure：允许客户端从大于1024的tcp/ip端口连接服务器；</span><br><span class="line">sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；</span><br><span class="line">async：将数据先保存在内存缓冲区中，必要时才写入磁盘；</span><br><span class="line">wdelay(默认)：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率；</span><br><span class="line">no_wdelay：若有写操作则立即执行，应与sync配合使用；</span><br><span class="line">subtree_check(默认) ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限；</span><br><span class="line">no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；</span><br></pre></td></tr></table></figure><h4 id="启动nfs服务"><a href="#启动nfs服务" class="headerlink" title="启动nfs服务"></a>启动nfs服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nfs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/3.png" alt></p><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs.service</span><br></pre></td></tr></table></figure><h4 id="安全加固"><a href="#安全加固" class="headerlink" title="安全加固"></a>安全加固</h4><p><strong>方法一：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#防火请关掉很简单，直接命令关掉即可</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>直接关闭防火墙虽然很简单，但在日常服务器上直接关闭防火墙，让其裸跑有很大安全风险。而rpc的服务接口默认是随机的。我们需要在配置中把其固定下来，这样在防火墙或安全组中只需开放对应端口即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/nfs</span><br><span class="line"></span><br><span class="line">RQUOTAD_PORT=30001</span><br><span class="line">LOCKD_TCPPORT=30002</span><br><span class="line">LOCKD_UDPPORT=30002</span><br><span class="line">MOUNTD_PORT=30003</span><br><span class="line">STATD_PORT=30004</span><br><span class="line"><span class="comment">#固定的端口为30001-30004</span></span><br><span class="line"></span><br><span class="line">vim /etc/modprobe.d/lockd.conf</span><br><span class="line"></span><br><span class="line">options lockd nlm_tcpport=30002</span><br><span class="line">options lockd nlm_udpport=30002</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nfs服务</span></span><br><span class="line">systemctl restart nfs-config</span><br><span class="line">systemctl restart nfs-idmap</span><br><span class="line">systemctl restart nfs-lock</span><br><span class="line">systemctl restart nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口状态</span></span><br><span class="line">rpcinfo -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在安全组或防火墙策略中tcp和udp都放开服务端口（111、2049、30001-30004）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/7.png" alt></p><h3 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><h4 id="安装nfs-utils"><a href="#安装nfs-utils" class="headerlink" title="安装nfs-utils"></a>安装nfs-utils</h4><p>在B客户端机器安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/4.png" alt></p><h4 id="设置开机启动-1"><a href="#设置开机启动-1" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line"><span class="comment">#客户端不用启动nfs-server，但是要用到nfs-server的一个命令showmount</span></span><br></pre></td></tr></table></figure><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs 192.168.10.51:/data/nfsdata /nfs <span class="comment">#挂在文件系统</span></span><br><span class="line">showmount -e 192.168.10.51 <span class="comment">#查看是否挂载上</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/5.png" alt></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>分别在服务端或客户端创建文件，观察</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/bd4b669b/6.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上面教程步骤就可以简单的用单台nfs服务器来实现文件共享和挂载服务，但这只是针对紧急特殊情况。如要在生产上使用建议使用glusterfs多台服务器集群来做文件共享服务。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NFS介绍&quot;&gt;&lt;a href=&quot;#NFS介绍&quot; class=&quot;headerlink&quot; title=&quot;NFS介绍&quot;&gt;&lt;/a&gt;NFS介绍&lt;/h2&gt;&lt;p&gt;NFS(Network File System) 即网络文件系统，它允许网络中服务器之间通过TCP/IP网络共享资源，NFS的一个最大优点是可以节省本地存储空间，一台NFS服务器和若干台客户机。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务搭建" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Nfs" scheme="https://wandouduoduo.github.io/tags/Nfs/"/>
    
  </entry>
  
  <entry>
    <title>k8s详解Service和Ingress</title>
    <link href="https://wandouduoduo.github.io/articles/a0eec1b7.html"/>
    <id>https://wandouduoduo.github.io/articles/a0eec1b7.html</id>
    <published>2022-07-26T03:18:20.000Z</published>
    <updated>2022-07-26T06:29:33.071Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h1 id="Service-的概念"><a href="#Service-的概念" class="headerlink" title="Service 的概念"></a>Service 的概念</h1><p>Kubernetes Service定义了这样一种抽象：一个Pod的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组Pod能够被Service访问到，通常是通过Label Selector</p><p>通俗的讲：SVC负责检测Pod的状态信息，不会因pod的改动IP地址改变（因为关注的是标签），导致Nginx负载均衡影响</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/1.png" alt></p><p>Service能够提供负载均衡的能力，但是在使用上有以下限制：</p><ul><li>默认只提供 4 层负载均衡能力（IP+端口），而没有 7 层功能（主机名和域名），但有时我们可能需要更多的匹配规则来转发请求，这点上 4 层负载均衡是不支持的</li><li>后续可以通过Ingress方案，添加7层的能力</li></ul><a id="more"></a><h1 id="Service-的类型"><a href="#Service-的类型" class="headerlink" title="Service 的类型"></a>Service 的类型</h1><p>Service 在 K8s 中有以下四种类型</p><ul><li>Clusterlp：默认类型，自动分配一个仅Cluster内部可以访问的虚拟IP</li><li>NodePort：在ClusterlP基础上为Service在每台机器上绑定一个端口，这样就可以通过<nodeip>:NodePort 来访问该服务</nodeip></li><li>LoadBalancer：在NodePort的基础上，借助 cloud provider 创建一个外部负载均衡器，并将请求转发到<br><nodeip>：NodePort</nodeip></li><li>ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有kubernetes1.7或更高版本的kube-dns才支持</li></ul><p>①ClusterIp：默认类型，自动分配一个仅 Cluster 内部可以访问的虚拟 IP</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/2.png" alt></p><p>②NodePort：在 ClusterIP 基础上为 Service 在每台机器上绑定一个端口，这样就可以通过<nodeip>:NodePort 来访问该服务<br>访问node01的30001相当于访问定义的SVC后端的80的三个不pod同服务（RR）<br>client——》nginx（负载接收器，反向代理）——》node1，node2</nodeip></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/3.png" alt></p><p>③LoadBalancer：在 NodePort 的基础上，借助 cloud provider 创建一个外部负载均衡器，并将请求转发到<nodeip>:NodePort</nodeip></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/4.png" alt></p><p>④ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有 kubernetes 1.7 或更高版本的 kube-dns 才支持</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/5.png" alt></p><p><strong>SVC基础导论</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/6.png" alt></p><p><strong>总结:</strong></p><ul><li>客户端访问节点时通过iptables实现的</li><li>iptables规则是通过kube-proxy写入的</li><li>apiserver通过监控kube-proxy去进行对服务和端点的监控的</li><li>kube-proxy通过pod的标签（lables）去判断这个断点信息是否写入到Endpoints里去。</li></ul><h1 id="VIP-和-Service-代理"><a href="#VIP-和-Service-代理" class="headerlink" title="VIP 和 Service 代理"></a>VIP 和 Service 代理</h1><p>在 Kubernetes 集群中，每个 Node 运行一个kube-proxy进程。kube-proxy负责为Service实现了一种VIP（虚拟 IP）的形式，而不是ExternalName的形式。在 Kubernetes v1.0 版本，代理完全在 userspace。在Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。从 Kubernetes v1.2 起，默认就是iptables 代理。在 Kubernetes v1.8.0-beta.0 中，添加了 ipvs 代理</p><p>代理层级：userspace——》iptables——》ipvs<br>在 Kubernetes 1.14 版本开始默认使用ipvs 代理</p><p>在 Kubernetes v1.0 版本，Service是 “4层”（TCP/UDP over IP）概念。在 Kubernetes v1.1 版本，新增了Ingress API（beta 版），用来表示 “7层”（HTTP）服务</p><p><strong>为何不使用 round-robin DNS？</strong><br>DNS会在很多的客户端里进行缓存，很多服务在访问DNS进行域名解析完成、得到地址后不会对DNS的解析进行清除缓存的操作，所以一旦有他的地址信息后，不管访问几次还是原来的地址信息，导致负载均衡无效。</p><h1 id="ipvs代理模式"><a href="#ipvs代理模式" class="headerlink" title="ipvs代理模式"></a>ipvs代理模式</h1><p>ipvs 代理模式（标准）<br>这种模式，kube-proxy 会监视 Kubernetes Service对象和Endpoints，调用netlink接口以相应地创建ipvs 规则并定期与 Kubernetes Service对象和Endpoints对象同步 ipvs 规则，以确保 ipvs 状态与期望一致。访问服务时，流量将被重定向到其中一个后端 Pod</p><p>与 iptables 类似，ipvs 于 netfilter 的 hook 功能，但使用哈希表作为底层数据结构并在内核空间中工作。这意味着 ipvs 可以更快地重定向流量，并且在同步代理规则时具有更好的性能。此外，ipvs 为负载均衡算法提供了更多选项，例如：</p><p>①rr：轮询调度<br>②lc：最小连接数<br>③dh：目标哈希<br>④sh：源哈希<br>⑤sed：最短期望延迟<br>⑥nq：不排队调度</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/7.png" alt></p><p>&lt;–注意；ipvs模式假定在运行 kube-proxy 之前在节点上都已经安装了IPVS内核模块。当kube-proxy以ipvs代理模式启动时，kube-proxy 将验证节点上是否安装了IEVS模块，如果末安装，则kube-proxy 将回退到iptables 代理模式–&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -Ln</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><h1 id="Service实验讲解"><a href="#Service实验讲解" class="headerlink" title="Service实验讲解"></a>Service实验讲解</h1><h2 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h2><p>clusterIP 主要在每个 node 节点使用 iptables，将发向 clusterIP 对应端口的数据，转发到 kube-proxy 中。然后 kube-proxy 自己内部实现有负载均衡的方法，并可以查询到这个 service 下对应 pod 的地址和端口，进而把数据转发给对应的 pod 的地址和端口</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/8.png" alt></p><p>为了实现图上的功能，主要需要以下几个组件的协同工作：</p><ul><li>apiserver 用户通过kubectl命令向apiserver发送创建service的命令，apiserver接收到请求后将数据存储到etcd中</li><li>kube-proxy kubernetes的每个节点中都有一个叫做kube-porxy的进程，这个进程负责感知service，pod的变化，并将变化的信息写入本地的iptables规则中</li><li>iptables 使用NAT等技术将virtualIP的流量转至endpoint中</li></ul><p><strong><em>api将信息写到etcd，kubeproxy监测etcd的变化，得到变化以后写入到ipvs规则</em></strong></p><p><strong>第一步 创建 svc-deployment.yaml 文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master01</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">svc-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">myapp-deploy</span> <span class="comment"># deployment的名字</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span>  <span class="comment"># 副本数目为3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span> <span class="comment"># 匹配</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">      release:</span> <span class="string">stabel</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">        release:</span> <span class="string">stabel</span></span><br><span class="line"><span class="attr">        env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">wangyanglinux/myapp:v2</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">          containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f svc-deployment.yaml</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/9.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -o wide</span><br><span class="line">curl 10.244.2.44</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/10.png" alt></p><p>这样地址访问，不太行。如果pod死亡后会出现新的pod，然后与之前的地址又不一致。因此 为了可靠的访问，需要进行第二步，SVC创建</p><p><strong>第二步 给deploy绑定svc，即创建 Service 信息</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master01</span> <span class="string">~]#</span> <span class="string">vim</span> <span class="string">svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span> <span class="comment"># 不指定的话默认而已是Cluster IP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">myapp</span> <span class="comment"># 一定与svc-deployment.yaml的标签要匹配</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">stabel</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span> <span class="comment"># 目标后端服务的端口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f svc.yaml</span><br><span class="line">kubectl get svc</span><br><span class="line">ipvsadm -Ln</span><br></pre></td></tr></table></figure><p>这里是两个的原因是因为有一个容器还在创建，没关系</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/11.png" alt></p><p>kubectl delete -f svc.yaml 也可以看得到对应的服务也被删除了。</p><p>直接访问svc的IP地址，相当于通过ipvs模块，负载均衡，实现代理到后端节点上。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/12.png" alt></p><p>直接访问svc的IP地址，可以看到轮询RR效果</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/13.png" alt></p><h2 id="Headless-Service"><a href="#Headless-Service" class="headerlink" title="Headless Service"></a>Headless Service</h2><p>它属于一种特殊的Cluster IP，<br>有时不需要或不想要负载均衡，以及单独的 Service IP 。遇到这种情况，可以通过指定 ClusterIP(spec.clusterIP) 的值为 “None” 来创建 Headless Service 。这类 Service 并不会分配 Cluster IP， kube-proxy 不会处理它们，而且平台也不会为它们进行负载均衡和路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># vim svc-none.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp-headless</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">   app: myapp</span><br><span class="line">  clusterIP: <span class="string">"None"</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f svc-none.yaml</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get svc</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/14.png" alt></p><p>虽然没有svc了，但是可以通过域名的方案依然可以访问<br>svc创建成功会把主机名（svc名.名字空间名.集群域名）写入到coredns</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get pod -n kube-system -o wide 获取当前dns的地址信息</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># dig -t A myapp-headless.default.svc.cluster.local. @10.244.0.12</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/15.png" alt></p><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><p>可以在当前的物理机上，暴露一个端口，让内部服务暴露到外部<br>客户端可以通过物理机IP+端口方式 访问到集群内部</p><p>nodePort原理在于在 node 上开了一个端口，将向该端口的流量导入到 kube-proxy，然后由 kube-proxy 进一步（与接口层交互）到给对应的 pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># vim nodeport.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort <span class="comment"># 不指定的话默认而已是Cluster IP</span></span><br><span class="line">  selector:</span><br><span class="line">    app: myapp <span class="comment"># 一定与svc-deployment.yaml的标签要匹配</span></span><br><span class="line">    release: stabel</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80 <span class="comment"># 目标后端服务的端口</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f nodeport.yaml</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get pod</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get svc</span></span><br></pre></td></tr></table></figure><p>同时可以看出，一组pod可以对应不同的svc的。只要pod标签与svc标签一致就可以关联。多对多的关系 n:m</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/16.png" alt></p><p>浏览器访问：master虚拟机IP:端口 <strong>10.0.100.10:32642</strong><br>并且子节点pod也会开启这个端口<br><strong>10.0.100.11:32642与10.0.100.12:32642</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/17.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/18.png" alt></p><p>查询流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -Ln</span><br><span class="line">iptables -t nat -nvL</span><br></pre></td></tr></table></figure><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h2><p>loadBalancer和nodePort其实是同一种方式。区别在于loadBalancer比nodePort多了一步，就是可以调用cloud provider去创建LB来向节点导流（LB收费）</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/19.png" alt></p><h2 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h2><p>别名操作，外部服务引入到集群内<br>这种类型的 Service 通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容( 例如：hub.atguigu.com )。ExternalName Service 是 Service 的特例，它没有 selector，也没有定义任何的端口和Endpoint。相反的，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr"> name:</span> <span class="string">my-service-1</span></span><br><span class="line"><span class="attr"> namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr"> type:</span> <span class="string">ExternalName</span></span><br><span class="line"><span class="attr"> externalName:</span> <span class="string">hub.atguigu.com</span></span><br></pre></td></tr></table></figure><p>当查询主机 my-service-1.defalut.svc.cluster.local ( SVC_NAME.NAMESPACE.svc.cluster.local ) 时，集群的DNS 服务将返回一个值 hub.atguigu.com 的 CNAME 记录。访问这个服务的工作方式和其他的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ex.yaml</span><br><span class="line">kubectl create -f ex.yaml</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/20.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig -t A my-service-1.default.svc.cluster.local @10.244.0.13</span><br></pre></td></tr></table></figure><p>这个IP是coredns地址，通过<strong>kubectl get pod -n kube-system -o wide</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/21.png" alt></p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>对传统的SVC来说仅支持四层</p><h2 id="资料信息"><a href="#资料信息" class="headerlink" title="资料信息"></a>资料信息</h2><p>Ingress-Nginx github 地址：<a href="https://github.com/kubernetes/ingress-nginx" rel="noopener" target="_blank">https://github.com/kubernetes/ingress-nginx</a><br>Ingress-Nginx 官方网站：<a href="https://kubernetes.github.io/ingress-nginx/" rel="noopener" target="_blank">https://kubernetes.github.io/ingress-nginx/</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/22.png" alt></p><p>其实对Nginx的暴露方案是Nodepod，内部的服务暴露给外部</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/23.png" alt></p><h2 id="部署Ingress"><a href="#部署Ingress" class="headerlink" title="部署Ingress"></a>部署Ingress</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mandatory.yaml</span><br><span class="line">kubectl apply -f service-nodeport.yaml</span><br></pre></td></tr></table></figure><p>进入官方下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/install-k8s/plugin/</span><br><span class="line">mkdir ingress</span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml</span><br><span class="line">cat mandatory.yaml | grep image</span><br><span class="line">得到xxx</span><br><span class="line">docker pull xxx</span><br></pre></td></tr></table></figure><p>第一步：三个节点，一主二子都要解压导入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ingree.contro.tar.gz <span class="comment">#解压</span></span><br><span class="line">docker load -i ingree.contro.tar  <span class="comment">#导入</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/24.png" alt></p><p>第二步：创建pod和svc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mandatory.yaml</span><br><span class="line">kubectl get pod -n ingress-nginx</span><br><span class="line">kubectl apply -f service-nodeport.yaml</span><br><span class="line">kubectl get svc -n ingress-nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/25.png" alt></p><h2 id="Ingress-HTTP代理访问"><a href="#Ingress-HTTP代理访问" class="headerlink" title="Ingress HTTP代理访问"></a>Ingress HTTP代理访问</h2><p>deployment、Service、Ingress Yaml 文件</p><p>现在想通过Nginx的Ingress方案暴露出去，实现域名访问的这么一个结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># vim ingress.http.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: wangyanglinux/myapp:v1</span><br><span class="line">          imagePullPolicy: IfNotPresent <span class="comment"># 如果有就不下载</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-svc</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector: <span class="comment"># 匹配，当name=nginx的时</span></span><br><span class="line">    name: nginx</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f ingress.http.yaml</span></span><br><span class="line">deployment.extensions/nginx-dm created</span><br><span class="line">service/nginx-svc created</span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get svc</span></span><br><span class="line">NAME             TYPE           CLUSTER-IP       EXTERNAL-IP          PORT(S)        AGE</span><br><span class="line">nginx-svc        ClusterIP      10.102.101.216   &lt;none&gt;               80/TCP         5s</span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># curl 10.102.101.216</span></span><br><span class="line">Hello MyApp | Version: v1 | &lt;a href=<span class="string">"hostname.html"</span>&gt;Pod Name&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/26.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim ingress1.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">   name: nginx-test</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: www1.atguigu.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: nginx-svc # 链接的是上面svc的名字</span><br><span class="line">            servicePort: 80</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl apply -f ingress1.yaml </span><br><span class="line">ingress.extensions/nginx-test created</span><br></pre></td></tr></table></figure><p>在W10下进行测试，修改本地host解析，C:\Windows\System32\drivers\etc\hosts<br><strong>10.0.100.10 www1.atguigu.com</strong><br>注意访问的端口不是80，而是ingress的端口32510</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n ingress-nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/27.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/28.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/29.png" alt></p><h2 id="基于Ingress实现虚拟主机方案"><a href="#基于Ingress实现虚拟主机方案" class="headerlink" title="基于Ingress实现虚拟主机方案"></a>基于Ingress实现虚拟主机方案</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/30.png" alt></p><p>第一个deployment和第一个svc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir ingress-vh</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cd ingress-vh/</span></span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># vim deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: wangyanglinux/myapp:v1</span><br><span class="line">          imagePullPolicy: IfNotPresent <span class="comment"># 如果有就不下载</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-1</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector: <span class="comment"># 匹配，当name=nginx的时</span></span><br><span class="line">    name: nginx</span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># kubectl apply -f deployment.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/31.png" alt></p><p>第二个deployment和第二个svc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># cp -a deployment.yaml deployment2.yaml</span></span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># vim deployment2.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx2</span><br><span class="line">          image: wangyanglinux/myapp:v2</span><br><span class="line">          imagePullPolicy: IfNotPresent <span class="comment"># 如果有就不下载</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-2</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector: <span class="comment"># 匹配，当name=nginx的时</span></span><br><span class="line">    name: nginx2</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># kubectl apply -f deployment2.yaml </span></span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># kubectl get svc</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/32.png" alt></p><p>写Ingress1、2规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># vim ingressrule.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">   name: ingress1</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: www1.atguigu.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: svc-1 <span class="comment"># 链接的是上面svc的名字</span></span><br><span class="line">            servicePort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">   name: ingress2</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: www2.atguigu.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: svc-2 <span class="comment"># 链接的是上面svc的名字</span></span><br><span class="line">            servicePort: 80</span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f ingressrule.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/33.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># kubectl get pod -n ingress-nginx</span></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-7995bd9c47-kzqh2   1/1     Running   0          83m</span><br><span class="line">[root@k8s-master01 ingress-vh]<span class="comment"># kubectl exec nginx-ingress-controller-7995bd9c47-kzqh2 -n ingress-nginx -it -- /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看发现，写入的Ingress规则会自己转换注入到配置文件</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/34.png" alt></p><p>查看Ingress暴露的端口<strong>kubectl get svc -n ingress-nginx</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/35.png" alt></p><p><strong>kubectl get ingress</strong> 查看规则</p><p>浏览器访问测试</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/36.png" alt></p><p>动态图效果演示虚拟主机</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/20201001194827956.gif" alt></p><h2 id="Ingress-HTTPS-代理访问"><a href="#Ingress-HTTPS-代理访问" class="headerlink" title="Ingress HTTPS 代理访问"></a>Ingress HTTPS 代理访问</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/37.png" alt></p><p>创建证书，以及 cert 存储方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class="string">"/CN=nginxsvc/O=nginxsvc"</span></span><br><span class="line">kubectl create secret tls tls-secret --key tls.key --cert tls.crt</span><br></pre></td></tr></table></figure><p>deployment、Service、Ingress Yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  tls:</span></span><br><span class="line"><span class="attr">    - hosts:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">foo.bar.com</span></span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">tls-secret</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">        - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">          backend:</span></span><br><span class="line"><span class="attr">            serviceName:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">            servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>操作过程<br>第一步：创建证书，以及cert存储方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir https</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cd https</span></span><br><span class="line">[root@k8s-master01 https]<span class="comment"># openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"</span></span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">....................................................................+++</span><br><span class="line">...............+++</span><br><span class="line">writing new private key to <span class="string">'tls.key'</span></span><br><span class="line">-----</span><br><span class="line">[root@k8s-master01 https]<span class="comment"># kubectl create secret tls tls-secret --key tls.key --cert tls.crt</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/38.png" alt></p><p>第二步：创建deployment、Service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 https]<span class="comment"># cp /root/ingress-vh/deployment.yaml .</span></span><br><span class="line">[root@k8s-master01 https]<span class="comment"># vim deployment.yaml </span></span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: deployment3</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx3</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: wangyanglinux/myapp:v3</span><br><span class="line">          imagePullPolicy: IfNotPresent <span class="comment"># 如果有就不下载</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: svc-3</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector: <span class="comment"># 匹配，当name=nginx的时</span></span><br><span class="line">    name: nginx3</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 https]<span class="comment"># kubectl apply -f deployment.yaml </span></span><br><span class="line">deployment.extensions/deployment3 created</span><br><span class="line">service/svc-3 created</span><br><span class="line">[root@k8s-master01 https]<span class="comment"># kubectl get svc</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/39.png" alt></p><p>第三步：创建Ingress Yaml文件<br>多了个tls</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 https]<span class="comment"># vim https.ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: https</span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">    - hosts:</span><br><span class="line">      - www3.atguigu.com</span><br><span class="line">      secretName: tls-secret</span><br><span class="line">  rules:</span><br><span class="line">    - host: www3.atguigu.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: svc-3</span><br><span class="line">            servicePort: 80</span><br><span class="line">[root@k8s-master01 https]<span class="comment"># kubectl apply -f https.ingress.yaml</span></span><br><span class="line">ingress.extensions/https created</span><br><span class="line">[root@k8s-master01 https]<span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.110.174.77   &lt;none&gt;        80:32510/TCP,443:31401/TCP   118m</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/41.png" alt></p><p>浏览器访问看效果<br><a href="https://www3.atguigu.com:31401" rel="noopener" target="_blank">https://www3.atguigu.com:31401</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/40.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/42.png" alt></p><h2 id="Nginx进行BasicAuth"><a href="#Nginx进行BasicAuth" class="headerlink" title="Nginx进行BasicAuth"></a>Nginx进行BasicAuth</h2><p>对于nginx来说采用的apache认证的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir basic-auth</span><br><span class="line"><span class="built_in">cd</span> basic-auth</span><br><span class="line">yum -y install httpd</span><br><span class="line">htpasswd -c auth foo <span class="comment"># 用户名为foo，文件为auth</span></span><br><span class="line">kubectl create secret generic basic-auth --from-file=auth</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/43.png" alt></p><p>vim ingress.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ingress-with-auth</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/auth-type:</span> <span class="string">basic</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/auth-secret:</span> <span class="string">basic-auth</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/auth-realm:</span> <span class="string">'Authentication Required - foo'</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">auth.atguigu.com</span>  <span class="comment"># 访问该域名进行认证方案</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">svc-1</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 basic-auth]<span class="comment"># kubectl apply -f ingress.yaml</span></span><br><span class="line">ingress.extensions/ingress-with-auth created</span><br></pre></td></tr></table></figure><p>访问的是80端口对应的32510端口</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/44.png" alt></p><p>浏览器访问</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/45.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/46.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/47.png" alt></p><h2 id="Nginx进行重写"><a href="#Nginx进行重写" class="headerlink" title="Nginx进行重写"></a>Nginx进行重写</h2><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/48.png" alt></p><p>实验操作<br>访问www4，跳到www3。 https访问</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/49.png" alt></p><p>vim re.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-test</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="comment"># 重定向到目标的url，注意这里是s</span></span><br><span class="line">    <span class="string">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="attr">https://www3.atguigu.com:31401/hostname.html</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr"> rules:</span></span><br><span class="line"><span class="attr"> - host:</span> <span class="string">re.atguigu.com</span></span><br><span class="line"><span class="attr">   http:</span></span><br><span class="line"><span class="attr">     paths:</span></span><br><span class="line"><span class="attr">     - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">       backend:</span></span><br><span class="line"><span class="attr">         serviceName:</span> <span class="string">svc-1</span> <span class="comment"># 这个svc也可不指定，因为他上面已跳转</span></span><br><span class="line"><span class="attr">         servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>ps:遇到粘贴错乱可以在set paste</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/50.png" alt></p><p>浏览器访问：<a href="http://re.atguigu.com:32510/" rel="noopener" target="_blank">http://re.atguigu.com:32510/</a><br>跳转到 <a href="https://www3.atguigu.com:31401/hostname.html" rel="noopener" target="_blank">https://www3.atguigu.com:31401/hostname.html</a></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Service-的概念&quot;&gt;&lt;a href=&quot;#Service-的概念&quot; class=&quot;headerlink&quot; title=&quot;Service 的概念&quot;&gt;&lt;/a&gt;Service 的概念&lt;/h1&gt;&lt;p&gt;Kubernetes Service定义了这样一种抽象：一个Pod的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组Pod能够被Service访问到，通常是通过Label Selector&lt;/p&gt;
&lt;p&gt;通俗的讲：SVC负责检测Pod的状态信息，不会因pod的改动IP地址改变（因为关注的是标签），导致Nginx负载均衡影响&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/a0eec1b7/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Service能够提供负载均衡的能力，但是在使用上有以下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只提供 4 层负载均衡能力（IP+端口），而没有 7 层功能（主机名和域名），但有时我们可能需要更多的匹配规则来转发请求，这点上 4 层负载均衡是不支持的&lt;/li&gt;
&lt;li&gt;后续可以通过Ingress方案，添加7层的能力&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="容器编排" scheme="https://wandouduoduo.github.io/categories/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
      <category term="K8s" scheme="https://wandouduoduo.github.io/categories/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/K8s/"/>
    
    
      <category term="K8s" scheme="https://wandouduoduo.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>堡垒机jumpserver如何添加和管理windows资产</title>
    <link href="https://wandouduoduo.github.io/articles/5b5f30b5.html"/>
    <id>https://wandouduoduo.github.io/articles/5b5f30b5.html</id>
    <published>2022-07-07T09:19:00.000Z</published>
    <updated>2022-07-07T09:40:54.371Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>我们在运维架构建设中，资产管理是核心环节。所有环节都需要围绕这个核心来做，包括但不限于资产监控，资产授权，资产规划和部署应用，资源费用核算，资产盘点，资产回收等等。</p><p>而jumpserver作为一款安全级别在5A的开源堡垒机，受到了所有互联网大厂的青睐和日常使用。我们这些运维、开发或架构的技术型日常工作都是在类unix环境，通常是linux环境，和服务器打交道，用命令或编写脚本来高效的维护和操作处理。所以默认堡垒机对linux的支持是必须的也是常规的，堡垒机对linux资产管理参考官网文档，这里就不再赘述了。但有时我们的业务需要在windows  server上来操作，但官方文档也没有详细说明。本文重点介绍堡垒机jumpserver要如何去管理windows  server。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/1.jpg" alt></p><a id="more"></a><h3 id="添加windows-server系统普通用户"><a href="#添加windows-server系统普通用户" class="headerlink" title="添加windows  server系统普通用户"></a>添加windows  server系统普通用户</h3><p>添加windows主机那个特权用户要怎么写呢？是不是有这样的困惑，只需普通用户就可以。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/2.png" alt></p><p><strong>操作步骤</strong>：系统用户–&gt;普通用户–&gt;创建RDP–&gt;填写用户信息提交。</p><p>先添加administrator用户，该用户要和登入windows的远程用户账户一致。</p><h3 id="添加windows-server资产"><a href="#添加windows-server资产" class="headerlink" title="添加windows  server资产"></a>添加windows  server资产</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/3.png" alt></p><p><strong>操作步骤</strong>：资产列表–&gt;创建–&gt;填写windows  server资产信息提交。</p><p>注意，这里有几点要说明下：</p><p>1，我使用的是目前最新版（v2.22.1）特权用户没有<em>号，就是非必填项，所以可以不写，如果使用版本不一样带</em>号为必填项，可以随便选个，虽然特权用户在windows上没用。</p><p>2，平台选windows，协议组选rdp。其他和添加linux一样。</p><h3 id="资产授权"><a href="#资产授权" class="headerlink" title="资产授权"></a>资产授权</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/4.png" alt></p><p><strong>操作步骤</strong>：资产授权–&gt;填写授权信息（和linux一致）–&gt;系统用户选择要选择创建windows  server的普通用户（登录windows server时通过该用户远程进行操作）。</p><h3 id="终端检验查看"><a href="#终端检验查看" class="headerlink" title="终端检验查看"></a>终端检验查看</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/5.png" alt></p><p>到终端列表中，选择该资产，就会用选择的windows  server系统普通用户登录了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>堡垒机jumpserver添加windows  server管理不需要纠结特权用户，只需建立普通系统用户即可，但对该普通用户是有要求的，该普通系统用户必须是可以远程登录windows  server的用户。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在运维架构建设中，资产管理是核心环节。所有环节都需要围绕这个核心来做，包括但不限于资产监控，资产授权，资产规划和部署应用，资源费用核算，资产盘点，资产回收等等。&lt;/p&gt;
&lt;p&gt;而jumpserver作为一款安全级别在5A的开源堡垒机，受到了所有互联网大厂的青睐和日常使用。我们这些运维、开发或架构的技术型日常工作都是在类unix环境，通常是linux环境，和服务器打交道，用命令或编写脚本来高效的维护和操作处理。所以默认堡垒机对linux的支持是必须的也是常规的，堡垒机对linux资产管理参考官网文档，这里就不再赘述了。但有时我们的业务需要在windows  server上来操作，但官方文档也没有详细说明。本文重点介绍堡垒机jumpserver要如何去管理windows  server。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/5b5f30b5/1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Jumperserver" scheme="https://wandouduoduo.github.io/tags/Jumperserver/"/>
    
  </entry>
  
  <entry>
    <title>python项目+uwsgi+nginx+supervisor部署配置详解</title>
    <link href="https://wandouduoduo.github.io/articles/3b8bdb1e.html"/>
    <id>https://wandouduoduo.github.io/articles/3b8bdb1e.html</id>
    <published>2022-03-15T09:18:04.000Z</published>
    <updated>2022-03-15T10:58:50.875Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>本文详细介绍了python项目（flask或django等）在部署到linux服务器上后，uwsgi常用配置和nginxd对应通信配置，以及supervisor常用配置详解。本篇为高级篇，至于怎么安装请参考博客中其他文档，谢谢。</p><a id="more"></a><h2 id="uwsgi常用配置"><a href="#uwsgi常用配置" class="headerlink" title="uwsgi常用配置"></a>uwsgi常用配置</h2><p>作为模板uwsgi.ini，当然也可以根据uwsgi –help来查看或自定义。<a href="https://uwsgi-docs.readthedocs.io/en/latest/Options.html" rel="noopener" target="_blank">官方参数详解</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">master = <span class="literal">true</span> </span><br><span class="line"><span class="comment">#启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。</span></span><br><span class="line"></span><br><span class="line">project=tools  </span><br><span class="line"><span class="comment"># 项目名</span></span><br><span class="line"></span><br><span class="line">base = /usr/<span class="built_in">local</span>/sun/</span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line"></span><br><span class="line">home = %(base)/Env/%(project) </span><br><span class="line"><span class="comment"># 设置项目虚拟环境,Docker部署时不需要,用virtualenv = %(base)/Env/%(project)也是可以的。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chdir</span>=%(base)/%(project) </span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"></span><br><span class="line">module=%(project).wsgi:app</span><br><span class="line"><span class="comment"># wsgi文件位置</span></span><br><span class="line"></span><br><span class="line">py-autoreload=1  </span><br><span class="line"><span class="comment">#监控python模块mtime来触发重载，热加载 (只在开发时使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#uwsgi启动用户名和用户组</span></span><br><span class="line">uid = www</span><br><span class="line">gid = www</span><br><span class="line"></span><br><span class="line">lazy-apps=<span class="literal">true</span>  </span><br><span class="line"><span class="comment">#在每个worker而不是master中加载应用</span></span><br><span class="line"></span><br><span class="line">socket = %(base)/%(project)/%(project).sock </span><br><span class="line"><span class="comment">#指定socket文件，也可以指定为127.0.0.1:9000，这样就会监听到网络套接字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socket权限设置</span></span><br><span class="line">chown-socket=www</span><br><span class="line">chmod-socket=664</span><br><span class="line"></span><br><span class="line">processes = 2 <span class="comment">#启动2个工作进程，生成指定数目的worker/进程</span></span><br><span class="line"></span><br><span class="line">workers = 4 <span class="comment">#启动4个工人</span></span><br><span class="line"></span><br><span class="line">threads=4 <span class="comment">#启动4个线程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enable</span>-threads=True <span class="comment">#开启多线程模式</span></span><br><span class="line"></span><br><span class="line">buffer-size = 32768 <span class="comment">#设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k。</span></span><br><span class="line"></span><br><span class="line">daemonize = %(base)/%(project)/logs/myapp_uwsgi.log </span><br><span class="line"><span class="comment"># 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>-maxsize = 5000000 <span class="comment">#设置最大日志文件大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disable</span>-logging = <span class="literal">true</span> <span class="comment">#禁用请求日志记录</span></span><br><span class="line"></span><br><span class="line">vacuum = <span class="literal">true</span> <span class="comment">#当服务器退出的时候自动删除unix socket文件和pid文件。</span></span><br><span class="line"></span><br><span class="line">listen = 120 <span class="comment">#设置socket的监听队列大小（默认：100）</span></span><br><span class="line"></span><br><span class="line">pidfile = %(base)/%(project)/uwsgi.pid <span class="comment">#指定pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enable</span>-threads = <span class="literal">true</span> </span><br><span class="line"><span class="comment">#允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程</span></span><br><span class="line"></span><br><span class="line">reload-mercy = 8 </span><br><span class="line"><span class="comment">#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）</span></span><br><span class="line"></span><br><span class="line">max-requests = 5000 </span><br><span class="line"><span class="comment">#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">limit</span>-as = 256 </span><br><span class="line"><span class="comment">#通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误（当产生内存错误时，可能是内存使用数设置不足）</span></span><br><span class="line"></span><br><span class="line">harakiri = 60 </span><br><span class="line"><span class="comment">#一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）</span></span><br></pre></td></tr></table></figure><h2 id="配置wsgi启动文件的3种方式"><a href="#配置wsgi启动文件的3种方式" class="headerlink" title="配置wsgi启动文件的3种方式"></a>配置wsgi启动文件的3种方式</h2><h3 id="第一种：wsgi-file和callable"><a href="#第一种：wsgi-file和callable" class="headerlink" title="第一种：wsgi-file和callable"></a>第一种：wsgi-file和callable</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定加载的WSGI文件</span></span><br><span class="line">wsgi-file=manager.py</span><br><span class="line"><span class="comment"># 指定uWSGI加载的模块中哪个变量将被调用</span></span><br><span class="line">callable=app</span><br></pre></td></tr></table></figure><h3 id="第二种：模块：调用对象"><a href="#第二种：模块：调用对象" class="headerlink" title="第二种：模块：调用对象"></a>第二种：模块：调用对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块名:可调用对象app</span></span><br><span class="line">module=manager:app</span><br></pre></td></tr></table></figure><h3 id="第三种：module和callable"><a href="#第三种：module和callable" class="headerlink" title="第三种：module和callable"></a>第三种：module和callable</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module=manager</span><br><span class="line">callable=app</span><br></pre></td></tr></table></figure><h2 id="uWSGI和Nginx-3种通信方式"><a href="#uWSGI和Nginx-3种通信方式" class="headerlink" title="uWSGI和Nginx 3种通信方式"></a>uWSGI和Nginx 3种通信方式</h2><p>其中上面配置有几处，是可以选择的。</p><p>uWSGI和Nginx之间有3种通信方式,: unix socket，TCP socket和http。而Nginx的配置必须与uwsgi配置保持一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下uwsgi与nginx通信手段3选一即可</span></span><br><span class="line"><span class="comment"># 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形</span></span><br><span class="line"><span class="comment"># Nginx配置中uwsgi_pass应指向同一socket文件</span></span><br><span class="line">socket=%(base)/%(project)/%(project).sock</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 选项2，使用TCP socket与nginx通信</span></span><br><span class="line"><span class="comment"># Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口</span></span><br><span class="line"><span class="comment"># socket=0.0.0.0:8000 或则 socket=:8000</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 选项3，使用http协议与nginx通信</span></span><br><span class="line"><span class="comment"># Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口</span></span><br><span class="line"><span class="comment"># http=0.0.0.0:8000</span></span><br></pre></td></tr></table></figure><h3 id="选项1：本地unix-socket通信"><a href="#选项1：本地unix-socket通信" class="headerlink" title="选项1：本地unix socket通信"></a>选项1：本地unix socket通信</h3><p>如果你的nginx与uwsgi在同一台服务器上，优先使用本地机器的unix socket进行通信，这样速度更快。</p><p>即uwsgi配置了选项1，此时nginx的配置文件如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;     </span><br><span class="line">    include /etc/nginx/uwsgi_params;</span><br><span class="line">    uwsgi_pass unix:/run/uwsgi/project.sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选项2：异地tcp-socket通信"><a href="#选项2：异地tcp-socket通信" class="headerlink" title="选项2：异地tcp  socket通信"></a>选项2：异地tcp  socket通信</h3><p>如果nginx与uwsgi不在同一台服务器上，可以使用选项2和3。这里使用TCP socket通信，nginx应如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;     </span><br><span class="line">    include /etc/nginx/uwsgi_params;</span><br><span class="line">    uwsgi_pass uWSGI_SERVER_IP:8000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选项3：异地http通信"><a href="#选项3：异地http通信" class="headerlink" title="选项3：异地http通信"></a>选项3：异地http通信</h3><p>同样的，如果nginx与uwsgi不在同一台服务器上，用http协议进行通信，nginx配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;     </span><br><span class="line">    <span class="comment"># 注意：proxy_pass后面http必不可少哦！</span></span><br><span class="line">    proxy_pass http://uWSGI_SERVER_IP:8000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#uwsgi --ini uwsgi.ini             # 启动</span></span><br><span class="line"><span class="comment">#uwsgi --reload uwsgi.pid          # 重启</span></span><br><span class="line"><span class="comment">#uwsgi --stop uwsgi.pid            # 关闭</span></span><br></pre></td></tr></table></figure><h2 id="Supervisor常用配置"><a href="#Supervisor常用配置" class="headerlink" title="Supervisor常用配置"></a>Supervisor常用配置</h2><p>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台守护进程daemon，并监控进程状态，异常退出时能自动重启。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>通过这种方式安装后，会自动设置为开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Ubuntu：</span></span><br><span class="line">apt-get install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment">#centos</span></span><br><span class="line">yum install epel-release</span><br><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure></li><li><p>也可以通过 <code>pip install supervisor</code> 进行安装，但是需要手动启动，然后设置为开机启动（不推荐这种安装方式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start supervisord.service     <span class="comment">#启动supervisor并加载默认配置文件</span></span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord.service    <span class="comment">#将supervisor加入开机启动项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成默认配置</span></span><br><span class="line">mkdir -m 755 -p /etc/supervisor/</span><br><span class="line">echo_supervisord_config &gt; supervisord.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="Supervisor-配置"><a href="#Supervisor-配置" class="headerlink" title="Supervisor 配置"></a>Supervisor 配置</h2><p>Supervisor 是一个 C/S 模型的程序，<code>supervisord</code> 是 server 端，<code>supervisorctl</code> 是 client 端。</p><h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>下面介绍 supervisord 配置方法。supervisord 的配置文件默认位于 <code>/etc/supervisord.conf</code>，内容如下（<code>;</code>后面为注释）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">chmod=0700      ; sockef file mode (default 0700) socket 文件的 mode，默认是 0700</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid) pid 文件</span><br><span class="line">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line"></span><br><span class="line">; 在增添需要管理的进程的配置文件时，推荐写到 `/etc/supervisor/conf.d/` 目录下，所以 `include` 项，就需要像如下配置。</span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf ; 引入 `/etc/supervisor/conf.d/` 下的 `.conf` 文件</span><br></pre></td></tr></table></figure><h3 id="program-配置"><a href="#program-配置" class="headerlink" title="program 配置"></a>program 配置</h3><p>program 的配置文件就写在，supervisord 配置中 <code>include</code> 项的路径下：<code>/etc/supervisor/conf.d/</code>，然后 program 的配置文件命名规则推荐：app_name.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[program:uwsgi]</span><br><span class="line">command=/home/python/.virtualenvs/deploy/bin/uwsgi --ini /home/python/Desktop/flask_deploy/uwsgi.ini</span><br><span class="line">user=root</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">redirect_stderr=True  </span><br><span class="line">stdout_logfile=/home/python/Desktop/flask_deploy/log/uwsgi_supervisor.log</span><br><span class="line">stderr_logfile=/home/python/Desktop/flask_deploy/log/uwsgi_supervisor_err.log</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">- [program:module_name]表示supervisor的一个模块名  </span><br><span class="line">- command 程序启动命令如: /usr/bin/python - app.py  </span><br><span class="line">- user 进程运行的用户身份</span><br><span class="line">- autostart=true  跟随Supervisor一起启动</span><br><span class="line">- autorestart=true 挂掉之后自动重启</span><br><span class="line">- 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">- stderr_logfile, stdout_logfile 标准输出，错误日志文件</span><br></pre></td></tr></table></figure><h3 id="supervisorctl-操作"><a href="#supervisorctl-操作" class="headerlink" title="supervisorctl 操作"></a>supervisorctl 操作</h3><p>supervisorctl 是 supervisord 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：</p><p>输入命令 <code>supervisorctl</code> 进入 supervisorctl 的 shell 交互界面（还是纯命令行😓），就可以在下面输入命令了。：</p><ul><li>help # 查看帮助</li><li>status # 查看程序状态</li><li>stop program_name # 关闭 指定的程序</li><li>start program_name # 启动 指定的程序</li><li>restart program_name # 重启 指定的程序</li><li>tail -f program_name # 查看 该程序的日志</li><li>update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)</li></ul><p>也可以直接通过 shell 命令操作：</p><ul><li>supervisorctl status</li><li>supervisorctl update</li></ul><p>启动supervisor之后就可以通过<code>ip:9001</code>访问supervisor的管理页面，前提是配置中supervisorctl 配置这种http的访问方式，而不是像上面用socket套接字。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/3b8bdb1e/1.jpg" alt="img"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细介绍了python项目（flask或django等）在部署到linux服务器上后，uwsgi常用配置和nginxd对应通信配置，以及supervisor常用配置详解。本篇为高级篇，至于怎么安装请参考博客中其他文档，谢谢。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务部署" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/tags/Nginx/"/>
    
      <category term="Python" scheme="https://wandouduoduo.github.io/tags/Python/"/>
    
      <category term="Supervisor" scheme="https://wandouduoduo.github.io/tags/Supervisor/"/>
    
      <category term="Uwsgi" scheme="https://wandouduoduo.github.io/tags/Uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统中信号篇</title>
    <link href="https://wandouduoduo.github.io/articles/8a41de2a.html"/>
    <id>https://wandouduoduo.github.io/articles/8a41de2a.html</id>
    <published>2022-01-21T10:48:45.000Z</published>
    <updated>2022-01-21T11:12:59.337Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Linux 的命令行里面有用来停止正在运行的进程的所有所需工具。这里将为您讲述细节。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/1.jpg" alt></p><p><strong>想像一下</strong>：你打开了一个程序（可能来自于你的桌面菜单或者命令行），然后开始使用这个程序，没想到程序会锁死、停止运行、或者意外死机。你尝试再次运行该程序，但是它反馈说原来的进程没有完全关闭。</p><p><strong>你该怎么办</strong>？你要结束进程。但该如何做？不管你信与不信，最好的解决方法大都在命令行里。值得庆幸的是， Linux 有供用户杀死错误的进程的每个必要的工具，然而，你在执行杀死进程的命令之前，你首先需要知道进程是什么。该如何处理这一类的任务。一旦你能够掌握这种工具，它实际是十分简单的……</p><p>我来概述的步骤是每个 Linux 发行版都能用的，不论是桌面版还是服务器版。我将限定只使用命令行，请打开你的终端开始输入命令吧。</p><a id="more"></a><h2 id="定位进程"><a href="#定位进程" class="headerlink" title="定位进程"></a>定位进程</h2><p>杀死一个没有响应的进程的第一个步骤是定位这个进程。我用来定位进程的命令有两个：top 和 ps 命令。top 是每个系统管理员都知道的工具，用 top 命令，你能够知道到所有当前正在运行的进程有哪些。在命令行里，输入 top 命令能够就看到你正在运行的程序进程（图1）</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/2.jpg" alt></p><p>从显示的列表中你能够看到相当重要的信息，举个例子，Chrome 浏览器反映迟钝，依据我们的 top 命令显示，我们能够辨别的有四个 Chrome 浏览器的进程在运行，进程的 pid 号分别是 3827、3919、10764 和 11679。这个信息是重要的，可以用一个特殊的方法来结束进程。</p><p>尽管 top 命令很是方便，但也不是得到你所要信息最有效的方法。 你知道你要杀死的 Chrome 进程是那个，并且你也不想看 top 命令所显示的实时信息。 鉴于此，你能够使用 ps 命令然后用 grep 命令来过滤出输出结果。这个 ps 命令能够显示出当前进程列表的快照，然后用 grep 命令输出匹配的样式。我们通过 grep 命令过滤 ps 命令的输出的理由很简单：如果你只输入 ps 命令，你将会得到当前所有进程的列表快照，而我们需要的是列出 Chrome 浏览器进程相关的。所以这个命令是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep chrome</span><br><span class="line"></span><br><span class="line">这里 aux 选项如下所示：</span><br><span class="line"></span><br><span class="line">a = 显示所有用户的进程</span><br><span class="line">u = 显示进程的用户和拥有者</span><br><span class="line">x = 也显示不依附于终端的进程</span><br></pre></td></tr></table></figure><p>当你搜索图形化程序的信息时，这个 x 参数是很重要的。</p><p>当你输入以上命令的时候，你将会得到比图 2 更多的信息，而且它有时用起来比 top 命令更有效。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/3.jpg" alt></p><h2 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h2><p>现在我们开始结束进程的任务。我们有两种可以帮我们杀死错误的进程的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进程的名字</span><br><span class="line">进程的 ID （PID）</span><br></pre></td></tr></table></figure><p>你用哪一个将会决定终端命令如何使用，通常有两个命令来结束进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> - 通过进程 ID 来结束进程</span><br><span class="line">killall - 通过进程名字来结束进程</span><br></pre></td></tr></table></figure><p>有两个不同的信号能够发送给这两个结束进程的命令。你发送的信号决定着你想要从结束进程命令中得到的结果。举个例子，你可以发送 HUP（挂起）信号给结束进程的命令，命令实际上将会重启这个进程。当你需要立即重启一个进程（比如就守护进程来说），这是一个明智的选择。你通过输入 kill -l 可以得到所有信号的列表，你将会发现大量的信号。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/4.jpg" alt></p><p>最经常使用的结束进程的信号是：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/5.png" alt="1642762726720"><br>好的是，你能用信号值来代替信号名字。所以你没有必要来记住所有各种各样的信号名字。</p><p>所以，让我们现在用 kill 命令来杀死 Chrome 浏览器的进程。这个命令的结构是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> SIGNAL PID</span><br></pre></td></tr></table></figure><p>这里 SIGNAL 是要发送的信号，PID 是被杀死的进程的 ID。我们已经知道，来自我们的 ps 命令显示我们想要结束的进程 ID 号是 3827、3919、10764 和 11679。所以要发送结束进程信号，我们输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 3827</span><br><span class="line"><span class="built_in">kill</span> -9 3919</span><br><span class="line"><span class="built_in">kill</span> -9 10764</span><br><span class="line"><span class="built_in">kill</span> -9 11679</span><br></pre></td></tr></table></figure><p>一旦我们输入了以上命令，Chrome 浏览器的所有进程将会成功被杀死。</p><p>我们有更简单的方法！如果我们已经知道我们想要杀死的那个进程的名字，我们能够利用 killall 命令发送同样的信号，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 chrome</span><br></pre></td></tr></table></figure><p>附带说明的是，上边这个命令可能不能捕捉到所有正在运行的 Chrome 进程。如果，运行了上边这个命令之后，你输入 ps aux | grep chrome 命令过滤一下，看到剩下正在运行的 Chrome 进程有那些，最好的办法还是回到 kIll 命令通过进程 ID 来发送信号值 9 来结束这个进程。</p><h2 id="结束进程很容易"><a href="#结束进程很容易" class="headerlink" title="结束进程很容易"></a>结束进程很容易</h2><p>正如你看到的，杀死错误的进程并没有你原本想的那样有挑战性。当我让一个顽固的进程结束的时候，我趋向于用 killall命令来作为有效的方法来终止，然而，当我让一个真正的活跃的进程结束的时候，kill命令是一个好的方法。</p><h2 id="精髓补充"><a href="#精髓补充" class="headerlink" title="精髓补充"></a>精髓补充</h2><p>根据上面的kill停止，大家基本上了解了信号的概念，那么这些信号是怎么产生的呢？每个信号有有什么用呢？这里详细和大家聊聊。</p><p>linux中信号，编号为1 ~ 31的信号为传统UNIX支持的信号，是<strong>不可靠信号(非实时的)</strong>，编号为32 ~ 63的信号是后来扩充的，称做<strong>可靠信号(实时信号)</strong>。</p><p>不可靠信号和可靠信号的<strong>区别</strong>在于<strong>前者不支持排队，可能会造成信号丢失，而后者不会</strong>。</p><p>下面我们对编号小于SIGRTMIN的信号进行讨论。 </p><p>1) <strong>SIGHUP</strong>   该信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。 当登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。不过可以捕获这个信号，比如wget能捕获SIGHUP信号，并忽略它，这样就算退出了Linux登录，wget也能继续下载。 此外，对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。 </p><p>2) <strong>SIGINT</strong>    程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。 </p><p>3) <strong>SIGQUIT</strong> 和SIGINT类似, 但由QUIT字符(通常是Ctrl-)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。 </p><p>4) <strong>SIGILL</strong> 执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。 </p><p>5) <strong>SIGTRAP</strong> 由断点指令或其它trap指令产生. 由debugger使用。 </p><p>6) <strong>SIGABRT</strong> 调用abort函数生成的信号。 </p><p>7) <strong>SIGBUS</strong> 非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。 </p><p>8) <strong>SIGFPE</strong> 在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。 </p><p>9) <strong>SIGKILL</strong> 用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。 </p><p>10) <strong>SIGUSR1</strong> 留给用户使用 </p><p>11) <strong>SIGSEGV</strong> 试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据. </p><p>12) <strong>SIGUSR2</strong> 留给用户使用 </p><p>13) <strong>SIGPIPE</strong> 管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。 </p><p>14) <strong>SIGALRM</strong> 时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号. </p><p>15) <strong>SIGTERM</strong> 程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。 </p><p>17) <strong>SIGCHLD</strong> 子进程结束时, 父进程会收到这个信号。 如果父进程没有处理这个信号，也没有等待(wait)子进程，子进程虽然终止，但是还会在内核进程表中占有表项，这时的子进程称为僵尸进程。这种情况我们应该避免(父进程或者忽略SIGCHILD信号，或者捕捉它，或者wait它派生的子进程，或者父进程先终止，这时子进程的终止自动由init进程来接管)。 </p><p>18) <strong>SIGCONT</strong> 让一个停止(stopped)的进程继续执行. 本信号不能被阻塞. 可以用一个handler来让程序在由stopped状态变为继续执行时完成特定的工作. 例如, 重新显示提示符 </p><p>19) <strong>SIGSTOP</strong> 停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束, 只是暂停执行. 本信号不能被阻塞, 处理或忽略. </p><p>20) <strong>SIGTSTP</strong> 停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是Ctrl-Z)发出这个信号 </p><p>21) <strong>SIGTTIN</strong> 当后台作业要从用户终端读数据时, 该作业中的所有进程会收到SIGTTIN信号. 缺省时这些进程会停止执行. </p><p>22) <strong>SIGTTOU</strong> 类似于SIGTTIN, 但在写终端(或修改终端模式)时收到. </p><p>23) <strong>SIGURG</strong> 有”紧急”数据或out-of-band数据到达socket时产生. </p><p>24) <strong>SIGXCPU</strong> 超过CPU时间资源限制. 这个限制可以由getrlimit/setrlimit来读取/改变。 </p><p>25) <strong>SIGXFSZ</strong> 当进程企图扩大文件以至于超过文件大小资源限制。 </p><p>26) <strong>SIGVTALRM</strong> 虚拟时钟信号. 类似于SIGALRM, 但是计算的是该进程占用的CPU时间. </p><p>27) <strong>SIGPROF</strong> 类似于SIGALRM/SIGVTALRM, 但包括该进程用的CPU时间以及系统调用的时间. </p><p>28) <strong>SIGWINCH</strong> 窗口大小改变时发出. </p><p>29) <strong>SIGIO</strong> 文件描述符准备就绪, 可以开始进行输入/输出操作. </p><p>30) <strong>SIGPWR</strong> Power failure </p><p>31) <strong>SIGSYS</strong> 非法的系统调用。 </p><p>在以上列出的信号中</p><p>程序不可捕获、阻塞或忽略的信号有：SIGKILL,SIGSTOP </p><p>不能恢复至默认动作的信号有：SIGILL,SIGTRAP </p><p>默认会导致进程流产的信号有：SIGABRT,SIGBUS,SIGFPE,SIGILL,SIGIOT,SIGQUIT,SIGSEGV,SIGTRAP,SIGXCPU,SIGXFSZ </p><p>默认会导致进程退出的信号有：SIGALRM,SIGHUP,SIGINT,SIGKILL,SIGPIPE,SIGPOLL,SIGPROF,SIGSYS,SIGTERM,SIGUSR1,SIGUSR2,SIGVTALRM 默认会导致进程停止的信号有：SIGSTOP,SIGTSTP,SIGTTIN,SIGTTOU </p><p>默认进程忽略的信号有：SIGCHLD,SIGPWR,SIGURG,SIGWINCH </p><p>此外，SIGIO在SVR4是退出，在4.3BSD中是忽略；SIGCONT在进程挂起时是继续，否则是忽略，不能被阻塞</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 的命令行里面有用来停止正在运行的进程的所有所需工具。这里将为您讲述细节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8a41de2a/1.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想像一下&lt;/strong&gt;：你打开了一个程序（可能来自于你的桌面菜单或者命令行），然后开始使用这个程序，没想到程序会锁死、停止运行、或者意外死机。你尝试再次运行该程序，但是它反馈说原来的进程没有完全关闭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你该怎么办&lt;/strong&gt;？你要结束进程。但该如何做？不管你信与不信，最好的解决方法大都在命令行里。值得庆幸的是， Linux 有供用户杀死错误的进程的每个必要的工具，然而，你在执行杀死进程的命令之前，你首先需要知道进程是什么。该如何处理这一类的任务。一旦你能够掌握这种工具，它实际是十分简单的……&lt;/p&gt;
&lt;p&gt;我来概述的步骤是每个 Linux 发行版都能用的，不论是桌面版还是服务器版。我将限定只使用命令行，请打开你的终端开始输入命令吧。&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux禁止普通用户su至root的解决方法</title>
    <link href="https://wandouduoduo.github.io/articles/952bb64d.html"/>
    <id>https://wandouduoduo.github.io/articles/952bb64d.html</id>
    <published>2021-08-31T09:38:53.000Z</published>
    <updated>2021-08-31T09:47:40.189Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>很多朋友不清楚linux如何禁止普通用户su到root，这里需要修改两个配置文件，具体详细配置大家通过本文了解下吧</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为禁止普通用户su至root，需要分别修改/etc/pam.d/su和/etc/login.defs两个配置文件。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>(1)<strong>去除</strong>/etc/pam.d/su文件中如下行的注释：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#auth      required    pam_wheel.so use_uid</span></span><br></pre></td></tr></table></figure><p>(2)在／etc/login.defs文件中加入如下配置项：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SU_WHEEL_ONLY  yes</span><br></pre></td></tr></table></figure><p>经过上述配置后，普通用户将被禁止su至root，如果希望指定普通用户su至root，可以执行如下命令将该用户添加至wheel组中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G wheel username</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@titan ~]<span class="comment"># id apple</span></span><br><span class="line">uid=1001(apple) gid=1001(fruit) 组=1001(fruit),10(wheel)</span><br><span class="line">[root@titan ~]<span class="comment"># id banana</span></span><br><span class="line">uid=1002(banana) gid=1001(fruit) 组=1001(fruit)</span><br></pre></td></tr></table></figure><p>验证apple</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[apple@titan ~]$ su - root</span><br><span class="line">[root@titan ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>验证banana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[banana@titan ~]$ su - root</span><br><span class="line">su: 拒绝权限</span><br><span class="line">[banana@titan ~]$</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上所述是站长给大家介绍的Linux禁止普通用户su至root的解决方法，希望对大家有所帮助，如果大家有任何疑问请给我留言，站长会及时回复大家的。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多朋友不清楚linux如何禁止普通用户su到root，这里需要修改两个配置文件，具体详细配置大家通过本文了解下吧&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统卸载小技巧解决大问题</title>
    <link href="https://wandouduoduo.github.io/articles/fe844df6.html"/>
    <id>https://wandouduoduo.github.io/articles/fe844df6.html</id>
    <published>2021-07-12T07:27:57.000Z</published>
    <updated>2021-08-31T09:47:40.187Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>现在系统功能越来越丰富，那么响应的开发资源需要的越来越多，文件存储也越来越必要。无论是你用nfs、glusterfs等等，都需要在linux服务器中设置挂载点并执行挂载后才可使用，但如果fs文件系统有调整，那么可能就需要卸载umount,重新挂载，但是你真的可以顺顺利利的卸载吗？不见得，因为可能有应用在占用该磁盘或者系统在fstab中写入了磁盘自动挂载，本文就详细给你介绍个小技巧，帮你解决该烦恼。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fe844df6/1.png" alt="1626075503955"></p><a id="more"></a><h2 id="场景一：磁盘正有程序占用"><a href="#场景一：磁盘正有程序占用" class="headerlink" title="场景一：磁盘正有程序占用"></a>场景一：磁盘正有程序占用</h2><p>但出现这种情况时，可以根据提示用lsof 或fuser来判断有哪些进程正在占用该磁盘，停掉改进程，重新挂载后再重新启动进程应用即可。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fe844df6/2.png" alt></p><p>可以根据图上看到，找到了进程16011占用了该文件系统，并可以准确看到该进程是哪些应用，并占用了哪些文件等信息。</p><p><strong>科普</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -m -v /mnt</span><br></pre></td></tr></table></figure><p>可以查看到当前占用/mnt目录的进程号，然后用kill杀死它。</p><p>也可以直接杀死这个进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -m -k /mnt</span><br></pre></td></tr></table></figure><p>如果你不是很明确是否要杀死所有霸占设备的程序，你还可以加一个 -i 参数，这样每杀死一个程序前，都会询问,加参数-i </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -m -v -i -k /mnt</span><br></pre></td></tr></table></figure><p>-m :  表明指定的路径是一个挂载点显示所有使用指定文件系统的进程。后面可以跟挂载点或dev设备</p><p>-v :    给出详细的输出。可以给出了占用磁盘程序的详细信息，如进程号等。</p><h2 id="场景二：内核占用"><a href="#场景二：内核占用" class="headerlink" title="场景二：内核占用"></a>场景二：内核占用</h2><p>应用程序占用可以根据场景一操作拿到进程id，你就可以对它为所欲为了。但是场景一图中有一个隐藏的信息，可能有同学已经发现</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fe844df6/3.png" alt></p><p>PID:  kernel这个是内核占用着该磁盘，要怎么去杀掉呢。这又是怎么造成的呢？</p><p>出现这种情况是因为在linux系统fstab中添加的文件磁盘，那么在系统启动时，内核自动挂载该磁盘，所有就是内核进程。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fe844df6/4.png" alt></p><p>那有办法解决吗？答案是肯定的，要不就不会有本教程了。</p><p><strong>方法一</strong></p><p>既然内核占有，那么先把fstab中fs挂载点删掉，并重启服务器，那么重启时内核重新加载，就不会再占用了。</p><p>但是对于生产环境，业务应用在线上跑，有没有不用重启，还能解决挂载问题的呢？</p><p><strong>方法二</strong></p><p>lazy umount法，使用如下命令和参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount -l /mnt</span><br></pre></td></tr></table></figure><p>–l ：并不是马上umount，而是在该目录空闲后再umount。</p><p><strong>请注意，该方法并不是完全安全的，它主要完成如下操作：</strong></p><p>1，立即从目录结构中实现卸载，即新进程将无法通过/media/disk访问,该磁盘。</p><p>2，正在访问该文件系统的程序不受影响。即正在操作/media/disk的进程不会被打断，且仍可以读写磁盘中的所有文件。如果所有进程对/media/disk的操作都执行完，那么才真正地umount。</p><p>由此可知，lazy umount并没有真正实现umount，仅用于特殊需要的情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>被应用程序占用，找到进程号，停掉应用解除占用就可卸载。如果是内核占用，可以重启或用lazy  umount来解决。但都有优劣点，需要自行把握。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在系统功能越来越丰富，那么响应的开发资源需要的越来越多，文件存储也越来越必要。无论是你用nfs、glusterfs等等，都需要在linux服务器中设置挂载点并执行挂载后才可使用，但如果fs文件系统有调整，那么可能就需要卸载umount,重新挂载，但是你真的可以顺顺利利的卸载吗？不见得，因为可能有应用在占用该磁盘或者系统在fstab中写入了磁盘自动挂载，本文就详细给你介绍个小技巧，帮你解决该烦恼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/fe844df6/1.png&quot; alt=&quot;1626075503955&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/"/>
    
    
      <category term="Linux" scheme="https://wandouduoduo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>详解TcpDump神器</title>
    <link href="https://wandouduoduo.github.io/articles/b667fec3.html"/>
    <id>https://wandouduoduo.github.io/articles/b667fec3.html</id>
    <published>2021-07-02T03:24:31.000Z</published>
    <updated>2021-08-31T09:47:40.191Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>今天要给大家介绍的一个类Unix下的一个网络数据采集分析工具 – Tcpdump，也就是我们常说的抓包工具。与它功能类似的工具有 wireshark。不同的是wireshark有图形化界面，而tcpdump 则只有命令行。</p><p>作为一个运维，经常和服务器打交道，但服务器追求性能很少安装图形界面，因此直接跳过wireshark，直接给大家介绍这个tcpdump神器。</p><p>这篇文章借助于很多帮助文档，终于把tcpdump的用法全部研究了个遍。毫不夸张的说，应该可以算是中文里把 tcpdump 讲得最清楚明白，并且最全的文章了。所以<strong>本文值得你收藏分享，就怕你错过了，就再也找不到像这样把 tcpdump 讲得直白而且特全的文章了</strong>。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7.2   </p><p>tcpdump版本：v4.5.1 </p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><strong>tcpdump核心参数图解</strong></p><p>大家都知道，网络上的流量、数据包非常的多，因此要想抓到我们所需要的数据包，就需要我们定义一个精准的过滤器，把这些目标数据包，从巨大的数据包网络中抓取出来。</p><p>所以学习抓包工具，其实就是学习如何定义过滤器的过程。</p><p>而在 tcpdump 的世界里，过滤器的实现，都是通过一个又一个的参数组合起来，一个参数不够精准，那就再加一个，直到我们能过滤掉无用的数据包，只留下我们感兴趣的数据包。</p><p>tcpdump 的参数非常的多，初学者在没有掌握 tcpdump 时，会对这个命令的众多参数产生很多的疑惑。</p><p>就比如下面这个命令，我们要通过 host 参数指定 host ip 进行过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump host 192.168.10.100</span><br></pre></td></tr></table></figure><p>主程序 + 参数名+ 参数值 这样的组合才是我们正常认知里面命令行该有的样子。</p><p>可 tcpdump 却不走寻常路，我们居然还可以在 host 前再加一个限定词，来缩小过滤的范围？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump src host 192.168.10.100</span><br></pre></td></tr></table></figure><p>从字面上理解，确实很容易理解，但是这不符合编写命令行程序的正常逻辑，导致我们会有所疑虑：</p><p>除 src ，dst  还有其它可以的限定词？src，host 应该如何理解它们，叫参数名？不合适，因为 src 明显不合适。如果你在网上看到有关 tcpdump 的博客、教程，无一不是给你一个参数组合，告诉你这是实现了怎样的一个过滤器？这样的教学方式，很容易让你依赖别人的文章来使用 tcpdump，而不能将 tcpdump 这样神器消化，并达到灵活应用，灵活搭配过滤器的效果。</p><p>上面加了 src 本身就颠覆了我们的认知，你可知道在 src 之前还可以加更多的条件，比如 tcp, udp, icmp 等词，在你之前的基础上再过滤一层。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump tcp src host 192.168.10.100</span><br></pre></td></tr></table></figure><p>这种参数的不确定性，让大多数人对 tcpdump 的学习始终无法得其精髓。</p><p>因此，在学习 tcpdump 之前，我觉得有必要要先让你知道：<strong>tcpdump 的参数是如何组成的？这非常重要。</strong></p><p>为此画了一张图，方便你直观的理解 tcpdump 的各种参数：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/1.png" alt="img"></p><ol><li>option 可选参数：将在后边一一解释，对应本文 <strong>第四章：可选参数解析</strong></li><li>proto 类过滤器：根据协议进行过滤，可识别的关键词有：upd, udp, icmp, ip, ip6, arp, rarp,ether,wlan, fddi, tr, decnet等</li><li>type 类过滤器：可识别的关键词有：host, net, port, portrange等，这些词后边需要再接参数。</li><li>direction 类过滤器：根据数据流向进行过滤，可识别的关键字有：src, dst，同时你可以使用逻辑运算符进行组合，比如 src or dst</li></ol><p>proto、type、direction 这三类过滤器的内容比较简单，也最常用，因此我将其放在最前面，也就是 <strong>第三章：常规过滤规则</strong>一起介绍。</p><p>而 option 可选的参数非常多，有的甚至也不经常用到，因此我将其放到后面一点，也就是 <strong>第四章：可选参数解析</strong></p><p>当你看完前面六章，你对 tcpdump 的认识会上了一个台阶，至少能够满足你 80% 的使用需求。</p><p><strong>你一定会问了，还有 20% 呢？</strong></p><p>其实 tcpdump 还有一些过滤关键词，它不符合以上四种过滤规则，可能需要你单独记忆。关于这部分我会在 <strong>第六章：特殊过滤规则</strong> 里进行介绍。</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p><strong>理解 tcpdump 的输出</strong></p><p><strong>2.1 输出内容结构</strong></p><p>tcpdump 输出的内容虽然多，却很规律。</p><p>这里以我随便抓取的一个 tcp 包为例来看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21:26:49.013621 IP 172.20.20.1.15605 &gt; 172.20.20.2.5920: Flags [P.], seq 49:97, ack 106048, win 4723, length 48</span><br></pre></td></tr></table></figure><p>从上面的输出来看，可以总结出：</p><ol><li>第一列：时分秒毫秒 21:26:49.013621</li><li>第二列：网络协议 IP</li><li>第三列：发送方的ip地址+端口号，其中172.20.20.1是 ip，而15605 是端口号</li><li>第四列：箭头 &gt;， 表示数据流向</li><li>第五列：接收方的ip地址+端口号，其中 172.20.20.2 是 ip，而5920 是端口号</li><li>第六列：冒号</li><li>第七列：数据包内容，包括Flags 标识符，seq 号，ack 号，win 窗口，数据长度 length，其中 [P.] 表示 PUSH 标志位为 1，更多标识符见下面</li></ol><p><strong>2.2 Flags 标识符</strong></p><p>使用 tcpdump 抓包后，会遇到的 TCP 报文 Flags，有以下几种：</p><ul><li>[S] : SYN（开始连接）</li><li>[P] : PSH（推送数据）</li><li>[F] : FIN （结束连接）</li><li>[R] : RST（重置连接）</li><li>[.] : 没有 Flag，由于除了 SYN 包外所有的数据包都有ACK，所以一般这个标志也可表示 ACK</li></ul><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p><strong>常规过滤规则</strong></p><p><strong>3.1 基于IP地址过滤：host</strong></p><p>使用 host 就可以指定 host ip 进行过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump host 192.168.10.100</span><br></pre></td></tr></table></figure><p>数据包的 ip 可以再细分为源ip和目标ip两种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据源ip进行过滤</span></span><br><span class="line">$ tcpdump -i eth2 src 192.168.10.100</span><br><span class="line"><span class="comment"># 根据目标ip进行过滤</span></span><br><span class="line">$ tcpdump -i eth2 dst 192.168.10.200</span><br></pre></td></tr></table></figure><p><strong>3.2 基于网段进行过滤：net</strong></p><p>若你的ip范围是一个网段，可以直接这样指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump net 192.168.10.0/24</span><br></pre></td></tr></table></figure><p>网段同样可以再细分为源网段和目标网段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据源网段进行过滤</span></span><br><span class="line">$ tcpdump src net 192.168</span><br><span class="line"><span class="comment"># 根据目标网段进行过滤</span></span><br><span class="line">$ tcpdump dst net 192.168</span><br></pre></td></tr></table></figure><p><strong>3.3 基于端口进行过滤：port</strong></p><p>使用 port 就可以指定特定端口进行过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump port 8088</span><br></pre></td></tr></table></figure><p>端口同样可以再细分为源端口，目标端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据源端口进行过滤</span></span><br><span class="line">$ tcpdump src port 8088</span><br><span class="line"><span class="comment"># 根据目标端口进行过滤</span></span><br><span class="line">$ tcpdump dst port 8088</span><br></pre></td></tr></table></figure><p>如果你想要同时指定两个端口你可以这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump port 80 or port 8088</span><br></pre></td></tr></table></figure><p>但也可以简写成这样</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump port 80 or 8088</span><br></pre></td></tr></table></figure><p>如果你的想抓取的不再是一两个端口，而是一个范围，一个一个指定就非常麻烦了，此时你可以这样指定一个端口段。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump portrange 8000-8080</span><br><span class="line">$ tcpdump src portrange 8000-8080</span><br><span class="line">$ tcpdump dst portrange 8000-8080</span><br></pre></td></tr></table></figure><p>对于一些常见协议的默认端口，我们还可以直接使用协议名，而不用具体的端口号。如http=80，https = 443 等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump tcp port http</span><br></pre></td></tr></table></figure><p><strong>3.4 基于协议进行过滤：proto</strong></p><p>常见的网络协议有：tcp, udp, icmp, http, ip,ipv6 等</p><p>若你只想查看 icmp 的包，可以直接这样写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump icmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#protocol可选值：ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui</span></span><br></pre></td></tr></table></figure><p><strong>3.5 基本IP协议的版本进行过滤</strong></p><p>当你想查看 tcp 的包，你也许会这样写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump tcp</span><br></pre></td></tr></table></figure><p>这样写也没问题，就是不够精准，为什么这么说呢？</p><p>ip 根据版本的不同，可以再细分为 IPv4 和 IPv6 两种，如果你只指定了 tcp，这两种其实都会包含在内。</p><p>那有什么办法，能够将 IPv4 和 IPv6 区分开来呢？</p><p>很简单，如果是 IPv4 的 tcp 包 ，就这样写（友情提示：数字 6 表示的是 tcp 在ip报文中的编号。）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'ip proto tcp'</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ tcpdump ip proto 6</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ tcpdump <span class="string">'ip protochain tcp'</span></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">$ tcpdump ip protochain 6</span><br></pre></td></tr></table></figure><p>而如果是 IPv6 的 tcp 包 ，就这样写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'ip6 proto tcp'</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ tcpdump ip6 proto 6</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ tcpdump <span class="string">'ip6 protochain tcp'</span></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">$ tcpdump ip6 protochain 6</span><br></pre></td></tr></table></figure><p>关于上面这几个命令示例，有两点需要注意：</p><p>跟在 proto 和 protochain 后面的如果是 tcp, udp, icmp ，那么过滤器需要用引号包含，这是因为 tcp,udp, icmp 是 tcpdump 的关键字。跟在ip 和 ip6 关键字后面的 proto 和 protochain 是两个新面孔，看起来用法类似，它们是否等价，又有什么区别呢？关于第二点，网络上没有找到很具体的答案，我只能通过 man tcpdump 的提示， 给出自己的个人猜测，但不保证正确。</p><p>proto 后面跟的 <protocol> 的关键词是固定的，只能是 ip, ip6, arp, rarp, atalk, aarp, decnet, sca, lat, mopdl, moprc, iso, stp, ipx, or netbeui 这里面的其中一个。</protocol></p><p>而 protochain 后面跟的 protocol 要求就没有那么严格，它可以是任意词，只要 tcpdump 的 IP 报文头部里的 protocol 字段为 <protocol> 就能匹配上。</protocol></p><p>理论上来讲，下面两种写法效果是一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'ip &amp;&amp; tcp'</span>$ tcpdump <span class="string">'ip proto tcp'</span></span><br></pre></td></tr></table></figure><p>同样的，这两种写法也是一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'ip6 &amp;&amp; tcp'</span>$ tcpdump <span class="string">'ip6 proto tcp'</span></span><br></pre></td></tr></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p><strong>可选参数解析</strong></p><p><strong>4.1 设置不解析域名提升速度</strong></p><ul><li>-n：不把ip转化成域名，直接显示 ip，避免执行 DNS lookups 的过程，速度会快很多</li><li>-nn：不把协议和端口号转化成名字，速度也会快很多。</li><li>-N：不打印出host 的域名部分.。比如,，如果设置了此选现，tcpdump 将会打印’nic’ 而不是 ‘nic.ddn.mil’</li></ul><p>​    </p><p><strong>4.2 过滤结果输出到文件</strong></p><p>使用 tcpdump 工具抓到包后，往往需要再借助其他的工具进行分析，比如常见的 wireshark 。</p><p>而要使用wireshark ，我们得将 tcpdump 抓到的包数据生成到文件中，最后再使用 wireshark 打开它即可。</p><p>使用 -w 参数后接一个以 .pcap 后缀命令的文件名，就可以将 tcpdump 抓到的数据保存到文件中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump icmp -w icmp.pcap</span><br></pre></td></tr></table></figure><p><strong>4.3 从文件中读取包数据</strong></p><p>使用 -w 是写入数据到文件，而使用 -r 是从文件中读取数据。</p><p>读取后，我们照样可以使用上述的过滤器语法进行过滤分析。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump icmp -r all.pcap</span><br></pre></td></tr></table></figure><p><strong>4.4 控制详细内容的输出</strong></p><ul><li>-v：产生详细的输出. 比如包的TTL，id标识，数据包长度，以及IP包的一些选项。同时它还会打开一些附加的包完整性检测，比如对IP或ICMP包头部的校验和。</li><li>-vv：产生比-v更详细的输出. 比如NFS回应包中的附加域将会被打印, SMB数据包也会被完全解码。（摘自网络，目前我还未使用过）</li><li>-vvv：产生比-vv更详细的输出。比如 telent 时所使用的SB, SE 选项将会被打印, 如果telnet同时使用的是图形界面，其相应的图形选项将会以16进制的方式打印出来（摘自网络，目前我还未使用过）</li></ul><p><strong>4.5 控制时间的显示</strong></p><ul><li>-t：在每行的输出中不输出时间</li><li>-tt：在每行的输出中会输出时间戳</li><li>-ttt：输出每两行打印的时间间隔(以毫秒为单位)-tttt：在每行打印的时间戳之前添加日期的打印（此种选项，输出的时间最直观）</li></ul><p><strong>4.6 显示数据包的头部</strong></p><ul><li>-x：以16进制的形式打印每个包的头部数据（但不包括数据链路层的头部）</li><li>-xx：以16进制的形式打印每个包的头部数据（包括数据链路层的头部）</li><li>-X：以16进制和 ASCII码形式打印出每个包的数据(但不包括连接层的头部)，这在分析一些新协议的数据包很方便。</li><li>-XX：以16进制和 ASCII码形式打印出每个包的数据(包括连接层的头部)，这在分析一些新协议的数据包很方便。</li></ul><p><strong>4.7 过滤指定网卡的数据包</strong></p><p>-i：指定要过滤的网卡接口，如果要查看所有网卡，可以 -i any</p><p><strong>4.8 过滤特定流向的数据包</strong></p><p>-Q：选择是入方向还是出方向的数据包，可选项有：in, out, inout，也可以使用 –direction=[direction] 这种写法<strong>4.9 其他常用的一些参数</strong></p><ul><li>-A：以ASCII码方式显示每一个数据包(不显示链路层头部信息). 在抓取包含网页数据的数据包时, 可方便查看数据</li><li>-l : 基于行的输出，便于你保存查看，或者交给其它工具分析</li><li>-q : 简洁地打印输出。即打印很少的协议相关信息, 从而输出行都比较简短.</li><li>-c : 捕获 count 个包 tcpdump 就退出</li><li>-s : tcpdump 默认只会截取前 96 字节的内容，要想截取所有的报文内容，可以使用 -s number， number 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。</li><li>-S : 使用绝对序列号，而不是相对序列号</li><li>-C：file-size，tcpdump 在把原始数据包直接保存到文件中之前, 检查此文件大小是否超过file-size. 如果超过了, 将关闭此文件,另创一个文件继续用于原始数据包的记录. 新创建的文件名与-w 选项指定的文件名一致, 但文件名后多了一个数字.该数字会从1开始随着新创建文件的增多而增加. file-size的单位是百万字节(nt: 这里指1,000,000个字节,并非1,048,576个字节, 后者是以1024字节为1k, 1024k字节为1M计算所得, 即1M=1024 ＊ 1024 ＝ 1,048,576)</li><li>-F：使用file 文件作为过滤条件表达式的输入, 此时命令行上的输入将被忽略.</li></ul><p><strong>4.10 对输出内容进行控制的参数</strong></p><ul><li>-D : 显示所有可用网络接口的列表</li><li>-e : 每行的打印输出中将包括数据包的数据链路层头部信息</li><li>-E : 揭秘IPSEC数据</li><li>-L ：列出指定网络接口所支持的数据链路层的类型后退出</li><li>-Z：后接用户名，在抓包时会受到权限的限制。如果以root用户启动tcpdump，tcpdump将会有超级用户权限。</li><li>-d：打印出易读的包匹配码</li><li>-dd：以C语言的形式打印出包匹配码.</li><li>-ddd：以十进制数的形式打印出包匹配码</li></ul><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p><strong>过滤规则组合</strong></p><p>有编程基础的同学，对于下面三个逻辑运算符应该不陌生了吧</p><ul><li>and：所有的条件都需要满足，也可以表示为 &amp;&amp;</li><li>or：只要有一个条件满足就可以，也可以表示为 ||</li><li>not：取反，也可以使用 !举个例子，我想需要抓一个来自10.5.2.3，发往任意主机的3389端口的包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump src 10.5.2.3 and dst port 3389</span><br></pre></td></tr></table></figure><p>当你在使用多个过滤器进行组合时，有可能需要用到括号，而括号在 shell 中是特殊符号，因为你需要使用引号将其包含。例子如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'src 10.0.2.4 and (dst port 3389 or 22)'</span></span><br></pre></td></tr></table></figure><p>而在单个过滤器里，常常会判断一条件是否成立，这时候，就要使用下面两个符号</p><ul><li>=：判断二者相等</li><li>==：判断二者相等</li><li>!=：判断二者不相等</li></ul><p>当你使用这两个符号时，tcpdump 还提供了一些关键字的接口来方便我们进行判断，比如</p><ul><li>if：表示网卡接口名</li><li>proc：表示进程名</li><li>pid：表示进程 id</li><li>svc：表示 service class</li><li>dir：表示方向，in 和 out</li><li>eproc：表示 effective process name</li><li>epid：表示 effective process ID</li></ul><p>比如我现在要过滤来自进程名为 nc 发出的流经 en0 网卡的数据包，或者不流经 en0 的入方向数据包，可以这样子写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">"( if=en0 and proc =nc ) || (if != en0 and dir=in)"</span></span><br></pre></td></tr></table></figure><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p><strong>特殊过滤规则</strong></p><p><strong>6.1 根据 tcpflags 进行过滤</strong></p><p>通过上一篇文章，我们知道了 tcp 的首部有一个标志位。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/2.png" alt="img"></p><p>TCP 报文首部</p><p>tcpdump 支持我们根据数据包的标志位进行过滤</p><p>proto [ expr:size ]</p><ul><li>proto：可以是熟知的协议之一（如ip，arp，tcp，udp，icmp，ipv6）</li><li>expr：可以是数值，也可以是一个表达式，表示与指定的协议头开始处的字节偏移量。</li><li>size：是可选的，表示从字节偏移量开始取的字节数量。</li></ul><p>接下来，我将举几个例子，让人明白它的写法，不过在那之前，有几个点需要你明白，这在后面的例子中会用到：</p><p><strong>1、</strong>tcpflags 可以理解为是一个别名常量，相当于 13，它代表着与指定的协议头开头相关的字节偏移量，也就是标志位，所以 tcp[tcpflags] 等价于 tcp[13] ，对应下图中的报文位置。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/3.png" alt="img"></p><p><strong>2、</strong>tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg 这些同样可以理解为别名常量，分别代表 1，2，4，8，16，32，64。这些数字是如何计算出来的呢？</p><p>以 tcp-syn 为例，你可以参照下面这张图，计算出来的值 是就是 2</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/4.png" alt="img"></p><p>由于数字不好记忆，所以一般使用这样的“别名常量”表示。</p><p>因此当下面这个表达式成立时，就代表这个包是一个 syn 包。</p><p>tcp[tcpflags] == tcp-syn</p><p>要抓取特定数据包，方法有很多种。</p><p>下面以最常见的 syn包为例，演示一下如何用 tcpdump 抓取到 syn 包，而其他的类型的包也是同样的道理。</p><p>据我总结，主要有三种写法：</p><p>1、第一种写法：使用数字表示偏移量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">"tcp[13] &amp; 2 != 0"</span></span><br></pre></td></tr></table></figure><p>2、第二种写法：使用别名常量表示偏移量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">"tcp[tcpflags] &amp; tcp-syn != 0"</span></span><br></pre></td></tr></table></figure><p>3、第三种写法：使用混合写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">"tcp[tcpflags] &amp; 2 != 0"</span><span class="comment"># or$ tcpdump -i eth0 "tcp[13] &amp; tcp-syn != 0"</span></span><br></pre></td></tr></table></figure><p>如果我想同时捕获多种类型的包呢，比如 syn + ack 包</p><p>1、第一种写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">'tcp[13] == 2 or tcp[13] == 16'</span></span><br></pre></td></tr></table></figure><p>2、第二种写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">'tcp[tcpflags] == tcp-syn or tcp[tcpflags] == tcp-ack'</span></span><br></pre></td></tr></table></figure><p>3、第三种写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">"tcp[tcpflags] &amp; (tcp-syn|tcp-ack) != 0"</span></span><br></pre></td></tr></table></figure><p>4、第四种写法：注意这里是 单个等号，而不是像上面一样两个等号，18（syn+ack） = 2（syn） + 16（ack）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i eth0 <span class="string">'tcp[13] = 18'</span><span class="comment"># or$ tcpdump -i eth0 'tcp[tcpflags] = 18'</span></span><br></pre></td></tr></table></figure><p>tcp 中有 类似 tcp-syn 的别名常量，其他协议也是有的，比如 icmp 协议，可以使用的别名常量有</p><p>icmp-echoreply, icmp-unreach, icmp-sourcequench, icmp-redirect, icmp-echo, icmp-routeradvert,icmp-routersolicit, icmp-timx-ceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply,icmp-ireq, icmp-ireqreply, icmp-maskreq, icmp-maskreply</p><p><strong>5.2 基于包大小进行过滤</strong></p><p>若你想查看指定大小的数据包，也是可以的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump less 32 $ tcpdump greater 64 $ tcpdump &lt;= 128</span><br></pre></td></tr></table></figure><p><strong>5.3 根据 mac 地址进行过滤</strong></p><p>例子如下，其中 ehost 是记录在 /etc/ethers 里的 name</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump ether host [ehost]$ tcpdump ether dst [ehost]$ tcpdump ether src [ehost]</span><br></pre></td></tr></table></figure><p><strong>5.4 过滤通过指定网关的数据包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump gateway [host]</span><br></pre></td></tr></table></figure><p><strong>5.5 过滤广播/多播数据包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump ether broadcast$ tcpdump ether multicast$ tcpdump ip broadcast$ tcpdump ip multicast$ tcpdump ip6 multicast</span><br></pre></td></tr></table></figure><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p><strong>如何抓取到更精准的包？</strong></p><p>先给你抛出一个问题：如果我只想抓取 HTTP 的 POST 请求该如何写呢？</p><p>如果只学习了上面的内容，恐怕你还是无法写法满足这个抓取需求的过滤器。</p><p>在学习之前，我先给出答案，然后再剖析一下，这个过滤器是如何生效的，居然能让我们对包内的内容进行判断。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -s 0 -A -vv <span class="string">'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4]'</span></span><br></pre></td></tr></table></figure><p>命令里的可选参数，在前面的内容里已经详细讲过了。这里不再细讲。</p><p>本节的重点是引号里的内容，看起来很复杂的样子。</p><p>将它逐一分解，我们只要先理解了下面几种用法，就能明白</p><ul><li>tcp[n]：表示 tcp 报文里 第 n 个字节</li><li>tcp[n:c]：表示 tcp 报文里从第n个字节开始取 c 个字节，tcp[12:1] 表示从报文的第12个字节（因为有第0个字节，所以这里的12其实表示的是13）开始算起取一个字节，也就是 8 个bit。查看 tcp 的报文首部结构，可以得知这 8 个bit 其实就是下图中的红框圈起来的位置，而在这里我们只要前面 4个bit，也就是实际数据在整个报文首部中的偏移量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/5.png" alt="img"></p><ul><li><p>&amp;：是位运算里的 and 操作符，比如 0011 &amp; 0010 = 0010</p></li><li><p>&gt;&gt;：是位运算里的右移操作，比如 0111 &gt;&gt; 2 = 0011</p></li><li><p>0xf0：是 10 进制的 240 的 16 进制表示，但对于位操作来说，10进制和16进制都将毫无意义，我们需要的是二进制，将其转换成二进制后是：11110000，这个数有什么特点呢？前面个 4bit 全部是 1，后面4个bit全部是0，往后看你就知道这个特点有什么用了。</p></li></ul><p>分解完后，再慢慢合并起来看</p><p>1、tcp[12:1] &amp; 0xf0 其实并不直观，但是我们将它换一种写法，就好看多了，假设 tcp 报文中的 第12 个字节是这样组成的 10110000，那么这个表达式就可以变成 10110110 &amp;&amp; 11110000 = 10110000，得到了 10110000 后，再进入下一步。</p><p>2、tcp[12:1] &amp; 0xf0) &gt;&gt; 2 ：如果你不理解 tcp 报文首部里的数据偏移，请先点击这个前往我的上一篇文章，搞懂数据偏移的意义，否则我保证你这里会绝对会听懵了。</p><p>tcp[12:1] &amp; 0xf0) &gt;&gt; 2 这个表达式实际是 (tcp[12:1] &amp; 0xf0) &gt;&gt; 4 ) &lt;&lt; 2 的简写形式。所以要搞懂 tcp[12:1] &amp; 0xf0) &gt;&gt; 2 只要理解了(tcp[12:1] &amp; 0xf0) &gt;&gt; 4 ) &lt;&lt; 2 就行了 。</p><p>从上一步我们算出了 tcp[12:1] &amp; 0xf0 的值其实是一个字节，也就是 8 个bit，但是你再回去看下上面的 tcp 报文首部结构图，表示数据偏移量的只有 4个bit，也就是说 上面得到的值 10110000，前面 4 位（1011）才是正确的偏移量，那么为了得到 1011，只需要将 10110000 右移4位即可，也就是 tcp[12:1] &amp; 0xf0) &gt;&gt; 4，至此我们是不是已经得出了实际数据的正确位置呢，很遗憾还没有，前一篇文章里我们讲到 Data Offset 的单位是 4个字节，因为要将 1011 乘以 4才可以，除以4在位运算中相当于左移2位，也就是 &lt;&lt;2，与前面的 &gt;&gt;4 结合起来一起算的话，最终的运算可以简化为 &gt;&gt;2</p><p>至此，我们终于得出了实际数据开始的位置是 tcp[12:1] &amp; 0xf0) &gt;&gt; 2 （单位是字节）。</p><p>找到了数据的起点后，可别忘了我们的目的是从数据中打到 HTTP 请求的方法，是 GET 呢 还是 POST ，或者是其他的？</p><p>有了上面的经验，我们自然懂得使用 tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] 从数据开始的位置再取出四个字节，然后将结果与 GET （注意 GET最后还有个空格）的 16进制写法（也就是 0x47455420）进行比对。</p><p>0x47 –&gt; 71 –&gt; G0x45 –&gt; 69 –&gt; E0x54 –&gt; 84 –&gt; T0x20 –&gt; 32 –&gt; 空格</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/6.png" alt="img"></p><p>如果相等，则该表达式为True，tcpdump 认为这就是我们所需要抓的数据包，将其输出到我们的终端屏幕上。</p><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p><strong>抓包实战应用例子</strong></p><p><strong>以下例子摘自：<a href="https://fuckcloudnative.io/posts/tcpdump-examples/" rel="noopener" target="_blank">https://fuckcloudnative.io/posts/tcpdump-examples/</a></strong></p><p><strong>8.1 提取 HTTP 的 User-Agent</strong></p><p>从 HTTP 请求头中提取 HTTP 用户代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn -A -s1500 -l | grep <span class="string">"User-Agent:"</span></span><br></pre></td></tr></table></figure><p>通过 egrep 可以同时提取用户代理和主机名（或其他头文件）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn -A -s1500 -l | egrep -i <span class="string">'User-Agent:|Host:'</span></span><br></pre></td></tr></table></figure><p><strong>8.2 抓取 HTTP GET 和 POST 请求</strong></p><p>抓取 HTTP GET 请求包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -s 0 -A -vv <span class="string">'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420'</span><span class="comment"># or$ tcpdump -vvAls0 | grep 'GET'</span></span><br></pre></td></tr></table></figure><p>可以抓取 HTTP POST 请求包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -s 0 -A -vv <span class="string">'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354'</span><span class="comment"># or $ tcpdump -vvAls0 | grep 'POST'</span></span><br></pre></td></tr></table></figure><p>注意：该方法不能保证抓取到 HTTP POST 有效数据流量，因为一个 POST 请求会被分割为多个 TCP 数据包。</p><p><strong>8.3 找出发包数最多的 IP</strong></p><p>找出一段时间内发包最多的 IP，或者从一堆报文中找出发包最多的 IP，可以使用下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nnn -t -c 200 | cut -f 1,2,3,4 -d <span class="string">'.'</span> | sort | uniq -c | sort -nr | head -n 20</span><br></pre></td></tr></table></figure><ul><li><strong>cut -f 1,2,3,4 -d ‘.’</strong> : 以 . 为分隔符，打印出每行的前四列。即 IP 地址。</li><li><strong>sort | uniq -c</strong> : 排序并计数</li><li><strong>sort -nr</strong> : 按照数值大小逆向排序</li></ul><p><strong>8.4 抓取 DNS 请求和响应</strong></p><p>DNS 的默认端口是 53，因此可以通过端口进行过滤</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -i any -s0 port 53</span><br></pre></td></tr></table></figure><p><strong>8.5 切割 pcap 文件</strong></p><p>当抓取大量数据并写入文件时，可以自动切割为多个大小相同的文件。例如，下面的命令表示每 3600 秒创建一个新文件 capture-(hour).pcap，每个文件大小不超过 200*1000000 字节：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -w /tmp/capture-%H.pcap -G 3600 -C 200</span><br></pre></td></tr></table></figure><p>这些文件的命名为 capture-{1-24}.pcap，24 小时之后，之前的文件就会被覆盖。</p><p><strong>8.6 提取 HTTP POST 请求中的密码</strong></p><p>从 HTTP POST 请求中提取密码和主机名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -s 0 -A -n -l | egrep -i <span class="string">"POST /|pwd=|passwd=|password=|Host:"</span></span><br></pre></td></tr></table></figure><p><strong>8.7 提取 HTTP 请求的 URL</strong></p><p>提取 HTTP 请求的主机名和路径：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -s 0 -v -n -l | egrep -i <span class="string">"POST /|GET /|Host:"</span></span><br></pre></td></tr></table></figure><p><strong>8.8 抓取 HTTP 有效数据包</strong></p><p>抓取 80 端口的 HTTP 有效数据包，排除 TCP 连接建立过程的数据包（SYN / FIN / ACK）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump <span class="string">'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</span></span><br></pre></td></tr></table></figure><p><strong>8.9 结合 Wireshark 进行分析</strong></p><p>通常 Wireshark（或 tshark）比 tcpdump 更容易分析应用层协议。一般的做法是在远程服务器上先使用 tcpdump 抓取数据并写入文件，然后再将文件拷贝到本地工作站上用 Wireshark 分析。</p><p>还有一种更高效的方法，可以通过 ssh 连接将抓取到的数据实时发送给 Wireshark 进行分析。以 MacOS 系统为例，可以通过 brew cask install wireshark 来安装，然后通过下面的命令来分析：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@remotesystem <span class="string">'tcpdump -s0 -c 1000 -nn -w - not port 22'</span> | /Applications/Wireshark.app/Contents/MacOS/Wireshark -k -i -</span><br></pre></td></tr></table></figure><p>例如，如果想分析 DNS 协议，可以使用下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@remotesystem <span class="string">'tcpdump -s0 -c 1000 -nn -w - port 53'</span> | /Applications/Wireshark.app/Contents/MacOS/Wireshark -k -i -</span><br></pre></td></tr></table></figure><p>抓取到的数据：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/b667fec3/7.png" alt="img"></p><p>-c 选项用来限制抓取数据的大小。如果不限制大小，就只能通过 ctrl-c 来停止抓取，这样一来不仅关闭了 tcpdump，也关闭了 wireshark。</p><p>到这里，我已经将我所知道的 tcpdump 的用法全部说了一遍，如果你有认真地看完本文，相信会有不小的收获，掌握一个上手的抓包工具，对于以后我们学习网络、分析网络协议、以及定位网络问题，会很有帮助，而 tcpdump 是我推荐的一个抓包工具。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要给大家介绍的一个类Unix下的一个网络数据采集分析工具 – Tcpdump，也就是我们常说的抓包工具。与它功能类似的工具有 wireshark。不同的是wireshark有图形化界面，而tcpdump 则只有命令行。&lt;/p&gt;
&lt;p&gt;作为一个运维，经常和服务器打交道，但服务器追求性能很少安装图形界面，因此直接跳过wireshark，直接给大家介绍这个tcpdump神器。&lt;/p&gt;
&lt;p&gt;这篇文章借助于很多帮助文档，终于把tcpdump的用法全部研究了个遍。毫不夸张的说，应该可以算是中文里把 tcpdump 讲得最清楚明白，并且最全的文章了。所以&lt;strong&gt;本文值得你收藏分享，就怕你错过了，就再也找不到像这样把 tcpdump 讲得直白而且特全的文章了&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="网络技术" scheme="https://wandouduoduo.github.io/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Tcpdump" scheme="https://wandouduoduo.github.io/tags/Tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>生产mysql数据库集群优化&lt;二&gt;--proxysql安装及优化</title>
    <link href="https://wandouduoduo.github.io/articles/8307f670.html"/>
    <id>https://wandouduoduo.github.io/articles/8307f670.html</id>
    <published>2021-06-23T06:26:18.000Z</published>
    <updated>2021-06-23T06:51:09.961Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>前面文章对数据库中间层进行了选型，那么要怎么安装，怎么验证，怎么优化，又有哪些坑可以避免呢？本文就详细介绍下。</p><a id="more"></a><h2 id="ProxySQL-安装-两种方式"><a href="#ProxySQL-安装-两种方式" class="headerlink" title="ProxySQL 安装 (两种方式)"></a><strong>ProxySQL 安装 (两种方式)</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">1) 采用yum方式安装</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># vim /etc/yum.repos.d/proxysql.repo</span></span><br><span class="line">[proxysql_repo]</span><br><span class="line">name= ProxySQL YUM repository</span><br><span class="line">baseurl=http://repo.proxysql.com/ProxySQL/proxysql-1.4.x/centos/\<span class="variable">$releasever</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://repo.proxysql.com/ProxySQL/repo_pub_key</span><br><span class="line"> </span><br><span class="line">执行安装</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># yum clean all</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># yum makecache</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># yum -y install proxysql</span></span><br><span class="line">  </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># proxysql --version</span></span><br><span class="line">ProxySQL version 1.4.13-15-g69d4207, codename Truls</span><br><span class="line">  </span><br><span class="line">启动ProxySQL</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># chkconfig proxysql on</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># systemctl start proxysql      </span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># systemctl status proxysql</span></span><br><span class="line"> </span><br><span class="line">启动后会监听两个端口，</span><br><span class="line">默认为6032和6033。6032端口是ProxySQL的管理端口，6033是ProxySQL对外提供服务的端口 (即连接到转发后端的真正数据库的转发端口)。</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># netstat -tunlp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name  </span><br><span class="line">tcp        0      0 0.0.0.0:6032            0.0.0.0:*               LISTEN      23940/proxysql    </span><br><span class="line">tcp        0      0 0.0.0.0:6033            0.0.0.0:*               LISTEN      23940/proxysql</span><br><span class="line"> </span><br><span class="line">2）采用rpm包方式安装</span><br><span class="line">proxysql的rpm包下载地址: https://pan.baidu.com/s/1S1_b5DKVCpZSOUNmtCXrrg</span><br><span class="line">提取密码: 5t1c</span><br><span class="line">  </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># wget https://github.com/sysown/proxysql/releases/download/v1.4.8/proxysql-1.4.8-1-centos7.x86_64.rpm</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># rpm -ivh proxysql-1.4.8-1-centos7.x86_64.rpm --force</span></span><br><span class="line"> </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># /etc/init.d/proxysql start</span></span><br><span class="line">Starting ProxySQL: DONE!</span><br><span class="line"> </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># ss -lntup|grep proxy</span></span><br><span class="line">tcp    LISTEN     0      128       *:6032                  *:*                   users:((<span class="string">"proxysql"</span>,pid=2943,fd=24))</span><br><span class="line">tcp    LISTEN     0      128       *:6033                  *:*                   users:((<span class="string">"proxysql"</span>,pid=2943,fd=22))</span><br><span class="line">tcp    LISTEN     0      128       *:6033                  *:*                   users:((<span class="string">"proxysql"</span>,pid=2943,fd=21))</span><br><span class="line">tcp    LISTEN     0      128       *:6033                  *:*                   users:((<span class="string">"proxysql"</span>,pid=2943,fd=20))</span><br><span class="line">tcp    LISTEN     0      128       *:6033                  *:*                   users:((<span class="string">"proxysql"</span>,pid=2943,fd=19))</span><br><span class="line"> </span><br><span class="line">如上可以看出转发端口6033是启动了四个线程</span><br><span class="line"> </span><br><span class="line">==============================================================</span><br><span class="line">以上两种方式采用任何一种都可以顺利安装proxysql插件。</span><br><span class="line"> </span><br><span class="line">另外，记得在proxysql服务器上安装mysql客户端，用于在本机连接到ProxySQL的管理接口</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># vim /etc/yum.repos.d/mariadb.repo</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.3.5/centos6-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br><span class="line">   </span><br><span class="line">安装mysql-clinet客户端</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># yum install -y MariaDB-client</span></span><br><span class="line">  </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">如果遇到报错：</span><br><span class="line">Error: MariaDB-compat conflicts with 1:mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br><span class="line">   </span><br><span class="line">解决办法：</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># rpm -qa|grep mariadb*</span></span><br><span class="line">mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># rpm -e mariadb-libs-5.5.56-2.el7.x86_64 --nodeps</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># yum install -y MariaDB-client</span></span><br></pre></td></tr></table></figure><h2 id="ProxySQL配置"><a href="#ProxySQL配置" class="headerlink" title="ProxySQL配置"></a><strong>ProxySQL配置</strong></h2><p>ProxySQL有配置文件/etc/proxysql.cnf和配置数据库文件/var/lib/proxysql/proxysql.db。<strong>这里需要特别注意：如果存在如果存在”proxysql.db”文件(在/var/lib/proxysql目录下)，则ProxySQL服务只有在第一次启动时才会去读取proxysql.cnf文件并解析；后面启动会就不会读取proxysql.cnf文件了！如果想要让proxysql.cnf文件里的配置在重启proxysql服务后生效(即想要让proxysql重启时读取并解析proxysql.cnf配置文件)，则需要先删除/var/lib/proxysql/proxysql.db数据库文件，然后再重启proxysql服务。这样就相当于初始化启动proxysql服务了，会再次生产一个纯净的proxysql.db数据库文件(如果之前配置了proxysql相关路由规则等，则就会被抹掉)。</strong> 官方推荐用admin interface方式！(即在proxysql本机使用mysql客户端连接管理端口)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-proxy ~]<span class="comment"># egrep -v "^#|^$" /etc/proxysql.cnf</span></span><br><span class="line">datadir=<span class="string">"/var/lib/proxysql"</span>                                   <span class="comment">#数据目录</span></span><br><span class="line">admin_variables=</span><br><span class="line">&#123;</span><br><span class="line">        admin_credentials=<span class="string">"admin:admin"</span>                       <span class="comment">#连接管理端的用户名与密码</span></span><br><span class="line">        mysql_ifaces=<span class="string">"0.0.0.0:6032"</span>                           <span class="comment">#管理端口，用来连接proxysql的管理数据库</span></span><br><span class="line">&#125;</span><br><span class="line">mysql_variables=</span><br><span class="line">&#123;</span><br><span class="line">        threads=4                                             <span class="comment">#指定转发端口开启的线程数量</span></span><br><span class="line">        max_connections=2048</span><br><span class="line">        default_query_delay=0</span><br><span class="line">        default_query_timeout=36000000</span><br><span class="line">        have_compress=<span class="literal">true</span></span><br><span class="line">        poll_timeout=2000</span><br><span class="line">        interfaces=<span class="string">"0.0.0.0:6033"</span>                             <span class="comment">#指定转发端口，用于连接后端mysql数据库的，相当于代理作用</span></span><br><span class="line">        default_schema=<span class="string">"information_schema"</span></span><br><span class="line">        stacksize=1048576</span><br><span class="line">        server_version=<span class="string">"5.5.30"</span>                               <span class="comment">#指定后端mysql的版本</span></span><br><span class="line">        connect_timeout_server=3000</span><br><span class="line">        monitor_username=<span class="string">"monitor"</span></span><br><span class="line">        monitor_password=<span class="string">"monitor"</span></span><br><span class="line">        monitor_history=600000</span><br><span class="line">        monitor_connect_interval=60000</span><br><span class="line">        monitor_ping_interval=10000</span><br><span class="line">        monitor_read_only_interval=1500</span><br><span class="line">        monitor_read_only_timeout=500</span><br><span class="line">        ping_interval_server_msec=120000</span><br><span class="line">        ping_timeout_server=500</span><br><span class="line">        commands_stats=<span class="literal">true</span></span><br><span class="line">        sessions_sort=<span class="literal">true</span></span><br><span class="line">        connect_retries_on_failure=10</span><br><span class="line">&#125;</span><br><span class="line">mysql_servers =</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">mysql_users:</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">mysql_query_rules:</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">scheduler=</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line">mysql_replication_hostgroups=</span><br><span class="line">(</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">proxysql的数据目录</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># ll /var/lib/proxysql/</span></span><br><span class="line">total 1014052</span><br><span class="line">-rw------- 1 root root     122880 Jan 25 14:33 proxysql.db</span><br><span class="line">-rw------- 1 root root 1023288179 Jan 28 12:30 proxysql.log</span><br><span class="line">-rw-r--r-- 1 root root          6 Jan 25 14:20 proxysql.pid</span><br><span class="line">-rw------- 1 root root    1736704 Jan 28 12:29 proxysql_stats.db</span><br><span class="line"> </span><br><span class="line">查看main库（默认登陆后即在此库）的global_variables表信息</span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| seq | name          | file                                |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| 0   | main          |                                     |</span><br><span class="line">| 2   | disk          | /var/lib/proxysql/proxysql.db       |</span><br><span class="line">| 3   | stats         |                                     |</span><br><span class="line">| 4   | monitor       |                                     |</span><br><span class="line">| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; use main;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"> </span><br><span class="line">Database changed</span><br><span class="line">MySQL [main]&gt; show tables;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| tables                                     |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| global_variables                           |</span><br><span class="line">| mysql_collations                           |</span><br><span class="line">| mysql_group_replication_hostgroups         |</span><br><span class="line">| mysql_query_rules                          |</span><br><span class="line">| mysql_query_rules_fast_routing             |</span><br><span class="line">| mysql_replication_hostgroups               |</span><br><span class="line">| mysql_servers                              |</span><br><span class="line">| mysql_users                                |</span><br><span class="line">| proxysql_servers                           |</span><br><span class="line">| runtime_checksums_values                   |</span><br><span class="line">| runtime_global_variables                   |</span><br><span class="line">| runtime_mysql_group_replication_hostgroups |</span><br><span class="line">| runtime_mysql_query_rules                  |</span><br><span class="line">| runtime_mysql_query_rules_fast_routing     |</span><br><span class="line">| runtime_mysql_replication_hostgroups       |</span><br><span class="line">| runtime_mysql_servers                      |</span><br><span class="line">| runtime_mysql_users                        |</span><br><span class="line">| runtime_proxysql_servers                   |</span><br><span class="line">| runtime_scheduler                          |</span><br><span class="line">| scheduler                                  |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [main]&gt; select * from global_variables;</span><br><span class="line">+-----------------------------------------------------+---------------------------+</span><br><span class="line">| variable_name                                       | variable_value            |</span><br><span class="line">+-----------------------------------------------------+---------------------------+</span><br><span class="line">| mysql-shun_on_failures                              | 5                         |</span><br><span class="line">| mysql-shun_recovery_time_sec                        | 10                        |</span><br><span class="line">| mysql-query_retries_on_failure                      | 1                         |</span><br><span class="line">| mysql-connect_retries_delay                         | 1                         |</span><br><span class="line">| mysql-connection_delay_multiplex_ms                 | 0                         |</span><br><span class="line">| mysql-connection_max_age_ms                         | 0                         |</span><br><span class="line">| mysql-connect_timeout_server_max                    | 10000                     |</span><br><span class="line">| mysql-eventslog_filename                            |                           |</span><br><span class="line">| mysql-eventslog_filesize                            | 104857600                 |</span><br><span class="line">| mysql-default_charset                               | utf8                      |</span><br><span class="line">| mysql-free_connections_pct                          | 10                        |</span><br><span class="line">| mysql-session_idle_ms                               | 1000                      |</span><br><span class="line">| mysql-client_found_rows                             | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-monitor_enabled                               | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-monitor_connect_timeout                       | 600                       |</span><br><span class="line">| mysql-monitor_ping_max_failures                     | 3                         |</span><br><span class="line">| mysql-monitor_ping_timeout                          | 1000                      |</span><br><span class="line">| mysql-monitor_read_only_max_timeout_count           | 3                         |</span><br><span class="line">| mysql-monitor_replication_lag_interval              | 10000                     |</span><br><span class="line">| mysql-monitor_replication_lag_timeout               | 1000                      |</span><br><span class="line">| mysql-monitor_groupreplication_healthcheck_interval | 5000                      |</span><br><span class="line">| mysql-monitor_groupreplication_healthcheck_timeout  | 800                       |</span><br><span class="line">| mysql-monitor_replication_lag_use_percona_heartbeat |                           |</span><br><span class="line">| mysql-monitor_query_interval                        | 60000                     |</span><br><span class="line">| mysql-monitor_query_timeout                         | 100                       |</span><br><span class="line">| mysql-monitor_slave_lag_when_null                   | 60                        |</span><br><span class="line">| mysql-monitor_wait_timeout                          | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-monitor_writer_is_also_reader                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-max_allowed_packet                            | 4194304                   |</span><br><span class="line">| mysql-throttle_connections_per_sec_to_hostgroup     | 1000000                   |</span><br><span class="line">| mysql-max_transaction_time                          | 14400000                  |</span><br><span class="line">| mysql-multiplexing                                  | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-forward_autocommit                            | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-enforce_autocommit_on_reads                   | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-autocommit_false_not_reusable                 | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-autocommit_false_is_transaction               | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-verbose_query_error                           | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-hostgroup_manager_verbose                     | 1                         |</span><br><span class="line">| mysql-threshold_query_length                        | 524288                    |</span><br><span class="line">| mysql-threshold_resultset_size                      | 4194304                   |</span><br><span class="line">| mysql-query_digests_max_digest_length               | 2048                      |</span><br><span class="line">| mysql-query_digests_max_query_length                | 65000                     |</span><br><span class="line">| mysql-wait_timeout                                  | 28800000                  |</span><br><span class="line">| mysql-throttle_max_bytes_per_second_to_client       | 2147483647                |</span><br><span class="line">| mysql-throttle_ratio_server_to_client               | 0                         |</span><br><span class="line">| mysql-max_stmts_per_connection                      | 20                        |</span><br><span class="line">| mysql-max_stmts_cache                               | 10000                     |</span><br><span class="line">| mysql-mirror_max_concurrency                        | 16                        |</span><br><span class="line">| mysql-mirror_max_queue_length                       | 32000                     |</span><br><span class="line">| mysql-default_max_latency_ms                        | 1000                      |</span><br><span class="line">| mysql-query_processor_iterations                    | 0                         |</span><br><span class="line">| mysql-query_processor_regex                         | 1                         |</span><br><span class="line">| mysql-long_query_time                               | 1000                      |</span><br><span class="line">| mysql-query_cache_size_MB                           | 256                       |</span><br><span class="line">| mysql-poll_timeout_on_failure                       | 100                       |</span><br><span class="line">| mysql-server_capabilities                           | 45578                     |</span><br><span class="line">| mysql-session_idle_show_processlist                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-query_digests                                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-query_digests_lowercase                       | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-servers_stats                                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-default_reconnect                             | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-ssl_p2s_ca                                    |                           |</span><br><span class="line">| mysql-ssl_p2s_cert                                  |                           |</span><br><span class="line">| mysql-ssl_p2s_key                                   |                           |</span><br><span class="line">| mysql-ssl_p2s_cipher                                |                           |</span><br><span class="line">| mysql-init_connect                                  |                           |</span><br><span class="line">| mysql-default_sql_mode                              |                           |</span><br><span class="line">| mysql-default_time_zone                             | SYSTEM                    |</span><br><span class="line">| mysql-connpoll_reset_queue_length                   | 50                        |</span><br><span class="line">| mysql-stats_time_backend_query                      | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-stats_time_query_processor                    | <span class="literal">false</span>                     |</span><br><span class="line">| mysql-threads                                       | 4                         |</span><br><span class="line">| mysql-max_connections                               | 2048                      |</span><br><span class="line">| mysql-default_query_delay                           | 0                         |</span><br><span class="line">| mysql-default_query_timeout                         | 36000000                  |</span><br><span class="line">| mysql-have_compress                                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-poll_timeout                                  | 2000                      |</span><br><span class="line">| mysql-interfaces                                    | 0.0.0.0:6033              |</span><br><span class="line">| mysql-default_schema                                | information_schema        |</span><br><span class="line">| mysql-stacksize                                     | 1048576                   |</span><br><span class="line">| mysql-server_version                                | 5.5.30                    |</span><br><span class="line">| mysql-connect_timeout_server                        | 3000                      |</span><br><span class="line">| mysql-monitor_username                              | proxysql                  |</span><br><span class="line">| mysql-monitor_password                              | proxysql                  |</span><br><span class="line">| mysql-monitor_history                               | 600000                    |</span><br><span class="line">| mysql-monitor_connect_interval                      | 60000                     |</span><br><span class="line">| mysql-monitor_ping_interval                         | 10000                     |</span><br><span class="line">| mysql-monitor_read_only_interval                    | 1500                      |</span><br><span class="line">| mysql-monitor_read_only_timeout                     | 500                       |</span><br><span class="line">| mysql-ping_interval_server_msec                     | 120000                    |</span><br><span class="line">| mysql-ping_timeout_server                           | 500                       |</span><br><span class="line">| mysql-commands_stats                                | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-sessions_sort                                 | <span class="literal">true</span>                      |</span><br><span class="line">| mysql-connect_retries_on_failure                    | 10                        |</span><br><span class="line">| admin-stats_credentials                             | stats:stats               |</span><br><span class="line">| admin-stats_mysql_connections                       | 60                        |</span><br><span class="line">| admin-stats_mysql_connection_pool                   | 60                        |</span><br><span class="line">| admin-stats_mysql_query_cache                       | 60                        |</span><br><span class="line">| admin-stats_system_cpu                              | 60                        |</span><br><span class="line">| admin-stats_system_memory                           | 60                        |</span><br><span class="line">| admin-telnet_admin_ifaces                           | (null)                    |</span><br><span class="line">| admin-telnet_stats_ifaces                           | (null)                    |</span><br><span class="line">| admin-refresh_interval                              | 2000                      |</span><br><span class="line">| admin-read_only                                     | <span class="literal">false</span>                     |</span><br><span class="line">| admin-hash_passwords                                | <span class="literal">true</span>                      |</span><br><span class="line">| admin-cluster_username                              |                           |</span><br><span class="line">| admin-cluster_password                              |                           |</span><br><span class="line">| admin-cluster_check_interval_ms                     | 1000                      |</span><br><span class="line">| admin-cluster_check_status_frequency                | 10                        |</span><br><span class="line">| admin-cluster_mysql_query_rules_diffs_before_sync   | 3                         |</span><br><span class="line">| admin-cluster_mysql_servers_diffs_before_sync       | 3                         |</span><br><span class="line">| admin-cluster_mysql_users_diffs_before_sync         | 3                         |</span><br><span class="line">| admin-cluster_proxysql_servers_diffs_before_sync    | 3                         |</span><br><span class="line">| admin-cluster_mysql_query_rules_save_to_disk        | <span class="literal">true</span>                      |</span><br><span class="line">| admin-cluster_mysql_servers_save_to_disk            | <span class="literal">true</span>                      |</span><br><span class="line">| admin-cluster_mysql_users_save_to_disk              | <span class="literal">true</span>                      |</span><br><span class="line">| admin-cluster_proxysql_servers_save_to_disk         | <span class="literal">true</span>                      |</span><br><span class="line">| admin-checksum_mysql_query_rules                    | <span class="literal">true</span>                      |</span><br><span class="line">| admin-checksum_mysql_servers                        | <span class="literal">true</span>                      |</span><br><span class="line">| admin-checksum_mysql_users                          | <span class="literal">true</span>                      |</span><br><span class="line">| admin-web_enabled                                   | <span class="literal">false</span>                     |</span><br><span class="line">| admin-web_port                                      | 6080                      |</span><br><span class="line">| admin-admin_credentials                             | admin:admin|</span><br><span class="line">| admin-mysql_ifaces                                  | 0.0.0.0:6032              |</span><br><span class="line">| admin-version                                       | 1.4.8-32-g669c149         |</span><br><span class="line">+-----------------------------------------------------+---------------------------+</span><br><span class="line">125 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.003 sec)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#登陆成功后，可通过对main库（默认登陆后即在此库）的global_variables表中的"admin-admin_credentials" 和 "admin-mysql_ifaces"</span></span><br><span class="line"><span class="comment">#两个变量进行更改来修改登录认证! 比如说修改密码或定义一个非admin的用户用于远程登录(下面会说到)。</span></span><br></pre></td></tr></table></figure><p>proxysql的6032端口是管理入口，账号密码是admin(可以动态修改),允许客户端连接；6033端口就是客户端入口，账号密码通过管理接口去设置。在proxysql本机使用mysql客户端连接到ProxySQL的管理接口(admin interface), 该接口的默认管理员用户和密码都是admin。</p><p><strong>mysql_ifaces</strong><br>也就是说proxysql有一个admin接口专门来做配置，相当于一个mysql shell可以通过sql来让配置实时生效。<br>mysql_ifaces配置了允许连接proxysql的ip和port</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-proxy ~]<span class="comment"># vim /etc/proxysql.cnf</span></span><br><span class="line">........</span><br><span class="line"><span class="comment"># 将admin_variables中的mysql_ifaces修改成允许远程访问</span></span><br><span class="line"><span class="comment">#      mysql_ifaces="127.0.0.1:6032;/tmp/proxysql_admin.sock"</span></span><br><span class="line">       mysql_ifaces=<span class="string">"0.0.0.0:6032"</span></span><br></pre></td></tr></table></figure><p>如果ip配置为0.0.0.0表示不限制ip，但是出于安全考虑，admin用户无论怎么设置都只能在本机登录!!!</p><p><strong>admin_credentials</strong><br>这个key保存所有可以操作proxysql的用户名和密码，格式为：user:pass;user1:pass1，这里可以修改密码或定义一个非admin的用户用于远程登录。 前提是保证想要管理proxysql的机器安装有mysql client客户端！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">先在proxysql本机登录 (因为初始账号密码是admin:admin，只能在本机登录), 这里的proxysql本机地址是172.16.60.214</span><br><span class="line"> </span><br><span class="line">修改远程连接proxysql管理端口的账号和密码radmin:radmin.</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -h127.0.0.1 -P6032       </span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 34</span><br><span class="line">Server version: 5.5.30 (ProxySQL Admin Module)</span><br><span class="line"> </span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"> </span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; update global_variables <span class="built_in">set</span> variable_value = <span class="string">'admin:admin;radmin:radmin'</span> <span class="built_in">where</span> variable_name = <span class="string">'admin-admin_credentials'</span>;</span><br><span class="line">Query OK, 1 row affected (0.002 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; LOAD ADMIN VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; SAVE ADMIN VARIABLES TO DISK;</span><br><span class="line">Query OK, 31 rows affected (0.077 sec)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">这样就可以使用下面的命令在其他机器上使用radmin用户登录（其他机器上需要有mysql client）</span><br><span class="line">[root@MGR-node3 ~]<span class="comment"># mysql -uradmin -pradmin -h172.16.60.214 -P6032        </span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 35</span><br><span class="line">Server version: 5.5.30 (ProxySQL Admin Module)</span><br><span class="line"> </span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"> </span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"> </span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"> </span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| seq | name          | file                                |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| 0   | main          |                                     |</span><br><span class="line">| 2   | disk          | /var/lib/proxysql/proxysql.db       |</span><br><span class="line">| 3   | stats         |                                     |</span><br><span class="line">| 4   | monitor       |                                     |</span><br><span class="line">| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>ProxySQL的库、表说明</strong> （默认管理端口是6032，客户端服务端口是6033。默认的用户名密码都是 admin）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">通过管理端口6032去连接的 (注意, 下面连接命令中后面的--prompt <span class="string">'admin'</span>字段可以不加，也是可以登录进去的)</span><br><span class="line">  </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1</span></span><br><span class="line">或者</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1 --prompt 'admin&gt; '</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 33</span><br><span class="line">Server version: 5.5.30 (ProxySQL Admin Module)</span><br><span class="line">  </span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">  </span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">  </span><br><span class="line">admin&gt; show databases;</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| seq | name          | file                                |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| 0   | main          |                                     |</span><br><span class="line">| 2   | disk          | /var/lib/proxysql/proxysql.db       |</span><br><span class="line">| 3   | stats         |                                     |</span><br><span class="line">| 4   | monitor       |                                     |</span><br><span class="line">| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">ProxySQL提供了几个库，每个库都有各自的意义；</span><br><span class="line">-  main 内存配置数据库，表里存放后端db实例、用户验证、路由规则等信息。表名以 runtime_开头的表示proxysql当前运行的配置内容，</span><br><span class="line">不能通过dml语句修改，只能修改对应的不以 runtime_ 开头的（在内存）里的表，然后 LOAD 使其生效， SAVE 使其存到硬盘以供下次重启加载。</span><br><span class="line">-  disk 是持久化到硬盘的配置，sqlite数据文件。</span><br><span class="line">-  stats 是proxysql运行抓取的统计信息，包括到后端各命令的执行次数、流量、processlist、查询种类汇总/执行时间等等。</span><br><span class="line">-  monitor 库存储 monitor 模块收集的信息，主要是对后端db的健康/延迟检查。</span><br><span class="line">  </span><br><span class="line">1) main 库 （disk库的表字段和main一样）</span><br><span class="line">admin&gt; show tables from main;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| tables                                     |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| global_variables                           |</span><br><span class="line">| mysql_collations                           |</span><br><span class="line">| mysql_group_replication_hostgroups         |</span><br><span class="line">| mysql_query_rules                          |</span><br><span class="line">| mysql_query_rules_fast_routing             |</span><br><span class="line">| mysql_replication_hostgroups               |</span><br><span class="line">| mysql_servers                              |</span><br><span class="line">| mysql_users                                |</span><br><span class="line">| proxysql_servers                           |</span><br><span class="line">| runtime_checksums_values                   |</span><br><span class="line">| runtime_global_variables                   |</span><br><span class="line">| runtime_mysql_group_replication_hostgroups |</span><br><span class="line">| runtime_mysql_query_rules                  |</span><br><span class="line">| runtime_mysql_query_rules_fast_routing     |</span><br><span class="line">| runtime_mysql_replication_hostgroups       |</span><br><span class="line">| runtime_mysql_servers                      |</span><br><span class="line">| runtime_mysql_users                        |</span><br><span class="line">| runtime_proxysql_servers                   |</span><br><span class="line">| runtime_scheduler                          |</span><br><span class="line">| scheduler                                  |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"> </span><br><span class="line">常用的几个表介绍</span><br><span class="line">===============================================</span><br><span class="line">global_variables      </span><br><span class="line">设置变量，包括监听的端口、管理账号等。</span><br><span class="line"> </span><br><span class="line">mysql_collations      </span><br><span class="line">相关字符集和校验规则。</span><br><span class="line"> </span><br><span class="line">mysql_query_rules     </span><br><span class="line">定义查询路由规则。</span><br><span class="line"> </span><br><span class="line">mysql_replication_hostgroups  </span><br><span class="line">监视指定主机组中所有服务器的read_only值，并且根据read_only的值将服务器分配给写入器或读取器主机组。ProxySQL monitor模块会监控hostgroups</span><br><span class="line">后端所有servers 的read_only 变量，如果发现从库的read_only变为0、主库变为1，则认为角色互换了，自动改写mysql_servers表里面 hostgroup关系，</span><br><span class="line">达到自动 Failover 效果。</span><br><span class="line"> </span><br><span class="line">mysql_servers</span><br><span class="line">设置后端MySQL的表</span><br><span class="line"> </span><br><span class="line">mysql_users</span><br><span class="line">配置后端数据库的程序账号和监控账号。</span><br><span class="line"> </span><br><span class="line">scheduler</span><br><span class="line">调度器是一个类似于cron的实现，集成在ProxySQL中，具有毫秒的粒度。通过脚本检测来设置ProxySQL。</span><br><span class="line"> </span><br><span class="line">2）stats库</span><br><span class="line">MySQL [(none)]&gt; show tables from stats;</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| tables                               |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| global_variables                     |</span><br><span class="line">| stats_memory_metrics                 |</span><br><span class="line">| stats_mysql_commands_counters        |</span><br><span class="line">| stats_mysql_connection_pool          |</span><br><span class="line">| stats_mysql_connection_pool_reset    |</span><br><span class="line">| stats_mysql_global                   |</span><br><span class="line">| stats_mysql_prepared_statements_info |</span><br><span class="line">| stats_mysql_processlist              |</span><br><span class="line">| stats_mysql_query_digest             |</span><br><span class="line">| stats_mysql_query_digest_reset       |</span><br><span class="line">| stats_mysql_query_rules              |</span><br><span class="line">| stats_mysql_users                    |</span><br><span class="line">| stats_proxysql_servers_checksums     |</span><br><span class="line">| stats_proxysql_servers_metrics       |</span><br><span class="line">| stats_proxysql_servers_status        |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">15 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"> </span><br><span class="line">常用的几个表介绍</span><br><span class="line">===============================================</span><br><span class="line">stats_mysql_commands_counters</span><br><span class="line">统计各种SQL类型的执行次数和时间，通过参数mysql-commands_stats控制开关，默认是ture。</span><br><span class="line"> </span><br><span class="line">stats_mysql_connection_pool</span><br><span class="line">连接后端MySQL的连接信息。</span><br><span class="line"> </span><br><span class="line">stats_mysql_processlist</span><br><span class="line">类似MySQL的show processlist的命令，查看各线程的状态。</span><br><span class="line"> </span><br><span class="line">stats_mysql_query_digest</span><br><span class="line">表示SQL的执行次数、时间消耗等。通过变量mysql-query_digests控制开关，默认是开。</span><br><span class="line"> </span><br><span class="line">stats_mysql_query_rules</span><br><span class="line">路由命中次数统计。</span><br><span class="line"> </span><br><span class="line">3）monitor库</span><br><span class="line">MySQL [(none)]&gt; show tables from monitor;            </span><br><span class="line">+------------------------------------+</span><br><span class="line">| tables                             |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| mysql_server_connect_log           |</span><br><span class="line">| mysql_server_group_replication_log |</span><br><span class="line">| mysql_server_ping_log              |</span><br><span class="line">| mysql_server_read_only_log         |</span><br><span class="line">| mysql_server_replication_lag_log   |</span><br><span class="line">+------------------------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">常用的几个表介绍</span><br><span class="line">===============================================</span><br><span class="line">mysql_server_connect_log</span><br><span class="line">连接到所有MySQL服务器以检查它们是否可用，该表用来存放检测连接的日志。</span><br><span class="line"> </span><br><span class="line">mysql_server_ping_log</span><br><span class="line">使用mysql_ping API ping后端MySQL服务器，检查它们是否可用，该表用来存放ping的日志。</span><br><span class="line"> </span><br><span class="line">mysql_server_replication_lag_log</span><br><span class="line">后端MySQL服务主从延迟的检测。</span><br><span class="line"> </span><br><span class="line">runtime_开头的是运行时的配置，这些是不能修改的。要修改ProxySQL的配置，需要修改了非runtime_表，</span><br><span class="line">修改后必须执行<span class="string">"LOAD ... TO RUNTIME"</span>才能加载到RUNTIME生效，执行save ... to disk才能将配置持久化保存到磁盘。</span><br></pre></td></tr></table></figure><p>global_variables 有80多个变量可以设置，其中就包括监听的端口、管理账号、禁用monitor等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">(admin@127.0.0.1:6032) [(none)]&gt; show tables;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| tables                                     |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| global_variables                           |</span><br><span class="line">| mysql_collations                           |</span><br><span class="line">| mysql_group_replication_hostgroups         |</span><br><span class="line">| mysql_query_rules                          |</span><br><span class="line">| mysql_query_rules_fast_routing             |</span><br><span class="line">| mysql_replication_hostgroups               |</span><br><span class="line">| mysql_servers                              |</span><br><span class="line">| mysql_users                                |</span><br><span class="line">| proxysql_servers                           |</span><br><span class="line">| runtime_checksums_values                   |</span><br><span class="line">| runtime_global_variables                   |</span><br><span class="line">| runtime_mysql_group_replication_hostgroups |</span><br><span class="line">| runtime_mysql_query_rules                  |</span><br><span class="line">| runtime_mysql_query_rules_fast_routing     |</span><br><span class="line">| runtime_mysql_replication_hostgroups       |</span><br><span class="line">| runtime_mysql_servers                      |</span><br><span class="line">| runtime_mysql_users                        |</span><br><span class="line">| runtime_proxysql_servers                   |</span><br><span class="line">| runtime_scheduler                          |</span><br><span class="line">| scheduler                                  |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line">  </span><br><span class="line">(admin@127.0.0.1:6032) [(none)]&gt; show tables from stats;</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| tables                               |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| global_variables                     |</span><br><span class="line">| stats_memory_metrics                 |</span><br><span class="line">| stats_mysql_commands_counters        |</span><br><span class="line">| stats_mysql_connection_pool          |</span><br><span class="line">| stats_mysql_connection_pool_reset    |</span><br><span class="line">| stats_mysql_global                   |</span><br><span class="line">| stats_mysql_prepared_statements_info |</span><br><span class="line">| stats_mysql_processlist              |</span><br><span class="line">| stats_mysql_query_digest             |</span><br><span class="line">| stats_mysql_query_digest_reset       |</span><br><span class="line">| stats_mysql_query_rules              |</span><br><span class="line">| stats_mysql_users                    |</span><br><span class="line">| stats_proxysql_servers_checksums     |</span><br><span class="line">| stats_proxysql_servers_metrics       |</span><br><span class="line">| stats_proxysql_servers_status        |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">15 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">(admin@127.0.0.1:6032) [(none)]&gt; show create table mysql_servers\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       table: mysql_servers</span><br><span class="line">Create Table: CREATE TABLE mysql_servers (</span><br><span class="line">    hostgroup_id INT CHECK (hostgroup_id&gt;=0) NOT NULL DEFAULT 0,</span><br><span class="line">    hostname VARCHAR NOT NULL,</span><br><span class="line">    port INT NOT NULL DEFAULT 3306,</span><br><span class="line">    status VARCHAR CHECK (UPPER(status) IN (<span class="string">'ONLINE'</span>,<span class="string">'SHUNNED'</span>,<span class="string">'OFFLINE_SOFT'</span>, <span class="string">'OFFLINE_HARD'</span>)) NOT NULL DEFAULT <span class="string">'ONLINE'</span>,</span><br><span class="line">    weight INT CHECK (weight &gt;= 0) NOT NULL DEFAULT 1,</span><br><span class="line">    compression INT CHECK (compression &gt;=0 AND compression &lt;= 102400) NOT NULL DEFAULT 0,</span><br><span class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 1000,</span><br><span class="line">    max_replication_lag INT CHECK (max_replication_lag &gt;= 0 AND max_replication_lag &lt;= 126144000) NOT NULL DEFAULT 0,</span><br><span class="line">    use_ssl INT CHECK (use_ssl IN(0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    max_latency_ms INT UNSIGNED CHECK (max_latency_ms&gt;=0) NOT NULL DEFAULT 0,</span><br><span class="line">    comment VARCHAR NOT NULL DEFAULT <span class="string">''</span>,</span><br><span class="line">    PRIMARY KEY (hostgroup_id, hostname, port) )</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">ERROR: No query specified</span><br><span class="line">  </span><br><span class="line">(admin@127.0.0.1:6032) [(none)]&gt; select * from mysql_servers;</span><br><span class="line">+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname      | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 10           | 172.16.60.211 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 20           | 172.16.60.212 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 20           | 172.16.60.213 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+---------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p><strong>-</strong>  hostgroup_id: ProxySQL通过 hostgroup (<strong>下称HG</strong>) 的形式组织后端db实例。一个 HG 代表同属于一个角色<br><strong>-</strong>  该表的主键是 (hostgroup_id, hostname, port)，可以看到一个 hostname:port 可以在多个hostgroup里面，如上面的 10.0.100.100:3307，这样可以避免 HG 1000 的从库全都不可用时，依然可以把读请求发到主库上。<br><strong>-</strong>  一个 HG 可以有多个实例，即多个从库，可以通过 weight 分配权重<br><strong>-</strong>  hostgroup_id 0 是一个特殊的HG，路由查询的时候，没有匹配到规则则默认选择 HG 0<br><strong>-</strong>  status:<br><strong>-</strong>  ONLINE: 当前后端实例状态正常<br>   <strong>-</strong>  SHUNNED: 临时被剔除，可能因为后端 too many connections error，或者超过了可容忍延迟阀值 max_replication_lag<br>   <strong>-</strong>  OFFLINE_SOFT: “软离线”状态，不再接受新的连接，但已建立的连接会等待活跃事务完成。<br>   <strong>-</strong>  OFFLINE_HARD: “硬离线”状态，不再接受新的连接，已建立的连接或被强制中断。当后端实例宕机或网络不可达，会出现。<br><strong>-</strong>  max_connections: 允许连接到该后端mysql实例的最大连接数。不要大于MySQL设置的 max_connections，如果后端实例 hostname:port 在多个 hostgroup 里，以较大者为准，而不是各自独立允许的最大连接数。<br><strong>-</strong>  max_replication_lag: 允许的最大延迟，主库不受这个影响，默认0。如果 &gt; 0， monitor 模块监控主从延迟大于阀值时，会临时把它变为 SHUNNED 。<br><strong>-</strong>  max_latency_ms: mysql_ping 响应时间，大于这个阀值会把它从连接池剔除（即使是ONLINE）<br><strong>-</strong>  comment: 备注，不建议留空。可以通过它的内容如json格式的数据，配合自己写的check脚本，完成一些自动化的工作。</p><p>表 mysql_users</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show create table mysql_users\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       table: mysql_users</span><br><span class="line">Create Table: CREATE TABLE mysql_users (</span><br><span class="line">    username VARCHAR NOT NULL,</span><br><span class="line">    password VARCHAR,</span><br><span class="line">    active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 1,</span><br><span class="line">    use_ssl INT CHECK (use_ssl IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    default_hostgroup INT NOT NULL DEFAULT 0,</span><br><span class="line">    default_schema VARCHAR,</span><br><span class="line">    schema_locked INT CHECK (schema_locked IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    transaction_persistent INT CHECK (transaction_persistent IN (0,1)) NOT NULL DEFAULT 1,</span><br><span class="line">    fast_forward INT CHECK (fast_forward IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    backend INT CHECK (backend IN (0,1)) NOT NULL DEFAULT 1,</span><br><span class="line">    frontend INT CHECK (frontend IN (0,1)) NOT NULL DEFAULT 1,</span><br><span class="line">    max_connections INT CHECK (max_connections &gt;=0) NOT NULL DEFAULT 10000,</span><br><span class="line">    PRIMARY KEY (username, backend),</span><br><span class="line">    UNIQUE (username, frontend))</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">ERROR: No query specified</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; select * from mysql_users;</span><br><span class="line">+-----------+------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">| username  | password   | active | use_ssl | default_hostgroup | default_schema | schema_locked | transaction_persistent | fast_forward | backend | frontend | max_connections |</span><br><span class="line">+-----------+------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">| proxysql  | proxysql   | 1      | 0       | 2                 | NULL           | 0             | 1                      | 0            | 1       | 1        | 10000           |</span><br><span class="line">| root      | passwd     | 1      | 0       | 10                | NULL           | 0             | 1                      | 0            | 1       | 1        | 10000           |</span><br><span class="line">| sqlsender | P@ssword1! | 1      | 0       | 10                | NULL           | 0             | 1                      | 0            | 1       | 1        | 10000           |</span><br><span class="line">+-----------+------------+--------+---------+-------------------+----------------+---------------+------------------------+--------------+---------+----------+-----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; select username,password,transaction_persistent,active,backend,frontend,max_connections from runtime_mysql_users;</span><br><span class="line">+-----------+-------------------------------------------+------------------------+--------+---------+----------+-----------------+</span><br><span class="line">| username  | password                                  | transaction_persistent | active | backend | frontend | max_connections |</span><br><span class="line">+-----------+-------------------------------------------+------------------------+--------+---------+----------+-----------------+</span><br><span class="line">| proxysql  | *BF27B4C7AAD278126E228AA8427806E870F64F39 | 1                      | 1      | 0       | 1        | 10000           |</span><br><span class="line">| root      | *59C70DA2F3E3A5BDF46B68F5C8B8F25762BCCEF0 | 1                      | 1      | 0       | 1        | 10000           |</span><br><span class="line">| sqlsender | *50572A5FABC7DA9CEE5EB5977EDDE59E38967422 | 1                      | 1      | 0       | 1        | 10000           |</span><br><span class="line">| proxysql  | *BF27B4C7AAD278126E228AA8427806E870F64F39 | 1                      | 1      | 1       | 0        | 10000           |</span><br><span class="line">| root      | *59C70DA2F3E3A5BDF46B68F5C8B8F25762BCCEF0 | 1                      | 1      | 1       | 0        | 10000           |</span><br><span class="line">| sqlsender | *50572A5FABC7DA9CEE5EB5977EDDE59E38967422 | 1                      | 1      | 1       | 0        | 10000           |</span><br><span class="line">+-----------+-------------------------------------------+------------------------+--------+---------+----------+-----------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br></pre></td></tr></table></figure><p><strong>-</strong>  username, password: 连接后端db的用户密码。<br>这个密码你可以插入明文，也可以插入hash加密后的密文，proxysql会检查你插入的时候密码是否以 * 开头来判断，而且密文要在其它地方使用 PASSWORD()生成。但到 runtime_mysql_users 里，都统一变成了密文，所以可以明文插入，再 SAVE MYSQL USERS TO MEM，此时看到的也是HASH密文。<br><strong>-</strong>  active: 是否生效该用户。<br><strong>-</strong>  default_hostgroup: 这个用户的请求没有匹配到规则时，默认发到这个 hostgroup，默认0<br><strong>-</strong>  default_schema: 这个用户连接时没有指定 database name 时，默认使用的schema<br>注意表面上看默认为NULL，但实际上受到变量 mysql-default_schema 的影响，默认为 information_schema。关于这个参考我所提的 issue #988<br><strong>-</strong>  transaction_persistent: 如果设置为1，连接上ProxySQL的会话后，如果在一个hostgroup上开启了事务，那么后续的sql都继续维持在这个hostgroup上，不伦是否会匹配上其它路由规则，直到事务结束。<br>虽然默认是0，但我建议还是设成1，虽然一般来说由于前段应用的空值，为0出问题的情况几乎很小。作者也在考虑默认设成 1，refer this issue #793<br><strong>-</strong>  frontend, backend: 目前版本这两个都需要使用默认的1，将来有可能会把 Client -&gt; ProxySQL (frontend) 与 ProxySQL -&gt; BackendDB (backend)的认证分开。从 runtime_mysql_users 表内容看到，记录数比 mysql_users 多了一倍，就是把前端认证与后端认证独立出来的结果。<br><strong>-</strong>  fast_forward: 忽略查询重写/缓存层，直接把这个用户的请求透传到后端DB。相当于只用它的连接池功能，一般不用，路由规则 .* 就行了。</p><p>表 mysql_replication_hostgroups</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show create table mysql_replication_hostgroups\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       table: mysql_replication_hostgroups</span><br><span class="line">Create Table: CREATE TABLE mysql_replication_hostgroups (</span><br><span class="line">    writer_hostgroup INT CHECK (writer_hostgroup&gt;=0) NOT NULL PRIMARY KEY,</span><br><span class="line">    reader_hostgroup INT NOT NULL CHECK (reader_hostgroup&lt;&gt;writer_hostgroup AND reader_hostgroup&gt;0),</span><br><span class="line">    comment VARCHAR NOT NULL DEFAULT <span class="string">''</span>, UNIQUE (reader_hostgroup))</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line">  </span><br><span class="line">ERROR: No query specified</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; select * from mysql_replication_hostgroups;</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">| writer_hostgroup | reader_hostgroup | comment |</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">| 10               | 20               | 1       |</span><br><span class="line">+------------------+------------------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p>定义 hostgroup 的主从关系。ProxySQL monitor 模块会监控 HG 后端所有servers 的 <code>read_only</code> 变量，如果发现从库的 read_only 变为0、主库变为1，则认为角色互换了，自动改写 mysql_servers 表里面 hostgroup 关系，达到自动 Failover 效果。</p><p>表 mysql_query_rules<br>mysql_query_rules 是ProxySQL非常核心一个表，定义查询路由规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; show create table mysql_query_rules\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       table: mysql_query_rules</span><br><span class="line">Create Table: CREATE TABLE mysql_query_rules (</span><br><span class="line">    rule_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,</span><br><span class="line">    active INT CHECK (active IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    username VARCHAR,</span><br><span class="line">    schemaname VARCHAR,</span><br><span class="line">    flagIN INT NOT NULL DEFAULT 0,</span><br><span class="line">    client_addr VARCHAR,</span><br><span class="line">    proxy_addr VARCHAR,</span><br><span class="line">    proxy_port INT,</span><br><span class="line">    digest VARCHAR,</span><br><span class="line">    match_digest VARCHAR,</span><br><span class="line">    match_pattern VARCHAR,</span><br><span class="line">    negate_match_pattern INT CHECK (negate_match_pattern IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    re_modifiers VARCHAR DEFAULT <span class="string">'CASELESS'</span>,</span><br><span class="line">    flagOUT INT,</span><br><span class="line">    replace_pattern VARCHAR,</span><br><span class="line">    destination_hostgroup INT DEFAULT NULL,</span><br><span class="line">    cache_ttl INT CHECK(cache_ttl &gt; 0),</span><br><span class="line">    reconnect INT CHECK (reconnect IN (0,1)) DEFAULT NULL,</span><br><span class="line">    timeout INT UNSIGNED,</span><br><span class="line">    retries INT CHECK (retries&gt;=0 AND retries &lt;=1000),</span><br><span class="line">    delay INT UNSIGNED,</span><br><span class="line">    next_query_flagIN INT UNSIGNED,</span><br><span class="line">    mirror_flagOUT INT UNSIGNED,</span><br><span class="line">    mirror_hostgroup INT UNSIGNED,</span><br><span class="line">    error_msg VARCHAR,</span><br><span class="line">    OK_msg VARCHAR,</span><br><span class="line">    sticky_conn INT CHECK (sticky_conn IN (0,1)),</span><br><span class="line">    multiplex INT CHECK (multiplex IN (0,1,2)),</span><br><span class="line">    <span class="built_in">log</span> INT CHECK (<span class="built_in">log</span> IN (0,1)),</span><br><span class="line">    apply INT CHECK(apply IN (0,1)) NOT NULL DEFAULT 0,</span><br><span class="line">    comment VARCHAR)</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line">  </span><br><span class="line">ERROR: No query specified</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; select * from mysql_query_rules;</span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">| rule_id | active | username | schemaname | flagIN | client_addr | proxy_addr | proxy_port | digest | match_digest         | match_pattern | negate_match_pattern | re_modifiers | flagOUT | replace_pattern | destination_hostgroup | cache_ttl | reconnect | timeout | retries | delay | next_query_flagIN | mirror_flagOUT | mirror_hostgroup | error_msg | OK_msg | sticky_conn | multiplex | <span class="built_in">log</span> | apply | comment |</span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">| 1       | 1      | NULL     | NULL       | 0      | NULL        | NULL       | NULL       | NULL   | ^SELECT.*FOR UPDATE$ | NULL          | 0                    | CASELESS     | NULL    | NULL            | 10                    | NULL      | NULL      | NULL    | NULL    | NULL  | NULL              | NULL           | NULL             | NULL      | NULL   | NULL        | NULL      | NULL | 1     | NULL    |</span><br><span class="line">| 2       | 1      | NULL     | NULL       | 0      | NULL        | NULL       | NULL       | NULL   | ^SELECT              | NULL          | 0                    | CASELESS     | NULL    | NULL            | 20                    | NULL      | NULL      | NULL    | NULL    | NULL  | NULL              | NULL           | NULL             | NULL      | NULL   | NULL        | NULL      | NULL | 1     | NULL    |</span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br></pre></td></tr></table></figure><p><strong>-</strong>  rule_id: 表主键，自增。规则处理是以 rule_id 的顺序进行。<br><strong>-</strong>  active: 只有 active=1 的规则才会参与匹配。<br><strong>-</strong>  username: 如果非 NULL，只有连接用户是 username 的值才会匹配。<br><strong>-</strong>  schemaname: 如果非 NULL，只有查询连接使用的db是 schemaname 的值才会匹配。<br>   注意如果是 NULL，不代表连接没有使用schema，而是不伦任何schema都进一步匹配。<br><strong>-</strong>  flagIN, flagOUT, apply: 用来定义路由链 chains of rules。<br>   <strong>-</strong>  首先会检查 flagIN=0 的规则，以rule_id的顺序；如果都没匹配上，则走这个用户的 default_hostgroup。<br>   <strong>-</strong>  当匹配一条规则后，会检查 flagOUT。<br>      <strong>-</strong>  如果不为NULL，并且 flagIN != flagOUT ，则进入以flagIN为上一个flagOUT值的新规则链。<br>      <strong>-</strong>  如果不为NULL，并且 flagIN = flagOUT，则应用这条规则。<br>      <strong>-</strong>  如果为NULL，或者 apply=1，则结束，应用这条规则。<br>      <strong>-</strong>  如果最终没有匹配到，则找到这个用户的 default_hostgroup。<br><strong>-</strong>  client_addr: 匹配客户端来源IP<br><strong>-</strong>  proxy_addr, proxy_port: 匹配本地proxysql的IP、端口。我目前没有想到它的应用场景，可能是把proxysql监听在多个接口上，分发到不同的业务？<br><strong>-</strong>  digest: 精确的匹配一类查询。<br><strong>-</strong>  match_digest: 正则匹配一类查询。query digest 是指对查询去掉具体值后进行“模糊化”后的查询，类似 pt-fingerprint / pt-query-digest 的效果。<br><strong>-</strong>  match_pattern: 正则匹配查询。</p><p>以上都是匹配查询的规则，1.3.5版本使用的正则引擎只有 RE2 ，1.4版本可以通过变量 mysql-query_processor_regex 设置 RE2 或者 PCRE，且1.4开始默认是PCRE。<br>推荐用 match_digest 。关于每条查询都会计算digest对性能的影响，计算query digest确实会有性能损失，但是这却是proxysql里面非常重要的特性，主要是两点：<br>   <strong>-</strong>  proxysql无法知道连接复用(multipexing)是否必须被自动禁用，比如连接里面有variables/tmp tables/lock table等特殊命令，是不能复用的。<br>   <strong>-</strong>  完整的查询去匹配正则的效率，一般没有参数化后的查询匹配效率高，因为有很长的字符串内容需要处理。再者，SELECT * FROM randomtable WHERE comment LIKE ‘%INTO sbtest1 %                FROM sbtest2 %’字符串里有类似这样的语句，很难排除误匹配。<br><strong>-</strong>  negate_match_pattern: 反向匹配，相当于对 match_digest/match_pattern 的匹配取反。<br><strong>-</strong>  re_modifiers: 修改正则匹配的参数，比如默认的：忽略大小写CASELESS、禁用GLOBAL.</p><p><strong>上面都是匹配规则，下面是匹配后的行为</strong><br><strong>-</strong>  replace_pattern: 查询重写，默认为空，不rewrite。<br><strong>-</strong>  rewrite规则要遵守 RE2::Replace 。<br>destination_hostgroup: 路由查询到这个 hostgroup。当然如果用户显式 start transaction 且 transaction_persistent=1，那么即使匹配到了，也依然按照事务里第一条sql的路由规则去走。<br><strong>-</strong>  cache_ttl: 查询结果缓存的毫秒数。<br>proxysql这个 Query Cache 与 MySQL 自带的query cache不是同一个。proxysql query cache也不会关心后端数据是否被修改，它所做的就是针对某些特定种类的查询结果进行缓存，比如一些历史数据的count结果。一般不设。<br><strong>-</strong>  timeout: 这一类查询执行的最大时间（毫秒），超时则自动kill。<br>这是对后端DB的保护机制，相当于阿里云RDS loose_max_statement_time 变量的功能，但是注意不同的是，阿里云这个变量的时间时不包括DML操作出现InnoDB行锁等待的时间，而ProxySQL的这个 timeout 是计算从发送sql到等待响应的时间。默认mysql-default_query_timeout给的是 10h .<br><strong>-</strong>  retries: 语句在执行时失败时，重试次数。默认由 mysql-query_retries_on_failure变量指定，为1 。<br>   个人建议把它设成0，即不重试。因为执行失败，对select而言很少见，主要是dml，但自己重试对数据不放心。<br><strong>-</strong>  delay: 查询延迟执行，这是ProxySQL提供的限流机制，会让其它的查询优先执行。<br>   默认值 mysql-default_query_delay，为0。我们一般不用，其实还是要配合应用端使用，比如这边延迟执行，但上层等待你返回，那前端不就堵住了，没准出现雪崩效应。<br><strong>-</strong>  mirror_flagOUT,mirror_hostgroup<br>这两个高级了，目前这部分文档不全，功能是SQL镜像。顾名思义，就是把匹配到的SQL除了发送到 destination_hostgroup，同时镜像一份到这里的hostgroup，比如我们的测试库。比如这种场景，数据库要从5.6升级到5.7，要验证现有查询语句对5.7的适用情况，就可以把生产流量镜像到5.7新库上验证。<br><strong>-</strong>  error_msg: 默认为NULL，如果指定了则这个查询直接被 block 掉，马上返回这个错误信息。<br>这个功能也很实用，比如线上突然冒出一个 “坏查询”，应用端不方便马上发版解决，我们就可以在这配置一个规则，把查询屏蔽掉，想正常的mysql报错那样抛异常。下一篇文章有演示。<br><strong>-</strong>  multiplex: 连接是否复用。<br><strong>-</strong>  log: 是否记录查询日志。可以看到log是否记录的对象是根据规则。<br>要开启日志记录，需要设置变量 mysql-eventslog_filename 来指定文件名，然后这个 log 标记为1。但是目前proxysql记录的日志是二进制格式，需要特定的工具才能读取： eventslog_reader_sample 。这个工具在源码目录 tools下面。</p><p>proxysql对后端server健康检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">MySQL [monitor]&gt; show variables like <span class="string">"mysql-monitor%"</span>;</span><br><span class="line">+-----------------------------------------------------+------------+</span><br><span class="line">| Variable_name                                       | Value      |</span><br><span class="line">+-----------------------------------------------------+------------+</span><br><span class="line">| mysql-monitor_enabled                               | <span class="literal">true</span>       |</span><br><span class="line">| mysql-monitor_connect_timeout                       | 600        |</span><br><span class="line">| mysql-monitor_ping_max_failures                     | 3          |</span><br><span class="line">| mysql-monitor_ping_timeout                          | 1000       |</span><br><span class="line">| mysql-monitor_read_only_max_timeout_count           | 3          |</span><br><span class="line">| mysql-monitor_replication_lag_interval              | 10000      |</span><br><span class="line">| mysql-monitor_replication_lag_timeout               | 1000       |</span><br><span class="line">| mysql-monitor_groupreplication_healthcheck_interval | 5000       |</span><br><span class="line">| mysql-monitor_groupreplication_healthcheck_timeout  | 800        |</span><br><span class="line">| mysql-monitor_replication_lag_use_percona_heartbeat |            |</span><br><span class="line">| mysql-monitor_query_interval                        | 60000      |</span><br><span class="line">| mysql-monitor_query_timeout                         | 100        |</span><br><span class="line">| mysql-monitor_slave_lag_when_null                   | 60         |</span><br><span class="line">| mysql-monitor_wait_timeout                          | <span class="literal">true</span>       |</span><br><span class="line">| mysql-monitor_writer_is_also_reader                 | <span class="literal">true</span>       |</span><br><span class="line">| mysql-monitor_username                              | monitor    |</span><br><span class="line">| mysql-monitor_password                              | P@ssword1! |</span><br><span class="line">| mysql-monitor_history                               | 600000     |</span><br><span class="line">| mysql-monitor_connect_interval                      | 60000      |</span><br><span class="line">| mysql-monitor_ping_interval                         | 10000      |</span><br><span class="line">| mysql-monitor_read_only_interval                    | 1500       |</span><br><span class="line">| mysql-monitor_read_only_timeout                     | 500        |</span><br><span class="line">+-----------------------------------------------------+------------+</span><br><span class="line">22 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br></pre></td></tr></table></figure><h2 id="ProxySQL配置后端DB-server"><a href="#ProxySQL配置后端DB-server" class="headerlink" title="ProxySQL配置后端DB server"></a><strong>ProxySQL配置后端DB server</strong></h2><p><strong>两种方式，区别在于</strong></p><p>1)  一种是在往mysql_servers表中添加server时就为其划分好hostgroup_id（例如0表示写组，1表示读组）<br>2)  另一种往mysql_servers表中添加server时不区分hostgroup_id（例如全部设为0），然后通过mysql_replication_hostgroups表中的值，<br>根据proxysql检测到的各server的read_only变量值来自动为后端server设置hostgroup_id</p><p><strong>这里强烈推荐用第一种方式</strong><br>因为第一种是完全由我们控制的;而第二种假如我们误将读server的read_only属性设置为0，则proxysql会将其重新分配到写组，这绝对是不期望的。</p><p><strong>ProxySQL下添加与修改配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1) 添加配置</span><br><span class="line">需要添加配置时，直接操作的是MEMORAY，例如：添加一个程序用户，在mysql_users表中执行一个插入操作：</span><br><span class="line">MySQL [(none)]&gt; insert into mysql_users(username,password,active,default_hostgroup,transaction_persistent) values(<span class="string">'myadmin'</span>,<span class="string">'mypass'</span>,1,0,1);</span><br><span class="line">  </span><br><span class="line">这样就完成了一个用户的添加。要让这个insert生效，还需要执行如下操作：</span><br><span class="line">MySQL [(none)]&gt;load mysql users to runtime;</span><br><span class="line">表示将修改后的配置(MEMORY层)用到实际生产环境（RUNTIME层）</span><br><span class="line">  </span><br><span class="line">如果想保存这个设置永久生效，还需要执行如下操作：</span><br><span class="line">MySQL [(none)]&gt;save mysql users to disk;</span><br><span class="line">表示将memoery中的配置保存到磁盘中去。</span><br><span class="line">  </span><br><span class="line">除了上面两个操作，还可以执行如下操作：</span><br><span class="line">MySQL [(none)]&gt;load mysql users to memory;</span><br><span class="line">表示将磁盘中持久化的配置拉一份到memory中来。</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt;load mysql users from config;</span><br><span class="line">表示将配置文件中的配置加载到memeory中。</span><br><span class="line">  </span><br><span class="line">2) 持久化配置</span><br><span class="line">以上SQL命令是对mysql_users进行的操作，同理，还可以对mysql_servers表、mysql_query_rules表、global_variables表等执行类似的操作。</span><br><span class="line">如对mysql_servers表插入完成数据后，要执行保存和加载操作，可执行如下SQL命令：</span><br><span class="line">MySQL [(none)]&gt; load mysql servers to runtime;</span><br><span class="line">MySQL [(none)]&gt; save mysql servers to disk;</span><br><span class="line">  </span><br><span class="line">对mysql_query_rules表插入完成数据后，要执行保存和加载操作，可执行如下SQL命令：</span><br><span class="line">MySQL [(none)]&gt; load mysql query rules to runtime;</span><br><span class="line">MySQL [(none)]&gt; save mysql query rules to disk;</span><br><span class="line">  </span><br><span class="line">对global_variables表插入完成数据后，要执行保存和加载操作，可执行如下SQL命令：</span><br><span class="line">  </span><br><span class="line">以下命令加载或保存mysql variables（global_variables）:</span><br><span class="line">MySQL [(none)]&gt;load mysql variables to runtime;</span><br><span class="line">MySQL [(none)]&gt;save mysql variables to disk;</span><br><span class="line">  </span><br><span class="line">以下命令加载或保存admin variables（select * from global_variables <span class="built_in">where</span> variable_name like <span class="string">'admin-%'</span>）:</span><br><span class="line">MySQL [(none)]&gt; load admin variables to runtime;</span><br><span class="line">MySQL [(none)]&gt;save admin variables to disk;</span><br></pre></td></tr></table></figure><h2 id="实战功能验证"><a href="#实战功能验证" class="headerlink" title="实战功能验证"></a>实战功能验证</h2><p>针对GTID模式的主从同步，另两个从库都要设置read_only=on<br>接下来通过实战操作来全面了解一下 ProxySQL 的特性和使用场景。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8307f670/1.png" alt></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a><strong>实验环境</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">172.16.60.211    mysql-master       安装Mysql5.7</span><br><span class="line">172.16.60.212    mysql-slave1       安装Mysql5.7</span><br><span class="line">172.16.60.213    mysql-slave2       安装Mysql5.7</span><br><span class="line">172.16.60.214    mysql-proxy        安装ProxySQL，Mysql-client</span><br><span class="line"> </span><br><span class="line">系统都是CentOS7.5，MySQL版本是5.7，准备一主两从架构(基于GTID的同步,两个从库都要开启read_only=on)来配合ProxySQL。</span><br><span class="line">[root@mysql-master ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br><span class="line"> </span><br><span class="line">1) 三个节点各自设置主机名</span><br><span class="line">[root@mysql-master ~]<span class="comment"># hostnamectl --static set-hostname mysql-master</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># hostname</span></span><br><span class="line">mysql-master</span><br><span class="line">  </span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># hostnamectl --static set-hostname mysql-slave1</span></span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># hostname</span></span><br><span class="line">mysql-slave</span><br><span class="line"> </span><br><span class="line">[root@mysql-slave2 ~]<span class="comment"># hostnamectl --static set-hostname mysql-slave2</span></span><br><span class="line">[root@mysql-slave2 ~]<span class="comment"># hostname</span></span><br><span class="line">mysql-slave</span><br><span class="line"> </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># hostnamectl --static set-hostname mysql-proxy</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># hostname</span></span><br><span class="line">mysql-proxy</span><br><span class="line">  </span><br><span class="line">2) 所有节点关闭selinux和iptables防火墙</span><br><span class="line">[root@mysql-master ~]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># cat /etc/sysconfig/selinux |grep "SELINUX=disabled"</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">  </span><br><span class="line">[root@mysql-master ~]<span class="comment"># iptables -F</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># systemctl stop firewalld </span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br></pre></td></tr></table></figure><h3 id="安装Mysql-5-7-在三个mysql节点上安装"><a href="#安装Mysql-5-7-在三个mysql节点上安装" class="headerlink" title="安装Mysql 5.7  (在三个mysql节点上安装)"></a><strong>安装Mysql 5.7  (在三个mysql节点上安装)</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">在三个mysql节点机上使用yum方式安装Mysql5.7，参考：https://www.cnblogs.com/kevingrace/p/8340690.html</span><br><span class="line">     </span><br><span class="line">安装MySQL yum资源库</span><br><span class="line">[root@mysql-master ~]<span class="comment"># yum localinstall https://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span></span><br><span class="line">     </span><br><span class="line">安装MySQL 5.7</span><br><span class="line">[root@mysql-master ~]<span class="comment"># yum install -y mysql-community-server</span></span><br><span class="line">     </span><br><span class="line">启动MySQL服务器和MySQL的自动启动</span><br><span class="line">[root@mysql-master ~]<span class="comment"># systemctl start mysqld.service</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># systemctl enable mysqld.service</span></span><br><span class="line">     </span><br><span class="line">设置登录密码</span><br><span class="line">由于MySQL从5.7开始不允许首次安装后使用空密码进行登录！为了加强安全性，系统会随机生成一个密码以供管理员首次登录使用，</span><br><span class="line">这个密码记录在/var/<span class="built_in">log</span>/mysqld.log文件中，使用下面的命令可以查看此密码：</span><br><span class="line">[root@mysql-master ~]<span class="comment"># cat /var/log/mysqld.log|grep 'A temporary password'</span></span><br><span class="line">2019-01-11T05:53:17.824073Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: TaN.k:*Qw2xs</span><br><span class="line">     </span><br><span class="line">使用上面查看的密码TaN.k:*Qw2xs 登录mysql，并重置密码为123456</span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p                 #输入默认的密码：TaN.k:*Qw2xs</span></span><br><span class="line">.............</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">     </span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_length=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">     </span><br><span class="line">mysql&gt; <span class="built_in">set</span> password=password(<span class="string">"123456"</span>);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line">     </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">     </span><br><span class="line">查看mysql版本</span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">........</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.7.24    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">    </span><br><span class="line">=====================================================================</span><br><span class="line">温馨提示</span><br><span class="line">mysql5.7通过上面默认安装后，执行语句可能会报错：</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line">    </span><br><span class="line">这个报错与Mysql 密码安全策略validate_password_policy的值有关，validate_password_policy可以取0、1、2三个值：</span><br><span class="line">解决办法：</span><br><span class="line"><span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure><h3 id="配置Mysql基于GTID的主从同步"><a href="#配置Mysql基于GTID的主从同步" class="headerlink" title="*配置Mysql基于GTID的主从同步  *"></a>*<em>配置Mysql基于GTID的主从同步  *</em></h3><p>在mysql-master 和 mysql-slave1、mysql-slave2节点上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br></pre></td><td class="code"><pre><span class="line">1) 主数据库mysql-master (172.16.60.211)的配置操作</span><br><span class="line">[root@mysql-master ~]<span class="comment"># &gt;/etc/my.cnf</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">        </span><br><span class="line">symbolic-links = 0</span><br><span class="line">        </span><br><span class="line"><span class="built_in">log</span>-error = /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">    </span><br><span class="line"><span class="comment">#GTID:</span></span><br><span class="line">server_id = 1</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">      </span><br><span class="line"><span class="comment">#binlog</span></span><br><span class="line">log_bin = master-bin</span><br><span class="line"><span class="built_in">log</span>-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1    </span><br><span class="line">sync_binlog = 1        </span><br><span class="line">     </span><br><span class="line"><span class="comment">#relay log</span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line"> </span><br><span class="line">配置完成之后，别忘了重启Mysql</span><br><span class="line">[root@mysql-master ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line"> </span><br><span class="line">登录mysql，查看一下master状态， 发现多了一项<span class="string">"Executed_Gtid_Set "</span></span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">.........</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+-------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+-------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| master-bin.000002 |      550 |              |                  | fc39b161-22ca-11e9-a638-005056ac6820:1-2 |</span><br><span class="line">+-------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show global variables like <span class="string">'%uuid%'</span>;</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line">| Variable_name | Value                                |</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line">| server_uuid   | fc39b161-22ca-11e9-a638-005056ac6820 |</span><br><span class="line">+---------------+--------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show global variables like <span class="string">'%gtid%'</span>;</span><br><span class="line">+----------------------------------+------------------------------------------+</span><br><span class="line">| Variable_name                    | Value                                    |</span><br><span class="line">+----------------------------------+------------------------------------------+</span><br><span class="line">| binlog_gtid_simple_recovery      | ON                                       |</span><br><span class="line">| enforce_gtid_consistency         | ON                                       |</span><br><span class="line">| gtid_executed                    | fc39b161-22ca-11e9-a638-005056ac6820:1-2 |</span><br><span class="line">| gtid_executed_compression_period | 1000                                     |</span><br><span class="line">| gtid_mode                        | ON                                       |</span><br><span class="line">| gtid_owned                       |                                          |</span><br><span class="line">| gtid_purged                      |                                          |</span><br><span class="line">| session_track_gtids              | OFF                                      |</span><br><span class="line">+----------------------------------+------------------------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">主库执行从库复制授权</span><br><span class="line">mysql&gt; grant replication slave,replication client on *.* to slave@<span class="string">'172.16.60.212'</span> identified by <span class="string">"slave@123"</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.09 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; grant replication slave,replication client on *.* to slave@<span class="string">'172.16.60.213'</span> identified by <span class="string">"slave@123"</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.03 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysql&gt; show grants <span class="keyword">for</span> slave@<span class="string">'172.16.60.212'</span>;</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> slave@172.16.60.212                                                |</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">| GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'172.16.60.212'</span> |</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show grants <span class="keyword">for</span> slave@<span class="string">'172.16.60.213'</span>;</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">| Grants <span class="keyword">for</span> slave@172.16.60.213                                                |</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">| GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'172.16.60.213'</span> |</span><br><span class="line">+-------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">在主数据库机器上创建一个测试库kevin（为了测试效果）</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; CREATE DATABASE kevin CHARACTER SET utf8 COLLATE utf8_general_ci; </span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; use kevin;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table <span class="keyword">if</span> not exists haha (id int(10) PRIMARY KEY AUTO_INCREMENT,name varchar(50) NOT NULL);</span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; insert into kevin.haha values(1,<span class="string">"congcong"</span>),(2,<span class="string">"huihui"</span>),(3,<span class="string">"grace"</span>); </span><br><span class="line">Query OK, 3 rows affected (0.16 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from kevin.haha;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | congcong |</span><br><span class="line">|  2 | huihui   |</span><br><span class="line">|  3 | grace    |</span><br><span class="line">+----+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">2) 从数据库mysql-slave1 (172.16.60.212)的配置操作</span><br><span class="line">与主服务器配置大概一致，除了server_id不一致外，从服务器还可以在配置文件里面添加：<span class="string">"read_only＝on"</span> ,</span><br><span class="line">使从服务器只能进行读取操作，此参数对超级用户无效，并且不会影响从服务器的复制；</span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># &gt;/etc/my.cnf</span></span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">        </span><br><span class="line">symbolic-links = 0</span><br><span class="line">        </span><br><span class="line"><span class="built_in">log</span>-error = /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">    </span><br><span class="line"><span class="comment">#GTID:</span></span><br><span class="line">server_id = 2</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">      </span><br><span class="line"><span class="comment">#binlog</span></span><br><span class="line">log_bin = master-bin</span><br><span class="line"><span class="built_in">log</span>-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1</span><br><span class="line">sync_binlog = 1</span><br><span class="line">      </span><br><span class="line"><span class="comment">#relay log</span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line">read_only = on</span><br><span class="line"> </span><br><span class="line">配置完成之后，别忘了重启Mysql</span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line"> </span><br><span class="line">接着登录mysql，做主从同步</span><br><span class="line">[root@mysql-slave1 ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">........</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">   </span><br><span class="line">在从数据库里，使用change master 配置主从复制</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; change master to master_host=<span class="string">'172.16.60.211'</span>,master_user=<span class="string">'slave'</span>,master_password=<span class="string">'slave@123'</span>,master_auto_position=1;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.24 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.60.211</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: master-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 2069</span><br><span class="line">               Relay_Log_File: mysql-slave1-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 2284</span><br><span class="line">        Relay_Master_Log_File: master-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">           Retrieved_Gtid_Set: fc39b161-22ca-11e9-a638-005056ac6820:1-8</span><br><span class="line">            Executed_Gtid_Set: 2afbc2f5-22cb-11e9-b9c0-00505688047c:1-2,</span><br><span class="line">fc39b161-22ca-11e9-a638-005056ac6820:1-8</span><br><span class="line">                Auto_Position: 1</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line"> </span><br><span class="line">查看从库的gtid</span><br><span class="line">mysql&gt; show global variables like <span class="string">'%gtid%'</span>;</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name                    | Value                                                                              |</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">| binlog_gtid_simple_recovery      | ON                                                                                 |</span><br><span class="line">| enforce_gtid_consistency         | ON                                                                                 |</span><br><span class="line">| gtid_executed                    | 2afbc2f5-22cb-11e9-b9c0-00505688047c:1-2,</span><br><span class="line">fc39b161-22ca-11e9-a638-005056ac6820:1-8 |</span><br><span class="line">| gtid_executed_compression_period | 1000                                                                               |</span><br><span class="line">| gtid_mode                        | ON                                                                                 |</span><br><span class="line">| gtid_owned                       |                                                                                    |</span><br><span class="line">| gtid_purged                      | 2afbc2f5-22cb-11e9-b9c0-00505688047c:1-2                                           |</span><br><span class="line">| session_track_gtids              | OFF                                                                                |</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"> </span><br><span class="line">接着查看从数据库的数据，发现kevin库已经同步过来了!</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from kevin.haha;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | congcong |</span><br><span class="line">|  2 | huihui   |</span><br><span class="line">|  3 | grace    |</span><br><span class="line">+----+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">3) 从数据库mysql-slave2 (172.16.60.213)的配置操作</span><br><span class="line">[root@mysql-slave2 ~]<span class="comment"># &gt;/etc/my.cnf</span></span><br><span class="line">[root@mysql-slave2 ~]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">        </span><br><span class="line">symbolic-links = 0</span><br><span class="line">        </span><br><span class="line"><span class="built_in">log</span>-error = /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">    </span><br><span class="line"><span class="comment">#GTID:</span></span><br><span class="line">server_id = 3</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">      </span><br><span class="line"><span class="comment">#binlog</span></span><br><span class="line">log_bin = master-bin</span><br><span class="line"><span class="built_in">log</span>-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1</span><br><span class="line">sync_binlog = 1</span><br><span class="line">      </span><br><span class="line"><span class="comment">#relay log</span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line">read_only = on</span><br><span class="line"> </span><br><span class="line">重启mysqld</span><br><span class="line">[root@mysql-slave2 ~]<span class="comment">#  systemctl restart mysqld </span></span><br><span class="line"> </span><br><span class="line">登录mysql，做主从复制</span><br><span class="line">[root@mysql-slave2 ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">.........</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; change master to master_host=<span class="string">'172.16.60.211'</span>,master_user=<span class="string">'slave'</span>,master_password=<span class="string">'slave@123'</span>,master_auto_position=1;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.17 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 172.16.60.211</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: master-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 2069</span><br><span class="line">               Relay_Log_File: mysql-slave2-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 2284</span><br><span class="line">        Relay_Master_Log_File: master-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">..........</span><br><span class="line">..........</span><br><span class="line">           Retrieved_Gtid_Set: fc39b161-22ca-11e9-a638-005056ac6820:1-8</span><br><span class="line">            Executed_Gtid_Set: 26e410b4-22cb-11e9-be44-005056880888:1-2,</span><br><span class="line">fc39b161-22ca-11e9-a638-005056ac6820:1-8</span><br><span class="line">                Auto_Position: 1</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br><span class="line"> </span><br><span class="line">查看从库的gtid</span><br><span class="line">mysql&gt; show global variables like <span class="string">'%gtid%'</span>;</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name                    | Value                                                                              |</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">| binlog_gtid_simple_recovery      | ON                                                                                 |</span><br><span class="line">| enforce_gtid_consistency         | ON                                                                                 |</span><br><span class="line">| gtid_executed                    | 26e410b4-22cb-11e9-be44-005056880888:1-2,</span><br><span class="line">fc39b161-22ca-11e9-a638-005056ac6820:1-8 |</span><br><span class="line">| gtid_executed_compression_period | 1000                                                                               |</span><br><span class="line">| gtid_mode                        | ON                                                                                 |</span><br><span class="line">| gtid_owned                       |                                                                                    |</span><br><span class="line">| gtid_purged                      | 26e410b4-22cb-11e9-be44-005056880888:1-2                                           |</span><br><span class="line">| session_track_gtids              | OFF                                                                                |</span><br><span class="line">+----------------------------------+------------------------------------------------------------------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"> </span><br><span class="line">接着查看从数据库的数据，发现kevin库已经同步过来了!</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select * from kevin.haha;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | congcong |</span><br><span class="line">|  2 | huihui   |</span><br><span class="line">|  3 | grace    |</span><br><span class="line">+----+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">4）再回到主数据库mysql-master (172.16.60.211)上</span><br><span class="line"> </span><br><span class="line">查看master状态，发现已经有两个slave节点正常存在同步关系了</span><br><span class="line">mysql&gt; show slave hosts;</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">| Server_id | Host | Port | Master_id | Slave_UUID                           |</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">|         3 |      | 3306 |         1 | 26e410b4-22cb-11e9-be44-005056880888 |</span><br><span class="line">|         2 |      | 3306 |         1 | 2afbc2f5-22cb-11e9-b9c0-00505688047c |</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">5）测试数据同步</span><br><span class="line">在主数据库mysql-master (172.16.60.211)上更新数据</span><br><span class="line">mysql&gt; insert into kevin.haha values(10,<span class="string">"heifei"</span>),(11,<span class="string">"huoqiu"</span>),(12,<span class="string">"chengxihu"</span>);</span><br><span class="line">Query OK, 3 rows affected (0.05 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"> </span><br><span class="line">然后在两个slave从数据库上查看，发现已正常同步过来了</span><br><span class="line">mysql&gt; select * from kevin.haha;</span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | congcong  |</span><br><span class="line">|  2 | huihui    |</span><br><span class="line">|  3 | grace     |</span><br><span class="line">| 10 | heifei    |</span><br><span class="line">| 11 | huoqiu    |</span><br><span class="line">| 12 | chengxihu |</span><br><span class="line">+----+-----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="安装配置ProxySQL"><a href="#安装配置ProxySQL" class="headerlink" title="安装配置ProxySQL"></a><strong>安装配置ProxySQL</strong></h3><p>已经在上面第一步中介绍了安装方法，这里采用rpm包方式安装，安装过程省略……..</p><h4 id="ProxySQL实现读写分离"><a href="#ProxySQL实现读写分离" class="headerlink" title="ProxySQL实现读写分离"></a><strong>ProxySQL实现读写分离</strong></h4><p><strong>向ProxySQL中添加MySQL节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">使用insert语句添加主机到mysql_servers表中，其中：hostgroup_id 为10表示写组，为20表示读组。</span><br><span class="line">  </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1</span></span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers(hostgroup_id,hostname,port) values(10,<span class="string">'172.16.60.211'</span>,3306);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers(hostgroup_id,hostname,port) values(10,<span class="string">'172.16.60.212'</span>,3306);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers(hostgroup_id,hostname,port) values(10,<span class="string">'172.16.60.213'</span>,3306);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">==========================================================================================================</span><br><span class="line">如果在插入过程中，出现报错：</span><br><span class="line">ERROR 1045 (<span class="comment">#2800): UNIQUE constraint failed: mysql_servers.hostgroup_id, mysql_servers.hostname, mysql_servers.port</span></span><br><span class="line"> </span><br><span class="line">说明可能之前就已经定义了其他配置，可以清空这张表 或者 删除对应host的配置</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_servers;</span><br><span class="line">MySQL [(none)]&gt; delete from mysql_servers;</span><br><span class="line">Query OK, 6 rows affected (0.000 sec)</span><br><span class="line">=========================================================================================================</span><br><span class="line">  </span><br><span class="line">查看这3个节点是否插入成功，以及它们的状态。</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_servers\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       hostgroup_id: 10</span><br><span class="line">           hostname: 172.16.60.211</span><br><span class="line">               port: 3306</span><br><span class="line">             status: ONLINE</span><br><span class="line">             weight: 1</span><br><span class="line">        compression: 0</span><br><span class="line">    max_connections: 1000</span><br><span class="line">max_replication_lag: 0</span><br><span class="line">            use_ssl: 0</span><br><span class="line">     max_latency_ms: 0</span><br><span class="line">            comment:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">       hostgroup_id: 10</span><br><span class="line">           hostname: 172.16.60.212</span><br><span class="line">               port: 3306</span><br><span class="line">             status: ONLINE</span><br><span class="line">             weight: 1</span><br><span class="line">        compression: 0</span><br><span class="line">    max_connections: 1000</span><br><span class="line">max_replication_lag: 0</span><br><span class="line">            use_ssl: 0</span><br><span class="line">     max_latency_ms: 0</span><br><span class="line">            comment:</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">       hostgroup_id: 10</span><br><span class="line">           hostname: 172.16.60.213</span><br><span class="line">               port: 3306</span><br><span class="line">             status: ONLINE</span><br><span class="line">             weight: 1</span><br><span class="line">        compression: 0</span><br><span class="line">    max_connections: 1000</span><br><span class="line">max_replication_lag: 0</span><br><span class="line">            use_ssl: 0</span><br><span class="line">     max_latency_ms: 0</span><br><span class="line">            comment:</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">ERROR: No query specified</span><br><span class="line">  </span><br><span class="line">如上修改后，加载到RUNTIME，并保存到disk</span><br><span class="line">MySQL [(none)]&gt; load mysql servers to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.006 sec)</span><br><span class="line">  </span><br><span class="line">MySQL [(none)]&gt; save mysql servers to disk;</span><br><span class="line">Query OK, 0 rows affected (0.348 sec)</span><br></pre></td></tr></table></figure><p><strong>监控后端MySQL节点</strong><br>添加Mysql节点之后，还需要监控这些后端节点。对于后端是主从复制的环境来说，这是必须的，因为ProxySQL需要通过每个节点的read_only值来自动调整<br>它们是属于读组还是写组。</p><p>首先在后端master主数据节点上创建一个用于监控的用户名(只需在master上创建即可，因为会复制到slave上)，这个用户名只需具有USAGE权限即可。如果还需<br>要监控复制结构中slave是否严重延迟于master(这个俗语叫做”拖后腿”，术语叫做”replication lag”)，则还需具备replication client权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">在mysql-master主数据库节点行执行：</span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">..........</span><br><span class="line"> </span><br><span class="line">mysql&gt; create user monitor@<span class="string">'172.16.60.%'</span> identified by <span class="string">'P@ssword1!'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; grant replication client on *.* to monitor@<span class="string">'172.16.60.%'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"> </span><br><span class="line">然后回到mysql-proxy代理层节点上配置监控</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1</span></span><br><span class="line">..........</span><br><span class="line">MySQL [(none)]&gt; <span class="built_in">set</span> mysql-monitor_username=<span class="string">'monitor'</span>;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; <span class="built_in">set</span> mysql-monitor_password=<span class="string">'P@ssword1!'</span>;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">修改后，加载到RUNTIME，并保存到disk</span><br><span class="line">MySQL [(none)]&gt; load mysql variables to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; save mysql variables to disk;</span><br><span class="line">Query OK, 94 rows affected (0.079 sec)</span><br><span class="line"> </span><br><span class="line">验证监控结果：ProxySQL监控模块的指标都保存在monitor库的<span class="built_in">log</span>表中。</span><br><span class="line">  </span><br><span class="line">以下是连接是否正常的监控(对connect指标的监控)：</span><br><span class="line">注意：可能会有很多connect_error，这是因为没有配置监控信息时的错误，配置后如果connect_error的结果为NULL则表示正常。</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_connect_log;</span><br><span class="line">+---------------+------+------------------+-------------------------+---------------+</span><br><span class="line">| hostname      | port | time_start_us    | connect_success_time_us | connect_error |</span><br><span class="line">+---------------+------+------------------+-------------------------+---------------+</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665195883957 | 762                     | NULL          |</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665195894099 | 399                     | NULL          |</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665195904266 | 483                     | NULL          |</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665255883715 | 824                     | NULL          |</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665255893942 | 656                     | NULL          |</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665495884125 | 615                     | NULL          |</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665495894254 | 441                     | NULL          |</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665495904479 | 638                     | NULL          |</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665512917846 | 487                     | NULL          |</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665512928071 | 994                     | NULL          |</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665512938268 | 613                     | NULL          |</span><br><span class="line">+---------------+------+------------------+-------------------------+---------------+</span><br><span class="line">20 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">以下是对心跳信息的监控(对ping指标的监控)</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_ping_log;</span><br><span class="line">+---------------+------+------------------+----------------------+------------+</span><br><span class="line">| hostname      | port | time_start_us    | ping_success_time_us | ping_error |</span><br><span class="line">+---------------+------+------------------+----------------------+------------+</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665195883407 | 98                   | NULL       |</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665195885128 | 119                  | NULL       |</span><br><span class="line">...........</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665415889362 | 106                  | NULL       |</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665562898295 | 97                   | NULL       |</span><br><span class="line">+---------------+------+------------------+----------------------+------------+</span><br><span class="line">110 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"> </span><br><span class="line">read_only日志此时也为空(正常来说，新环境配置时，这个只读日志是为空的)</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_read_only_log;</span><br><span class="line">Empty <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">replication_lag的监控日志为空</span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_replication_lag_log;</span><br><span class="line">Empty <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">指定写组的id为10，读组的id为20。</span><br><span class="line">MySQL [(none)]&gt; insert into mysql_replication_hostgroups values(10,20,1);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">在该配置加载到RUNTIME生效之前，先查看下各mysql server所在的组。</span><br><span class="line">MySQL [(none)]&gt; select hostgroup_id,hostname,port,status,weight from mysql_servers;</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">| hostgroup_id | hostname      | port | status | weight |</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">| 10           | 172.16.60.211 | 3306 | ONLINE | 1      |</span><br><span class="line">| 10           | 172.16.60.212 | 3306 | ONLINE | 1      |</span><br><span class="line">| 10           | 172.16.60.213 | 3306 | ONLINE | 1      |</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">3个节点都在hostgroup_id=10的组中。</span><br><span class="line">现在，将刚才mysql_replication_hostgroups表的修改加载到RUNTIME生效。</span><br><span class="line">MySQL [(none)]&gt; load mysql servers to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.003 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; save mysql servers to disk;</span><br><span class="line">Query OK, 0 rows affected (0.361 sec)</span><br><span class="line"> </span><br><span class="line">一加载，Monitor模块就会开始监控后端的read_only值，当监控到read_only值后，就会按照read_only的值将某些节点自动移动到读/写组。</span><br><span class="line">例如，此处所有节点都在id=10的写组，slave1和slave2都是slave，它们的read_only=1，这两个节点将会移动到id=20的组。</span><br><span class="line">如果一开始这3节点都在id=20的读组，那么移动的将是Master节点，会移动到id=10的写组。</span><br><span class="line">  </span><br><span class="line">现在看结果</span><br><span class="line">MySQL [(none)]&gt; select hostgroup_id,hostname,port,status,weight from mysql_servers;</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">| hostgroup_id | hostname      | port | status | weight |</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">| 10           | 172.16.60.211 | 3306 | ONLINE | 1      |</span><br><span class="line">| 20           | 172.16.60.212 | 3306 | ONLINE | 1      |</span><br><span class="line">| 20           | 172.16.60.213 | 3306 | ONLINE | 1      |</span><br><span class="line">+--------------+---------------+------+--------+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; select * from mysql_server_read_only_log;</span><br><span class="line">+---------------+------+------------------+-----------------+-----------+-------+</span><br><span class="line">| hostname      | port | time_start_us    | success_time_us | read_only | error |</span><br><span class="line">+---------------+------+------------------+-----------------+-----------+-------+</span><br><span class="line">| 172.16.60.212 | 3306 | 1548665728919212 | 1684            | 1         | NULL  |</span><br><span class="line">| 172.16.60.211 | 3306 | 1548665728918753 | 3538            | 0         | NULL  |</span><br><span class="line">| 172.16.60.213 | 3306 | 1548665728919782 | 3071            | 1         | NULL  |</span><br></pre></td></tr></table></figure><p><strong>配置mysql_users</strong><br>上面的所有配置都是关于后端MySQL节点的，现在可以配置关于SQL语句的，包括：发送SQL语句的用户、SQL语句的路由规则、SQL查询的缓存、SQL语句的重写等等。本小节是SQL请求所使用的用户配置，例如root用户。这要求我们需要先在后端MySQL节点添加好相关用户。这里以root和sqlsender两个用户名为例.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">首先，在mysql-master主数据库节点上执行：(只需master执行即可，会复制给两个slave)</span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">.........</span><br><span class="line">mysql&gt; grant all on *.* to root@<span class="string">'172.16.60.%'</span> identified by <span class="string">'passwd'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.04 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; grant all on *.* to sqlsender@<span class="string">'172.16.60.%'</span> identified by <span class="string">'P@ssword1!'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.03 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"> </span><br><span class="line">然后回到mysql-proxy代理层节点，配置mysql_users表，将刚才的两个用户添加到该表中。</span><br><span class="line">admin&gt; insert into mysql_users(username,password,default_hostgroup) values(<span class="string">'root'</span>,<span class="string">'passwd'</span>,10);</span><br><span class="line">Query OK, 1 row affected (0.001 sec)</span><br><span class="line">  </span><br><span class="line">admin&gt; insert into mysql_users(username,password,default_hostgroup) values(<span class="string">'sqlsender'</span>,<span class="string">'P@ssword1!'</span>,10);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line">  </span><br><span class="line">admin&gt; load mysql users to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line">  </span><br><span class="line">admin&gt; save mysql users to disk;</span><br><span class="line">Query OK, 0 rows affected (0.108 sec)</span><br><span class="line">  </span><br><span class="line">mysql_users表有不少字段，最主要的三个字段为username、password和default_hostgroup：</span><br><span class="line">-  username：前端连接ProxySQL，以及ProxySQL将SQL语句路由给MySQL所使用的用户名。</span><br><span class="line">-  password：用户名对应的密码。可以是明文密码，也可以是<span class="built_in">hash</span>密码。如果想使用<span class="built_in">hash</span>密码，可以先在某个MySQL节点上执行</span><br><span class="line">   select password(PASSWORD)，然后将加密结果复制到该字段。</span><br><span class="line">-  default_hostgroup：该用户名默认的路由目标。例如，指定root用户的该字段值为10时，则使用root用户发送的SQL语句默认</span><br><span class="line">   情况下将路由到hostgroup_id=10组中的某个节点。</span><br><span class="line"> </span><br><span class="line">admin&gt; select * from mysql_users\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">              username: root</span><br><span class="line">              password: passwd</span><br><span class="line">                active: 1</span><br><span class="line">               use_ssl: 0</span><br><span class="line">     default_hostgroup: 10</span><br><span class="line">        default_schema: NULL</span><br><span class="line">         schema_locked: 0</span><br><span class="line">transaction_persistent: 1</span><br><span class="line">          fast_forward: 0</span><br><span class="line">               backend: 1</span><br><span class="line">              frontend: 1</span><br><span class="line">       max_connections: 10000</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">              username: sqlsender</span><br><span class="line">              password: P@ssword1!</span><br><span class="line">                active: 1</span><br><span class="line">               use_ssl: 0</span><br><span class="line">     default_hostgroup: 10</span><br><span class="line">        default_schema: NULL</span><br><span class="line">         schema_locked: 0</span><br><span class="line">transaction_persistent: 1</span><br><span class="line">          fast_forward: 0</span><br><span class="line">               backend: 1</span><br><span class="line">              frontend: 1</span><br><span class="line">       max_connections: 10000</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">虽然这里没有详细介绍mysql_users表，但上面标注了<span class="string">"注意本行"</span>的两个字段必须要引起注意。只有active=1的用户才是有效的用户。</span><br><span class="line">至于transaction_persistent字段，当它的值为1时，表示事务持久化：当某连接使用该用户开启了一个事务后，那么在事务提交/回滚之前，</span><br><span class="line">所有的语句都路由到同一个组中，避免语句分散到不同组。在以前的版本中，默认值为0，不知道从哪个版本开始，它的默认值为1。</span><br><span class="line">我们期望的值为1，所以在继续下面的步骤之前，先查看下这个值，如果为0，则执行下面的语句修改为1。</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; update mysql_users <span class="built_in">set</span> transaction_persistent=1 <span class="built_in">where</span> username=<span class="string">'root'</span>;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; update mysql_users <span class="built_in">set</span> transaction_persistent=1 <span class="built_in">where</span> username=<span class="string">'sqlsender'</span>;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; load mysql users to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; save mysql users to disk;</span><br><span class="line">Query OK, 0 rows affected (0.123 sec)</span><br><span class="line"> </span><br><span class="line">然后，分别使用root用户和sqlsender用户测试下它们是否能路由到默认的hostgroup_id=10(它是一个写组)读、写数据。</span><br><span class="line">下面是通过转发端口6033连接的，连接的是转发到后端真正的数据库!</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@server_id"</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "create database proxy_test"</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "show databases;"</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| proxy_test         |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'use proxy_test;create table t(id int);'</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'show tables from proxy_test;'</span></span><br><span class="line">+----------------------+</span><br><span class="line">| Tables_in_proxy_test |</span><br><span class="line">+----------------------+</span><br><span class="line">| t                    |</span><br><span class="line">+----------------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'show databases;'           </span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| proxy_test         |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"> </span><br><span class="line">然后再删除上面这个测试库</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'drop database proxy_test;'</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -usqlsender -pP@ssword1! -P6033 -h127.0.0.1 -e 'show databases;'         </span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p><strong>读写分离：配置路由规则</strong><br>ProxySQL的路由规则非常灵活，可以基于用户、基于schema以及基于每个语句实现路由规则的定制。本案例作为一个入门配置，实现一个最简单的语句级路由规则，从而实现读写分离。</p><p><strong>必须注意:</strong> 这只是实验，实际的路由规则绝不应该仅根据所谓的读、写操作进行分离，而是从各项指标中找出压力大、执行频繁的语句单独写规则、做缓存等等。和查询规则有关的表有两个:mysql_query_rules和mysql_query_rules_fast_routing，后者是前者的扩展表，1.4.7之后才支持该快速路由表。本案例只介绍第一个表。插入两个规则，目的是将select语句分离到hostgroup_id=20的读组，但由于select语句中有一个特殊语句SELECT…FOR UPDATE它会申请写锁，所以应该路由到hostgroup_id=10的写组.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1                       </span></span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply) VALUES (1,1,<span class="string">'^SELECT.*FOR UPDATE$'</span>,10,1), (2,1,<span class="string">'^SELECT'</span>,20,1);</span><br><span class="line">Query OK, 2 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; load mysql query rules to runtime;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; save mysql query rules to disk;</span><br><span class="line">Query OK, 0 rows affected (0.272 sec)</span><br><span class="line"> </span><br><span class="line">需要注意： select ... <span class="keyword">for</span> update规则的rule_id必须要小于普通的select规则的rule_id，因为ProxySQL是根据rule_id的顺序进行规则匹配的。</span><br><span class="line">    </span><br><span class="line">再来测试下，读操作是否路由给了hostgroup_id=20的读组, 如下发现server_id为2和3的节点 (即slave从节点)在读组内</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'select @@server_id'</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           3 |</span><br><span class="line">+-------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'select @@server_id'</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           3 |</span><br><span class="line">+-------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'select @@server_id'</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           2 |</span><br><span class="line">+-------------+</span><br><span class="line"> </span><br><span class="line">读操作已经路由给读组，再看看写操作。这里以事务持久化进行测试。</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'start transaction;select @@server_id;commit;select @@server_id;'</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           3 |</span><br><span class="line">+-------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'start transaction;select @@server_id;commit;select @@server_id;'</span></span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|           2 |</span><br><span class="line"> </span><br><span class="line">显然，一切都按照预期进行。最后，如果想查看路由的信息，可查询stats库中的stats_mysql_query_digest表。</span><br><span class="line">以下是该表的一个输出格式示例(和本案例无关)。</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -P6032 -h127.0.0.1                       </span></span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; SELECT hostgroup hg, sum_time, count_star, digest_text FROM stats_mysql_query_digest ORDER BY sum_time DESC;</span><br><span class="line">+----+----------+------------+----------------------------------+</span><br><span class="line">| hg | sum_time | count_star | digest_text                      |</span><br><span class="line">+----+----------+------------+----------------------------------+</span><br><span class="line">| 10 | 283841   | 1          | drop database proxy_test         |</span><br><span class="line">| 10 | 161020   | 1          | create table t(id int)           |</span><br><span class="line">| 10 | 36002    | 1          | create database proxy_test       |</span><br><span class="line">| 20 | 2719     | 5          | select @@server_id               |</span><br><span class="line">| 10 | 1250     | 3          | select @@server_id               |</span><br><span class="line">| 10 | 1102     | 2          | show databases                   |</span><br><span class="line">| 10 | 789      | 2          | start transaction                |</span><br><span class="line">| 10 | 655      | 1          | SELECT DATABASE()                |</span><br><span class="line">| 10 | 629      | 1          | show databases                   |</span><br><span class="line">| 10 | 564      | 1          | show tables from proxy_test      |</span><br><span class="line">| 10 | 286      | 2          | commit                           |</span><br><span class="line">| 10 | 0        | 8          | select @@version_comment <span class="built_in">limit</span> ? |</span><br><span class="line">| 10 | 0        | 5          | select @@version_comment <span class="built_in">limit</span> ? |</span><br><span class="line">+----+----------+------------+----------------------------------+</span><br><span class="line">13 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.002 sec)</span><br></pre></td></tr></table></figure><p><strong>测试读写分离效果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">由于读写操作都记录在proxysql的stats_mysql_query_digest表内。</span><br><span class="line">为了测试读写分离的效果，可以先清空此表中之前的记录 (即之前在实现读写分配路由配置之前的记录)</span><br><span class="line"> </span><br><span class="line">下面这个命令是专门清空stats_mysql_query_digest表的  (使用<span class="string">"delete from stats_mysql_query_digest"</span>  清空不掉!)</span><br><span class="line">MySQL [(none)]&gt; SELECT 1 FROM stats_mysql_query_digest_reset LIMIT 1;</span><br><span class="line">+---+</span><br><span class="line">| 1 |</span><br><span class="line">+---+</span><br><span class="line">| 1 |</span><br><span class="line">+---+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.002 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; select hostgroup,username,digest_text,count_star from stats_mysql_query_digest;             </span><br><span class="line">Empty <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"> </span><br><span class="line">在mysql-proxy代理层节点，通过proxysql进行数据写入，并查看</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'select * from kevin.haha;'</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | congcong  |</span><br><span class="line">|  2 | huihui    |</span><br><span class="line">|  3 | grace     |</span><br><span class="line">| 11 | huoqiu    |</span><br><span class="line">| 12 | chengxihu |</span><br><span class="line">| 21 | zhongguo  |</span><br><span class="line">+----+-----------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'delete from kevin.haha where id &gt; 3;'</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'insert into kevin.haha values(21,"zhongguo"),(22,"xianggang"),(23,"taiwan");'</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'update kevin.haha set name="hangzhou" where id=22 ;'                </span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e 'select * from kevin.haha;'                                          </span></span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | congcong |</span><br><span class="line">|  2 | huihui   |</span><br><span class="line">|  3 | grace    |</span><br><span class="line">| 21 | zhongguo |</span><br><span class="line">| 22 | hangzhou |</span><br><span class="line">| 23 | taiwan   |</span><br><span class="line">+----+----------+</span><br><span class="line"> </span><br><span class="line">在mysql-master主数据库和mysql-slave1、mysql-slave2从数据上查看</span><br><span class="line">[root@mysql-master ~]<span class="comment"># mysql -p123456</span></span><br><span class="line">.........</span><br><span class="line">mysql&gt; select * from kevin.haha;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | congcong |</span><br><span class="line">|  2 | huihui   |</span><br><span class="line">|  3 | grace    |</span><br><span class="line">| 21 | zhongguo |</span><br><span class="line">| 22 | hangzhou |</span><br><span class="line">| 23 | taiwan   |</span><br><span class="line">+----+----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">发现在客户端通过proxysql插件更新的数据，已经写到mysql-master主数据库上，并同步到mysql-slave1和mysql-slave2两个从数据库上了！</span><br><span class="line"> </span><br><span class="line">最后在proxysql管理端查看读写分离</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -h127.0.0.1 -P6032           </span></span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; select hostgroup,username,digest_text,count_star from stats_mysql_query_digest;</span><br><span class="line">+-----------+----------+------------------------------------------------+------------+</span><br><span class="line">| hostgroup | username | digest_text                                    | count_star |</span><br><span class="line">+-----------+----------+------------------------------------------------+------------+</span><br><span class="line">| 10        | root     | insert into kevin.haha values(?,?),(?,?),(?,?) | 1          |</span><br><span class="line">| 10        | root     | delete from kevin.haha <span class="built_in">where</span> id &gt; ?            | 1          |</span><br><span class="line">| 10        | root     | update kevin.haha <span class="built_in">set</span> name=? <span class="built_in">where</span> id=?        | 1          |</span><br><span class="line">| 20        | root     | select * from kevin.haha                       | 2          |</span><br><span class="line">| 10        | root     | select @@version_comment <span class="built_in">limit</span> ?               | 5          |</span><br><span class="line">+-----------+----------+------------------------------------------------+------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.001 sec)</span><br><span class="line"> </span><br><span class="line">从上述结果就可以看出proxysql实现的读写分离配置是成功的，读请求是转发到group20的读组内，写请求转发到group10的写组内!!</span><br></pre></td></tr></table></figure><h4 id="负载均衡测试-加权轮询"><a href="#负载均衡测试-加权轮询" class="headerlink" title="负载均衡测试  (加权轮询)"></a><strong>负载均衡测试  (加权轮询)</strong></h4><p>如上已经配置好一主(mysql-master，在hostgroup10写组内)、两从(mysql-slave1和mysql-slave2，在hostgroup20读组内) ，并且已经在”mysql_query_rules”表中配置了路由规则，即写操作转发到hostgroup10组，读操作转发到hostgroup20组.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select * from mysql_query_rules;           </span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">| rule_id | active | username | schemaname | flagIN | client_addr | proxy_addr | proxy_port | digest | match_digest         | match_pattern | negate_match_pattern | re_modifiers | flagOUT | replace_pattern | destination_hostgroup | cache_ttl | reconnect | timeout | retries | delay | next_query_flagIN | mirror_flagOUT | mirror_hostgroup | error_msg | OK_msg | sticky_conn | multiplex | <span class="built_in">log</span> | apply | comment |</span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">| 1       | 1      | NULL     | NULL       | 0      | NULL        | NULL       | NULL       | NULL   | ^SELECT.*FOR UPDATE$ | NULL          | 0                    | CASELESS     | NULL    | NULL            | 10                    | NULL      | NULL      | NULL    | NULL    | NULL  | NULL              | NULL           | NULL             | NULL      | NULL   | NULL        | NULL      | NULL | 1     | NULL    |</span><br><span class="line">| 2       | 1      | NULL     | NULL       | 0      | NULL        | NULL       | NULL       | NULL   | ^SELECT              | NULL          | 0                    | CASELESS     | NULL    | NULL            | 20                    | NULL      | NULL      | NULL    | NULL    | NULL  | NULL              | NULL           | NULL             | NULL      | NULL   | NULL        | NULL      | NULL | 1     | NULL    |</span><br><span class="line">+---------+--------+----------+------------+--------+-------------+------------+------------+--------+----------------------+---------------+----------------------+--------------+---------+-----------------+-----------------------+-----------+-----------+---------+---------+-------+-------------------+----------------+------------------+-----------+--------+-------------+-----------+-----+-------+---------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.000 sec)</span><br><span class="line">  </span><br><span class="line">由于hostgroup10写组内只要一个节点(mysql-master节点)，hostgroup20读组内有两个节点(mysql-slave1、mysql-slave2)</span><br><span class="line">所以这里只能测试读节点的负载均衡</span><br><span class="line">  </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">  </span><br><span class="line">再实验下mysql -e跟多条语句，看看如何</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname;select @@hostname;select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname;select @@hostname;select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname;select @@hostname;select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname;select @@hostname;select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave1 |</span><br><span class="line">+--------------+</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e "select @@hostname;select @@hostname;select @@hostname"</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">+--------------+</span><br><span class="line">| @@hostname   |</span><br><span class="line">+--------------+</span><br><span class="line">| mysql-slave2 |</span><br><span class="line">+--------------+</span><br><span class="line">  </span><br><span class="line">由以上结果可能会猜想并可印证：</span><br><span class="line">在一个client的一个链接周期内，所有query路由到同一台后端!</span><br><span class="line">即在同一个client的链接周期内，query路由不会转发到同组内的不同后端节点机上，只能转发到同一台后端节点机上!</span><br><span class="line">  </span><br><span class="line">但是这只是个假象!!!   是因为正好用到了select @ 语句。</span><br><span class="line">如官网所介绍:  sends a query that implicitly disables multiplexing. For example, <span class="keyword">if</span> you run “SELECT @a” , ProxySQL will <span class="built_in">disable</span></span><br><span class="line">multiplexing <span class="keyword">for</span> that client and will always use the same backend connection</span><br><span class="line">  </span><br><span class="line">最后可以知道: proxysql的负载方式目前仅为加权轮询一种（经验证所确认），并无其他机制!</span><br><span class="line"> </span><br><span class="line">===============================================================================</span><br><span class="line">可以编写一个负载均衡的shell测试脚本:</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># which mysql</span></span><br><span class="line">/usr/bin/mysql</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># vim /opt/test_proxysql_lb.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$i</span>&lt;200))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        /usr/bin/mysql -uroot -ppasswd -P6033 -h127.0.0.1 -e <span class="string">"select @@hostname;"</span> &gt;&gt; /tmp/test_proxy_sql_lb.txt</span><br><span class="line">        <span class="built_in">let</span> <span class="string">"i++"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">        sleep 0.1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line">执行测试脚本:</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># sh -x /opt/test_proxysql_lb.sh &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"> </span><br><span class="line">执行后检查结果</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># grep "mysql-slave1" /tmp/test_proxy_sql_lb.txt|wc -l</span></span><br><span class="line">86</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># grep "mysql-slave2" /tmp/test_proxy_sql_lb.txt|wc -l</span></span><br><span class="line">114</span><br><span class="line"> </span><br><span class="line">以上查询结果符合预期</span><br></pre></td></tr></table></figure><h4 id="开启ProxySQL的Web统计功能"><a href="#开启ProxySQL的Web统计功能" class="headerlink" title="开启ProxySQL的Web统计功能"></a><strong>开启ProxySQL的Web统计功能</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">首先打开web功能</span><br><span class="line">[root@mysql-proxy ~]<span class="comment">#  mysql -uadmin -padmin -h127.0.0.1 -P6032 </span></span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; update global_variables <span class="built_in">set</span> variable_value=<span class="string">'true'</span> <span class="built_in">where</span> variable_name=<span class="string">'admin-web_enabled'</span>;</span><br><span class="line">Query OK, 1 row affected (0.001 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; LOAD ADMIN VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; SAVE ADMIN VARIABLES TO DISK;</span><br><span class="line">Query OK, 31 rows affected (0.070 sec)</span><br><span class="line"> </span><br><span class="line">然后查看端口和登录web界面的用户名和密码，用户名和密码与<span class="built_in">stat</span>账户一致：</span><br><span class="line">MySQL [(none)]&gt; select * from global_variables <span class="built_in">where</span> variable_name LIKE <span class="string">'admin-web%'</span> or variable_name LIKE <span class="string">'admin-stats%'</span>;</span><br><span class="line">+-----------------------------------+----------------+</span><br><span class="line">| variable_name                     | variable_value |</span><br><span class="line">+-----------------------------------+----------------+</span><br><span class="line">| admin-stats_credentials           | stats:stats    |                <span class="comment">#账户密码</span></span><br><span class="line">| admin-stats_mysql_connections     | 60             |</span><br><span class="line">| admin-stats_mysql_connection_pool | 60             |</span><br><span class="line">| admin-stats_mysql_query_cache     | 60             |</span><br><span class="line">| admin-stats_system_cpu            | 60             |</span><br><span class="line">| admin-stats_system_memory         | 60             |</span><br><span class="line">| admin-web_enabled                 | <span class="literal">true</span>           |</span><br><span class="line">| admin-web_port                    | 6080           |                     <span class="comment">#端口</span></span><br><span class="line">+-----------------------------------+----------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.003 sec)</span><br></pre></td></tr></table></figure><p>查看web端口是否正常打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-proxy ~]<span class="comment"># lsof -i:6080</span></span><br><span class="line">COMMAND    PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME</span><br><span class="line">proxysql 22324 root   27u  IPv4 23010645      0t0  TCP *:6080 (LISTEN)</span><br></pre></td></tr></table></figure><p>访问<a href="http://172.16.60.214:6080并使用stats:stats登录即可查看一些统计信息。" rel="noopener" target="_blank">http://172.16.60.214:6080并使用stats:stats登录即可查看一些统计信息。</a></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8307f670/2.png" alt></p><h4 id="scheduler打印proxysql状态到日志"><a href="#scheduler打印proxysql状态到日志" class="headerlink" title="scheduler打印proxysql状态到日志"></a><strong>scheduler打印proxysql状态到日志</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@mysql-proxy ~]<span class="comment"># mkdir -p /opt/proxysql/log</span></span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># vim /opt/proxysql/log/status.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=`date <span class="string">"+%Y-%m-%d %H:%M:%S"</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;\"dateTime\":\"<span class="variable">$DATE</span>\",\"status\":\"running\"&#125;"</span> &gt;&gt; /opt/proxysql/<span class="built_in">log</span>/status_log</span><br><span class="line"> </span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># chmod 777 /opt/proxysql/log/status.sh</span></span><br><span class="line"> </span><br><span class="line">然后在proxysql插入一条scheduler (定义每分钟打印一次，即60000毫秒)</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># mysql -uadmin -padmin -h127.0.0.1 -P6032</span></span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; insert into scheduler(active,interval_ms,filename) values (1,60000,<span class="string">'/opt/proxysql/log/status.sh'</span>);</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.105 sec)</span><br><span class="line"> </span><br><span class="line">然后查看日志就可以看到proxysql 的运行结果了：</span><br><span class="line">[root@mysql-proxy ~]<span class="comment"># tail -f /opt/proxysql/log/status_log</span></span><br><span class="line">&#123;<span class="string">"dateTime"</span>:<span class="string">"2019-02-19 14:24:03"</span>,<span class="string">"status"</span>:<span class="string">"running"</span>&#125;</span><br><span class="line">&#123;<span class="string">"dateTime"</span>:<span class="string">"2019-02-19 14:25:03"</span>,<span class="string">"status"</span>:<span class="string">"running"</span>&#125;</span><br><span class="line">&#123;<span class="string">"dateTime"</span>:<span class="string">"2019-02-19 14:26:03"</span>,<span class="string">"status"</span>:<span class="string">"running"</span>&#125;</span><br><span class="line">&#123;<span class="string">"dateTime"</span>:<span class="string">"2019-02-19 14:27:03"</span>,<span class="string">"status"</span>:<span class="string">"running"</span>&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面文章对数据库中间层进行了选型，那么要怎么安装，怎么验证，怎么优化，又有哪些坑可以避免呢？本文就详细介绍下。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/"/>
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>生产mysql数据库集群优化&lt;一&gt;--选型proxysql</title>
    <link href="https://wandouduoduo.github.io/articles/2f5e57e1.html"/>
    <id>https://wandouduoduo.github.io/articles/2f5e57e1.html</id>
    <published>2021-06-10T10:26:36.000Z</published>
    <updated>2021-06-23T06:51:09.958Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>现在微服务几乎成为所有公司的标配，那么业务项目和数据存储的松耦合就成为基本配置，而mysql数据库在互联网公司中应用很广，几乎所有的项目都会有连它的需求。但是如果业务请求量很大，那么最先想到也是最常用的是数据库的读写分离。通常是由dba把数据库分为读写库，对数据进行更新，写入时连接读写库。查询数据时，连接读库。这样可以大大减轻写库的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2f5e57e1/1.png" alt></p><p>但是这样是由业务根据需求来区分连哪个数据库，但有些开发说我想只配置一个数据库，运维你根据请求类型来区分定义是连接只读库还是读写库。而且业务对时效性也不是很严格。那要怎么做呢？如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2f5e57e1/2.png" alt></p><p>我们就需要增加数据库的代理层，由代理层根据定义的规则来自动区分是连接读写库还是只读库。本文就是聊聊数据库的代理层–ProxySQL。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ProxySQL是灵活强大的MySQL代理层, 是一个能实实在在用在生产环境的MySQL中间件，可以实现读写分离，支持 Query 路由功能，支持动态指定某个 SQL 进行 cache，支持动态加载配置、故障切换和一些 SQL的过滤功能。还有一些同类产品比如 DBproxy、MyCAT、OneProxy 等。但经过反复对比和测试之后，还是觉得ProxySQL是一款性能不谙，靠谱稳定的MySQL 中间件产品 ！</p><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a><strong>亮点</strong></h2><ul><li>几乎所有的配置均可在线更改（其配置数据基于SQLite存储），无需重启proxysql</li><li>基于正则和client_addr的强大和灵活的路由规则</li><li>详细的状态统计，统计结果和pt-query-digest对慢日志的分析结果类似，相当于有了统一的查看sql性能和sql语句统计的入口（Designed by a DBA for DBAs）</li><li>自动重连和重新执行机制(auto-reconnect and automatic re-execution of queries using it’s Connections Pool ): 若一个请求在链接或执行过程中意外中断，proxysql会根据其内部机制重新执行该操作</li><li>query cache功能：比mysql自带QC更灵活，可在mysql_query_rules表中依据digest,match_pattern,client_addr等维度控制哪类语句可以缓存</li><li>支持连接池（connection pool）并且支持multiplexing,区别于atlas之流的连接池实现。</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h2><p>ProxySQL是一个高性能的MySQL中间件，拥有强大的规则引擎。它是用C++语言开发的，虽然是一个轻量级产品，但性能很好（据测试，能处理千亿级的数据），功能也足够，能满足中间件所需的绝大多数功能。具有以下特性：</p><ul><li>连接池，而且是 multiplexing；</li><li>主机和用户的最大连接数限制；</li><li>自动下线后端DB；<br>-  延迟超过阀值<br>-  ping 延迟超过阀值<br>-  网络不通或宕机</li><li>强大的规则路由引擎；<br>-  实现读写分离<br>-  查询重写<br>-  sql流量镜像</li><li>支持prepared statement；</li><li>支持Query Cache；</li><li>支持负载均衡，与gelera结合自动failover；</li><li>将所有配置保存写入到SQLit表中。</li><li>支持动态加载配置，即一般可以在线修改配置，但有少部分参数还是需要重启来生效。</li><li>支持query cache。</li><li>支持对query的路由，可以针对某个语句进行分配去哪个实例执行。</li><li>不支持分表，可以分库，但是利用规则配置实现分表。</li></ul><p>如上可知，ProxySQL集合了很多优秀特性于一身，那么它的缺点呢就是项目不够成熟，好在官方网站一直在及时更新，并且受到 Percona 官方的支持。</p><h2 id="管理配置"><a href="#管理配置" class="headerlink" title="管理配置"></a><strong>管理配置</strong></h2><p>ProxySQL有一个完备的配置系统，配置ProxySQL是基于sql命令的方式完成的。ProxySQL支持配置修改之后的在线保存、应用，不需要重启即可生效。整个配置系统分三层设计。</p><p>-  <strong>runtime</strong>：运行中使用的配置文件<br>-  <strong>memory</strong>：提供用户动态修改配置文件<br>-  <strong>disk</strong>：将修改的配置保存到磁盘SQLit表中（即：proxysql.db）<br>-  <strong>config</strong>：一般不使用它（即：proxysql.cnf）</p><p>如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2f5e57e1/3.png" alt="img"></p><p><strong>ProxySQL配置系统分为三层的目的：</strong></p><p>1) 自动更新;<br>2) 尽可能的不重启proxysql就可以修改配置;<br>3) 方便回滚错误配置;</p><p>简单说就是配置proxysql分为三个级别，RUNTIME是即时生效的，MEMORY是保存在内存中但并不立即生效的，DISK|CONFIG FILE是持久化或写在配置文件中的。</p><p>这三个级别的配置文件互不干扰，在某个层级修改了配置文件，想要加载或保存到另一个层级，需要额外的LOAD或SAVE操作：”LOAD xx_config FROM xx_level | LOAD xx_config TO xx_level | SAVE xx_config TO xx_level | SAVE xx_config FROM xx_level”，达到加载配置或者持久化配置的目的。这三层中每层的功能与含义如下：<br>-  <strong>RUNTIME层</strong><br>代表的是ProxySQL当前生效的配置，包括 global_variables, mysql_servers, mysql_users, mysql_query_rules。无法直接修改这里的配置，必须要从下一层load进来。该层级的配置时在proxysql管理库(sqlite)的main库中以runtime_开头的表，这些表的数据库无法直接修改，只能从其他层级加载；该层代表的是ProxySQL当前生效的正在使用的配置，包括global_variables, mysql_servers, mysql_users, mysql_query_rules表。无法直接修改这里的配置，必须要从下一层load进来。也就是说RUNTIME这个顶级层，是proxysql运行过程中实际使用的那一份配置，这一份配置会直接影响到生产环境的，所以要将配置加载进RUNTIME层时需要三思而行。</p><p>-  <strong>MEMORY层</strong><br>是平时在mysql命令行修改的 main 里头配置，可以认为是SQLite数据库在内存的镜像。该层级的配置在main库中以mysql_开头的表以及global_variables表，这些表的数据可以直接修改；用户可以通过MySQL客户端连接到此接口（admin接口），然后可以在mysql命令行查询不同的表和数据库，并修改各种配置，可以认为是SQLite数据库在内存的镜像。也就是说MEMORY这个中间层，上面接着生产环境层RUNTIME，下面接着持久化层DISK和CONFIG FILE。MEMORY层是我们修改proxysql的唯一正常入口。一般来说在修改一个配置时，首先修改Memory层，确认无误后再接入RUNTIME层，最后持久化到DISK和CONFIG FILE层。也就是说memeory层里面的配置随便改，不影响生产，也不影响磁盘中保存的数据。通过admin接口可以修改mysql_servers、mysql_users、mysql_query_rules、global_variables等表的数据。</p><p>-  <strong>DISK|CONFIG FILR层</strong><br>持久存储的那份配置，一般在$(DATADIR)/proxysql.db，在重启的时候会从硬盘里加载。 /etc/proxysql.cnf文件只在第一次初始化的时候用到，完了后，如果要修改监听端口，还是需要在管理命令行里修改，再 save 到硬盘。该层级的配置在磁盘上的sqlite库或配置文件里。DISK/CONFIG FILE层表示持久存储的那份配置，持久层对应的磁盘文件是$(DATADIR)/proxysql.db，在重启ProxySQL的时候，会从proxysql.db文件中加载信息。而 /etc/proxysql.cnf文件只在第一次初始化的时候使用，之后如果要修改配置，就需要在管理端口的SQL命令行里进行修改，然后再save到硬盘。 也就是说DISK和CONFIG FILE这一层是持久化层，我们做的任何配置更改，如果不持久化下来，重启后，配置都将丢失。</p><p><strong>需要注意</strong>                                       </p><p>1) ProxySQL每一个配置项在三层中都存在，但是这三层是互相独立的，也就是说proxysql可以同时拥有三份配置，每层都是独立的，可能三份配置都不一样，也可能三份都一样。<br>2) RUNTIME层代表 ProxySQL 当前生效的正在使用的配置，无法直接修改这里的配置，必须要从下一层 “load” 进来。<br>3) MEMORY这一层上面连接 RUNTIME 层，下面连接持久化层。在这层可以正常操作 ProxySQL 配置，随便修改，不会影响生产环境。修改一个配置一般都是先在 MEMORY 层完成，然后确认正常之后再加载到 RUNTIME 和持久化到磁盘上。<br>4) DISK 和 CONFIG FILE层持久化配置信息，重启后内存中的配置信息会丢失，所以需要将配置信息保留在磁盘中。重启时，可以从磁盘快速加载回来。</p><p><strong>ProxySQL配置文件的修改流程一般是：</strong><br>- 启动时：先修改必要的CONFIG FILE配置，比如管理端口，然后启动；<br>- 其他配置：修改MEMORY中的表，然后加载到RUNTIME并持久化。</p><p><strong>ProxySQL具有一个复杂但易于使用的配置系统，可以满足以下需求：</strong><br>-  允许轻松动态更新配置（这是为了让ProxySQL用户可以在需要零宕机时间配置的大型基础架构中使用它）。与MySQL兼容的管理界面可用于此目的。<br>-  允许尽可能多的配置项目动态修改，而不需要重新启动ProxySQL进程<br>-  可以毫不费力地回滚无效配置<br>-  这是通过多级配置系统实现的，其中设置从运行时移到内存，并根据需要持久保存到磁盘。</p><p>一般，修改的配置都是在memory层。可以load到runtime，使配置在不用重启proxysql的情况下也可以生效，也可以save到disk，将对配置的修改持久化！</p><p>需要修改配置时，直接操作的是 MEMORAY，以下命令可用于加载或保存 users (mysql_users):  <strong>(序号对应上图“运行机制”草图)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1]: LOAD MYSQL USERS TO RUNTIME / LOAD MYSQL USERS FROM MEMORY   #常用。将修改后的配置(在memory层)用到实际生产</span><br><span class="line">[2]: SAVE MYSQL USERS TO MEMORY / SAVE MYSQL USERS FROM RUNTIME        #将生产配置拉一份到memory中</span><br><span class="line">[3]: LOAD MYSQL USERS TO MEMORY / LOAD MYSQL USERS FROM DISK           #将磁盘中持久化的配置拉一份到memory中来</span><br><span class="line">[4]: SAVE MYSQL USERS TO DISK /  SAVE MYSQL USERS FROM MEMORY     #常用。将memoery中的配置保存到磁盘中去</span><br><span class="line">[5]: LOAD MYSQL USERS FROM CONFIG                                      #将配置文件中的配置加载到memeory中</span><br></pre></td></tr></table></figure><p>个人还是比较习惯用 TO，记住往上层是 LOAD，往下层是 SAVE。以下命令加载或保存servers (mysql_servers):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1]: LOAD MYSQL SERVERS TO RUNTIME  #常用，让修改的配置生效</span><br><span class="line">[2]: SAVE MYSQL SERVERS TO MEMORY</span><br><span class="line">[3]: LOAD MYSQL SERVERS TO MEMORY</span><br><span class="line">[4]: SAVE MYSQL SERVERS TO DISK     #常用，将修改的配置持久化</span><br><span class="line">[5]: LOAD MYSQL SERVERS FROM CONFIG</span><br></pre></td></tr></table></figure><p>后面的使用方法也基本相同，一并列出。以下命令加载或保存query rules (mysql_query_rules):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1]: load mysql query rules to run    #常用</span><br><span class="line">[2]: save mysql query rules to mem</span><br><span class="line">[3]: load mysql query rules to mem</span><br><span class="line">[4]: save mysql query rules to disk   #常用</span><br><span class="line">[5]: load mysql query rules from config</span><br></pre></td></tr></table></figure><p>以下命令加载或保存 mysql variables (global_variables):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1]: load mysql variables to runtime</span><br><span class="line">[2]: save mysql variables to memory</span><br><span class="line">[3]: load mysql variables to memory</span><br><span class="line">[4]: save mysql variables to disk</span><br><span class="line">[5]: load mysql variables from config</span><br></pre></td></tr></table></figure><p>以下命令加载或保存admin variables (select * from global_variables where variable_name like ‘admin-%’):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1]: load admin variables to runtime</span><br><span class="line">[2]: save admin variables to memory</span><br><span class="line">[3]: load admin variables to memory</span><br><span class="line">[4]: save admin variables to disk</span><br><span class="line">[5]: load admin variables from config</span><br></pre></td></tr></table></figure><p><strong>ProxySQL启动过程总结:</strong><br>当proxysql启动时，首先读取配置文件CONFIG FILE(/etc/proxysql.cnf)，然后从该配置文件中获取datadir，datadir中配置的是sqlite的数据目录。如果该目录存在，且sqlite数据文件存在，那么正常启动，将sqlite中的配置项读进内存，并且加载进RUNTIME，用于初始化proxysql的运行。如果datadir目录下没有sqlite的数据文件，proxysql就会使用config file中的配置来初始化proxysql，并且将这些配置保存至数据库。sqlite数据文件可以不存在，/etc/proxysql.cnf文件也可以为空，但/etc/proxysql.cnf配置文件必须存在，否则，proxysql无法启动。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在微服务几乎成为所有公司的标配，那么业务项目和数据存储的松耦合就成为基本配置，而mysql数据库在互联网公司中应用很广，几乎所有的项目都会有连它的需求。但是如果业务请求量很大，那么最先想到也是最常用的是数据库的读写分离。通常是由dba把数据库分为读写库，对数据进行更新，写入时连接读写库。查询数据时，连接读库。这样可以大大减轻写库的压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2f5e57e1/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;但是这样是由业务根据需求来区分连哪个数据库，但有些开发说我想只配置一个数据库，运维你根据请求类型来区分定义是连接只读库还是读写库。而且业务对时效性也不是很严格。那要怎么做呢？如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/2f5e57e1/2.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;我们就需要增加数据库的代理层，由代理层根据定义的规则来自动区分是连接读写库还是只读库。本文就是聊聊数据库的代理层–ProxySQL。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/"/>
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://wandouduoduo.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置用户名密码来控制访问请求</title>
    <link href="https://wandouduoduo.github.io/articles/edfb0ad9.html"/>
    <id>https://wandouduoduo.github.io/articles/edfb0ad9.html</id>
    <published>2021-06-08T03:06:56.000Z</published>
    <updated>2021-06-23T06:51:09.953Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>今天接了个需求：要把一些资源文件从外网提供给客户下载。处于安全和简单快捷考虑，分享一个快速实现并安全性很强的方案：nginx配置账号密码来控制，并且密码还是加密的，再增加白名单配置。此方案简单快捷和安全。</p><a id="more"></a><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="安装-htpasswd-工具"><a href="#安装-htpasswd-工具" class="headerlink" title="安装 htpasswd 工具"></a><strong>安装 htpasswd 工具</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd-tools -y</span><br></pre></td></tr></table></figure><p>设置用户名和密码，并把用户名、密码保存到指定文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[sun@bogon conf]$ sudo mkdir passwd</span><br><span class="line">[sun@bogon conf]$ sudo htpasswd -c passwd/passwd sun</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user sun</span><br><span class="line">[sun@bogon conf]$ cat passwd/passwd </span><br><span class="line">sun:<span class="variable">$apr1</span><span class="variable">$J5Sg0fQD</span><span class="variable">$KDM3Oypj8Wf9477PHDIzA0</span></span><br></pre></td></tr></table></figure><p>注意：上面的 passwd/passwd 是生成密码文件的路径，绝对路径是/etc/nginx/passwd/passwd ，然后sun是用户名，你可以根据需要自行设置成其它用户名。运行命令后，会要求你连续输入两次密码。输入成功后，会提示已经为sun这个用户添加了密码。<br>查看下生成的密码文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[sun@bogon conf]$ cat passwd/passwd </span><br><span class="line">sun:$apr1$J5Sg0fQD$KDM3Oypj8Wf9477PHDIzA0</span><br></pre></td></tr></table></figure><p>其中用户名就是sun，分号后面就是密码（已经加过密）。</p><h3 id="修改-nginx-配置文件"><a href="#修改-nginx-配置文件" class="headerlink" title="修改 nginx 配置文件"></a><strong>修改 nginx 配置文件</strong></h3><p>找到 nginx 配置文件，因为我们要对整个站点开启验证，所以在配置文件中的第一个server修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    .......</span><br><span class="line">    #新增下面两行</span><br><span class="line">    auth_basic &quot;Please input password&quot;; #这里是验证时的提示信息</span><br><span class="line">    auth_basic_user_file /etc/nginx/passwd/passwd; # 这里是密码文件，可以填写绝对路径</span><br><span class="line">    location /&#123;</span><br><span class="line">    .......</span><br><span class="line">    root  /data;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后nginx重新加载reload：    </p><p>以上都配置无误后，你重新访问你的站点，如果出现需要身份验证的弹窗就说明修改成功了。</p><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><h3 id="htpasswd命令"><a href="#htpasswd命令" class="headerlink" title="htpasswd命令"></a><strong>htpasswd命令</strong></h3><p>htpasswd命令选项参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c 创建一个加密文件</span><br><span class="line">-n 不更新加密文件，只将htpasswd命令加密后的用户名密码显示在屏幕上 </span><br><span class="line">-m 默认htpassswd命令采用MD5算法对密码进行加密</span><br><span class="line">-d htpassswd命令采用CRYPT算法对密码进行加密</span><br><span class="line">-p htpassswd命令不对密码进行进行加密，即明文密码</span><br><span class="line">-s htpassswd命令采用SHA算法对密码进行加密</span><br><span class="line">-b htpassswd命令行中一并输入用户名和密码而不是根据提示输入密码</span><br><span class="line">-D 删除指定的用户</span><br></pre></td></tr></table></figure><h3 id="htpasswd例子"><a href="#htpasswd例子" class="headerlink" title="htpasswd例子"></a><strong>htpasswd例子</strong></h3><p><strong>利用htpasswd命令添加用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -bc ./.passwd sun pass</span><br></pre></td></tr></table></figure><p>在当前目录下生成一个.passwd文件，用户名sandu，密码：pass，默认采用MD5加密方式</p><p><strong>在原有密码文件中增加下一个用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -b ./.passwd sun1 pass</span><br></pre></td></tr></table></figure><p>去掉c选项，即可在第一个用户之后添加第二个用户，依此类推</p><p><strong>不更新密码文件，只显示加密后的用户名和密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -nb sun pass</span><br></pre></td></tr></table></figure><p>不更新.passwd文件，只在屏幕上输出用户名和经过加密后的密码</p><p><strong>利用htpasswd命令删除用户名和密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -D .passwd sun</span><br></pre></td></tr></table></figure><p><strong>利用 htpasswd 命令修改密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -D .passwd sun</span><br><span class="line">htpasswd -b .passwd sun pass</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天接了个需求：要把一些资源文件从外网提供给客户下载。处于安全和简单快捷考虑，分享一个快速实现并安全性很强的方案：nginx配置账号密码来控制，并且密码还是加密的，再增加白名单配置。此方案简单快捷和安全。&lt;/p&gt;
    
    </summary>
    
      <category term="Web服务" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx之location匹配优先级及顺序</title>
    <link href="https://wandouduoduo.github.io/articles/292b349b.html"/>
    <id>https://wandouduoduo.github.io/articles/292b349b.html</id>
    <published>2021-06-04T09:12:43.000Z</published>
    <updated>2021-06-04T09:54:00.644Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>nginx的使用范围和影响越来越广，很多大厂都在使用，但有些工作多年的同学可能都搞不清楚nginx中location的匹配优先级和匹配顺序是怎样的。今天又有同事不清楚，写配置时总是达不到业务需求，问到我这边帮他搞定了。那么本文就给大家详细聊聊这个问题。</p><a id="more"></a><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><p>nginx的安装和搭建这里就不再赘述了。无论你是直接命令包库yum或apt-get安装还是下载源码包编译安装等等，看你喜好。</p><p>nginx是通过server块中location的配置用来匹配不同url访问：</p><p>location配置匹配方式主要包括三种：<strong>精准匹配</strong>、<strong>普通匹配</strong>和<strong>正则匹配</strong></p><p><strong>定义</strong></p><p>location = expression   精准匹配<br>location expression      普通匹配<br>location ^~ expression 普通匹配<br>location ~ regex 正则匹配（区分大小写）<br>location ~* regex 正则匹配（不区分大小写）</p><p><strong>要求</strong></p><p>精准匹配要求uri与表达式（expression）完全匹配。<br>普通匹配要求uri与表达式满足前缀匹配。<br>正则匹配要求uri与正则表达式匹配。</p><p><strong>匹配优先级和顺序规则</strong></p><p><strong>精准匹配（=）</strong>  &gt;  <strong>普通匹配（^~）</strong>  &gt;  <strong>正则匹配（<del>或</del>*）</strong> &gt;  <strong>普通匹配（直接目录）</strong></p><p>1、首先精准匹配，如能匹配，则进行转发。如未能匹配成功，则进行普通匹配（^<del>）。<br>2、nginx将uri和所有^</del>类型的普通匹配规则进行匹配。如有多条规则均命中，则选择最长匹配。匹配成功后，进行转发。否则，则进行正则匹配。<br>3、正则匹配与顺序有关，按编写顺序进行匹配，一旦匹配成功，则转发请求并停止匹配。匹配不成功，则进行普通匹配（location expression ）<br>4、进行普通匹配（location expression），匹配成功则转发，不成功则返回错误码。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx的使用范围和影响越来越广，很多大厂都在使用，但有些工作多年的同学可能都搞不清楚nginx中location的匹配优先级和匹配顺序是怎样的。今天又有同事不清楚，写配置时总是达不到业务需求，问到我这边帮他搞定了。那么本文就给大家详细聊聊这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Web服务" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/categories/Web%E6%9C%8D%E5%8A%A1/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>glusterfs集群横向扩容缩容</title>
    <link href="https://wandouduoduo.github.io/articles/9e838829.html"/>
    <id>https://wandouduoduo.github.io/articles/9e838829.html</id>
    <published>2021-05-26T03:14:28.000Z</published>
    <updated>2021-05-26T04:12:52.907Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>glusterfs集群的搭建和使用这里就不再赘述了，可以看以前的教程文档。本文主要聊的是随着服务使用量的增加，那么存储集群势必要扩充空间。服务器迁移，需要先扩容后缩容等等。所以本文的主旨是聊glusterfs集群的横向优化：扩容和缩容。</p><a id="more"></a><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p><strong>集群搭建这里忽略</strong><br>查看glusterfs的节点和客户端挂载情况得知，目前是三个节点的<strong>分布式卷</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看节点数量</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster peer status</span></span><br><span class="line">Number of Peers: 2</span><br><span class="line">Hostname: 192.168.52.123</span><br><span class="line">Uuid: 0f07e396-fc0d-476c-884a-2cfb154f48d4</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line">Hostname: 192.168.52.124</span><br><span class="line">Uuid: 173df46f-a90a-4b0a-a5d0-834a17df17f6</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line"><span class="comment">#挂载 </span></span><br><span class="line">root@wyl01:/<span class="comment"># mount -t glusterfs 192.168.52.122:gv1 /gsclient/</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># df -h</span></span><br><span class="line">Filesystem Size Used Avail Use% Mounted on</span><br><span class="line">udev 1.9G 0 1.9G 0% /dev</span><br><span class="line">tmpfs 395M 972K 394M 1% /run</span><br><span class="line">/dev/vda3 49G 3.4G 44G 8% /</span><br><span class="line">tmpfs 2.0G 0 2.0G 0% /dev/shm</span><br><span class="line">tmpfs 5.0M 0 5.0M 0% /run/lock</span><br><span class="line">tmpfs 2.0G 0 2.0G 0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0 90M 90M 0 100% /snap/core/8039</span><br><span class="line">/dev/loop1 89M 89M 0 100% /snap/core/6964</span><br><span class="line">/dev/vda2 190M 80M 97M 46% /boot</span><br><span class="line">tmpfs 395M 0 395M 0% /run/user/0</span><br><span class="line">/dev/vdb 196G 62M 186G 1% /data</span><br><span class="line">192.168.52.122:gv1 588G 8.1G 580G 2% /gsclient</span><br></pre></td></tr></table></figure><p>创建20个文件</p><p>查看文件的分布情况如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1台</span></span><br><span class="line">root@wyl01:/data<span class="comment"># ls</span></span><br><span class="line">10.txt 11.txt 12.txt 14.txt 15.txt 16.txt 18.txt 1.txt 20.txt 2.txt 3.txt 6.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2台</span></span><br><span class="line">root@gluster002-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">13.txt 17.txt 19.txt 4.txt 8.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3台</span></span><br><span class="line">root@gluster003-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">5.txt 7.txt 9.txt lost+found</span><br></pre></td></tr></table></figure><h2 id="分布式卷优化"><a href="#分布式卷优化" class="headerlink" title="分布式卷优化"></a>分布式卷优化</h2><h3 id="添加节点扩容"><a href="#添加节点扩容" class="headerlink" title="添加节点扩容"></a>添加节点扩容</h3><p>现要对集群进行扩容，增加一个节点 gluster004-hf-aiui.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个节点</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster peer probe 192.168.52.125</span></span><br><span class="line">peer probe: success.</span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster peer status</span></span><br><span class="line">Number of Peers: 3</span><br><span class="line">Hostname: 192.168.52.123</span><br><span class="line">Uuid: 0f07e396-fc0d-476c-884a-2cfb154f48d4</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line">Hostname: 192.168.52.124</span><br><span class="line">Uuid: 173df46f-a90a-4b0a-a5d0-834a17df17f6</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line">Hostname: 192.168.52.125</span><br><span class="line">Uuid: f6578f82-adb4-4529-b803-eedde37cb550</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个brick</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume add-brick gv1 192.168.52.125:/data force</span></span><br><span class="line">volume add-brick: success</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷的信息</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume info</span></span><br><span class="line">Volume Name: gv1</span><br><span class="line">Type: Distribute</span><br><span class="line">Volume ID: 110caace-b49f-4493-8792-bc2982319c23</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 4</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: 192.168.52.122:/data</span><br><span class="line">Brick2: 192.168.52.123:/data</span><br><span class="line">Brick3: 192.168.52.124:/data</span><br><span class="line">Brick4: 192.168.52.125:/data</span><br><span class="line">Options Reconfigured:</span><br><span class="line">performance.client-io-threads: on</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br></pre></td></tr></table></figure><p>再创建30个文件，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># touch &#123;101..130&#125;.txt</span></span><br><span class="line"><span class="comment"># 第 1 台</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># ls /data/</span></span><br><span class="line">101.txt 107.txt 10.txt 112.txt 114.txt 117.txt 11.txt 122.txt 12.txt 14.txt 15.txt 16.txt 18.txt 1.txt 20.txt 2.txt 3.txt 6.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 台</span></span><br><span class="line">root@wyl02:/data<span class="comment"># ls</span></span><br><span class="line">105.txt 115.txt 116.txt 124.txt 125.txt 127.txt 128.txt 129.txt 13.txt 17.txt 19.txt 4.txt 8.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 3 台</span></span><br><span class="line">root@wyl03-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">102.txt 103.txt 104.txt 106.txt 108.txt 109.txt 110.txt 111.txt 121.txt 130.txt 5.txt 7.txt 9.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 4 台</span></span><br><span class="line">root@wyl04-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">113.txt 118.txt 119.txt 120.txt 123.txt 126.txt lost+found</span><br></pre></td></tr></table></figure><p>结论：可以看出当扩容后，原先的数据不会均衡到第四台glusterfs上，但是新增加的文件是可以的。</p><h3 id="分布式卷数据rebalance"><a href="#分布式卷数据rebalance" class="headerlink" title="分布式卷数据rebalance"></a>分布式卷数据rebalance</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume rebalance gv1 start</span></span><br><span class="line">volume rebalance: gv1: success: Rebalance on gv1 has been started successfully. Use rebalance status <span class="built_in">command</span> to check status of the rebalance process.</span><br><span class="line">ID: 76b07497-b26d-438f-bd6f-7659a9aba251</span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume rebalance gv1 status</span></span><br><span class="line">Node Rebalanced-files size scanned failures skipped status run time <span class="keyword">in</span> h:m:s</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">192.168.52.123 4 0Bytes 13 0 0 completed 0:00:00</span><br><span class="line">192.168.52.124 1 0Bytes 14 0 0 completed 0:00:00</span><br><span class="line">192.168.52.125 0 0Bytes 6 0 0 completed 0:00:00</span><br><span class="line">localhost 12 0Bytes 18 0 0 completed 0:00:01</span><br><span class="line">volume rebalance: gv1: success</span><br><span class="line"><span class="comment">#第 1 台</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># ls /data/</span></span><br><span class="line">101.txt 107.txt 112.txt 114.txt 117.txt 122.txt 13.txt 17.txt 4.txt 8.txt lost+found</span><br><span class="line"><span class="comment">#第 2 台</span></span><br><span class="line">root@wyl02-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">105.txt 115.txt 116.txt 124.txt 125.txt 127.txt 128.txt 129.txt 19.txt 9.txt lost+found</span><br><span class="line"><span class="comment">#第 3 台</span></span><br><span class="line">root@wyl03-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">100.txt 102.txt 103.txt 104.txt 106.txt 108.txt 109.txt 110.txt 111.txt 121.txt 130.txt 2.txt 5.txt 7.txt lost+found</span><br><span class="line"><span class="comment">#第 4 台</span></span><br><span class="line">root@wyl04-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">10.txt 113.txt 118.txt 119.txt 11.txt 120.txt 123.txt 126.txt 12.txt 14.txt 15.txt 16.txt 18.txt 1.txt 20.txt 3.txt 6.txt lost+found</span><br></pre></td></tr></table></figure><p>可以看到，数据rebalance，第 4 台上的数据明显增加了。</p><p>这里有一个需要注意的地方，当数据量太大的时候，对数据进行rebalance必须要考虑的一个问题就是性能，不能因为数据rebalance而影响我们的存储的正常使用。Glusterfs也考虑到了这个问题，在进行数据rebalance时，根据实际场景不同设计了三种不同的“级别”：</p><p><strong>lazy</strong>：每次仅可以迁移一个文件<br><strong>normal</strong>：默认设置，每次迁移2个文件或者是(CPU逻辑个数-4)/2,哪个大，选哪个<br><strong>aggressive</strong>：每次迁移4个文件或者是(CPU逻辑个数-4)/2<br>通过以下命令进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume set VOLUME-NAME cluster.rebal-throttle [lazy|normal|aggressive]</span><br></pre></td></tr></table></figure><p>如将volume repvol设置为lazy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nwyl01 ~]<span class="comment"># gluster volume set gv1 cluster.rebal-throttle lazy</span></span><br><span class="line">volume <span class="built_in">set</span>: success</span><br></pre></td></tr></table></figure><h3 id="分布式卷缩容"><a href="#分布式卷缩容" class="headerlink" title="分布式卷缩容"></a>分布式卷缩容</h3><p>缩容之前我们先需要将数据迁移到其他的brick上，假设我们移除gluster004-hf-aiui节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 gluster004-hf-aiui:/data help</span></span><br><span class="line">Usage:</span><br><span class="line">volume remove-brick &lt;VOLNAME&gt; [replica &lt;COUNT&gt;] &lt;BRICK&gt; ... &lt;start|stop|status|commit|force&gt;</span><br><span class="line"></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 gluster004-hf-aiui:/data start</span></span><br><span class="line">Running remove-brick with cluster.force-migration enabled can result <span class="keyword">in</span> data corruption. It is safer to <span class="built_in">disable</span> this option so that files that receive writes during migration are not migrated.</span><br><span class="line">Files that are not migrated can <span class="keyword">then</span> be manually copied after the remove-brick commit operation.</span><br><span class="line">Do you want to <span class="built_in">continue</span> with your current cluster.force-migration settings? (y/n) y</span><br><span class="line">volume remove-brick start: success</span><br><span class="line">ID: e30a9e72-53ef-4e79-a394-38dcac9061ba</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看移除节点的状态</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 gluster004-hf-aiui:/data status</span></span><br><span class="line">Node Rebalanced-files size scanned failures skipped status run time <span class="keyword">in</span> h:m:s</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">192.168.52.125 17 0Bytes 17 0 0 completed 0:00:00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除前先将数据同步到其他brick上</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 gluster004-hf-aiui:/data commit</span></span><br><span class="line">volume remove-brick commit: success</span><br><span class="line">Check the removed bricks to ensure all files are migrated.</span><br><span class="line">If files with data are found on the brick path, copy them via a gluster mount point before re-purposing the removed brick.</span><br></pre></td></tr></table></figure><p>移除后，我们看数据的分布情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第 1 台</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># ls /data/</span></span><br><span class="line">101.txt 107.txt 112.txt 114.txt 117.txt 122.txt 13.txt 17.txt 4.txt 8.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 台</span></span><br><span class="line">root@wyl02-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">105.txt 115.txt 116.txt 124.txt 125.txt 127.txt 128.txt 129.txt 19.txt 9.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 3 台</span></span><br><span class="line">root@wyl03-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">100.txt 103.txt 106.txt 109.txt 110.txt 113.txt 119.txt 120.txt 123.txt 12.txt 14.txt 16.txt 1.txt 2.txt 5.txt 7.txt</span><br><span class="line">102.txt 104.txt 108.txt 10.txt 111.txt 118.txt 11.txt 121.txt 126.txt 130.txt 15.txt 18.txt 20.txt 3.txt 6.txt lost+found</span><br></pre></td></tr></table></figure><p>可以看到文件被迁移到其他的brick上了。</p><h2 id="复制卷的扩容rebalance缩容"><a href="#复制卷的扩容rebalance缩容" class="headerlink" title="复制卷的扩容rebalance缩容"></a>复制卷的扩容rebalance缩容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume info # 卷的基本信息</span></span><br><span class="line">Volume Name: gv1</span><br><span class="line">Type: Replicate</span><br><span class="line">Volume ID: ff65e899-4f30-4249-9cf4-532a7d4eab74</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 1 x 2 = 2</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: 192.168.52.122:/data</span><br><span class="line">Brick2: 192.168.52.123:/data</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line">performance.client-io-threads: off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建20个文件</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># touch &#123;1..20&#125;.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分布情况</span></span><br><span class="line"><span class="comment"># 第 1 台</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># ls /data/</span></span><br><span class="line">10.txt 11.txt 12.txt 13.txt 14.txt 15.txt 16.txt 17.txt 18.txt 19.txt 1.txt 20.txt 2.txt 3.txt 4.txt 5.txt 6.txt 7.txt 8.txt 9.txt lost+found</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 台</span></span><br><span class="line">root@wyl02-hf-aiui:/data<span class="comment"># ls</span></span><br><span class="line">10.txt 11.txt 12.txt 13.txt 14.txt 15.txt 16.txt 17.txt 18.txt 19.txt 1.txt 20.txt 2.txt 3.txt 4.txt 5.txt 6.txt 7.txt 8.txt 9.txt lost+found</span><br><span class="line">添加gluster003和gluster004两个节点</span><br></pre></td></tr></table></figure><h3 id="添加gluster003-节点"><a href="#添加gluster003-节点" class="headerlink" title="添加gluster003 节点"></a>添加gluster003 节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient# gluster peer probe 192.168.52.124</span><br><span class="line">peer probe: success.</span><br></pre></td></tr></table></figure><h3 id="添加gluster04-节点"><a href="#添加gluster04-节点" class="headerlink" title="添加gluster04 节点"></a>添加gluster04 节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient# gluster peer probe 192.168.52.125</span><br><span class="line">peer probe: success.</span><br></pre></td></tr></table></figure><h3 id="查看peer信息"><a href="#查看peer信息" class="headerlink" title="查看peer信息"></a>查看peer信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># gluster peer status</span></span><br><span class="line">Number of Peers: 3</span><br><span class="line">Hostname: 192.168.52.123</span><br><span class="line">Uuid: 0f07e396-fc0d-476c-884a-2cfb154f48d4</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line">Hostname: 192.168.52.124</span><br><span class="line">Uuid: 173df46f-a90a-4b0a-a5d0-834a17df17f6</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line">Hostname: 192.168.52.125</span><br><span class="line">Uuid: f6578f82-adb4-4529-b803-eedde37cb550</span><br><span class="line">State: Peer <span class="keyword">in</span> Cluster (Connected)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩容brick</span></span><br><span class="line"></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume add-brick gv1 replica 2 192.168.52.124:/data 192.168.52.125:/data force</span></span><br><span class="line">volume add-brick: success</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看卷的信息</span></span><br><span class="line"></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume info</span></span><br><span class="line">Volume Name: gv1</span><br><span class="line">Type: Distributed-Replicate</span><br><span class="line">Volume ID: ff65e899-4f30-4249-9cf4-532a7d4eab74</span><br><span class="line">Status: Started</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 2 x 2 = 4</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: 192.168.52.122:/data</span><br><span class="line">Brick2: 192.168.52.123:/data</span><br><span class="line">Brick3: 192.168.52.124:/data</span><br><span class="line">Brick4: 192.168.52.125:/data</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line">performance.client-io-threads: off</span><br></pre></td></tr></table></figure><p>发现现在变成2*2了模式了。重新写入20个txt文件，扩容后这里需要注意的是必须先rebalance。然后重新写入文件才会hash到新的节点上。之前的旧数据也会被rebalance。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume rebalance gv1 start</span></span><br><span class="line">volume rebalance: gv1: success: Rebalance on gv1 has been started successfully. Use rebalance status <span class="built_in">command</span> to check status of the rebalance process.</span><br><span class="line">ID: 90df529c-d950-4010-9248-19ffa7c83853</span><br></pre></td></tr></table></figure><p>节点的缩容，这里是分布式复制，所以缩容也是成对节点的一起缩容，操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始移除节点</span></span><br><span class="line"></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 replica 2 wyl03-hf-aiui:/data wyl04-hf-aiui:/data start</span></span><br><span class="line">Replica 2 volumes are prone to split-brain. Use Arbiter or Replica 3 to avaoid this. See: http://docs.gluster.org/en/latest/Administrator%20Guide/Split%20brain%20and%20ways%20to%20deal%20with%20it/.</span><br><span class="line">Do you still want to <span class="built_in">continue</span>?</span><br><span class="line">(y/n) y</span><br><span class="line">Running remove-brick with cluster.force-migration enabled can result <span class="keyword">in</span> data corruption. It is safer to <span class="built_in">disable</span> this option so that files that receive writes during migration are not migrated.</span><br><span class="line">Files that are not migrated can <span class="keyword">then</span> be manually copied after the remove-brick commit operation.</span><br><span class="line">Do you want to <span class="built_in">continue</span> with your current cluster.force-migration settings? (y/n) y</span><br><span class="line">volume remove-brick start: success</span><br><span class="line">ID: d4ce7df1-30c9-4124-9986-c9634986609f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除前先将数据同步到其他brick上</span></span><br><span class="line">root@wyl01:/gsclient<span class="comment"># gluster volume remove-brick gv1 replica 2 wyl03-hf-aiui:/data wyl04-hf-aiui:/data commit</span></span><br><span class="line">Replica 2 volumes are prone to split-brain. Use Arbiter or Replica 3 to avaoid this. See: http://docs.gluster.org/en/latest/Administrator%20Guide/Split%20brain%20and%20ways%20to%20deal%20with%20it/.</span><br><span class="line">Do you still want to <span class="built_in">continue</span>?</span><br><span class="line">(y/n) y</span><br><span class="line">volume remove-brick commit: success</span><br><span class="line">Check the removed bricks to ensure all files are migrated.</span><br><span class="line">If files with data are found on the brick path, copy them via a gluster mount point before re-purposing the removed</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glusterfs集群的搭建和使用这里就不再赘述了，可以看以前的教程文档。本文主要聊的是随着服务使用量的增加，那么存储集群势必要扩充空间。服务器迁移，需要先扩容后缩容等等。所以本文的主旨是聊glusterfs集群的横向优化：扩容和缩容。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://wandouduoduo.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="GlusterFS" scheme="https://wandouduoduo.github.io/tags/GlusterFS/"/>
    
  </entry>
  
  <entry>
    <title>kafka之扩容和缩容</title>
    <link href="https://wandouduoduo.github.io/articles/c34eeebc.html"/>
    <id>https://wandouduoduo.github.io/articles/c34eeebc.html</id>
    <published>2021-05-19T06:17:37.000Z</published>
    <updated>2021-05-19T06:43:23.785Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>本文讨论Kafka的扩缩容以及故障后如何“补齐”分区。实质上先扩容再缩容也是迁移的操作。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Kafka 版本2.6。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>扩容也就是新增节点，扩容后老的数据不会自动迁移，只有新创建的topic才可能会分配到新增的节点上面。如果我们不需要迁移旧数据，那直接把新的节点启动起来就行了，不需要做额外的操作。但有的时候，新增节点后，我们会将一些老数据迁移到新的节点上，以达到负载均衡的目的，这个时候就需要手动操作了。Kafka提供了一个脚本（在bin目录下）：<strong>kafka-reassign-partitions.sh</strong>，通过这个脚本可以重新分配分区的分布。脚本的使用比较简单，提供一个JSON格式的分配方案，然后传给脚本，脚本根据我们的分配方案重新进行平衡。</p><p>举个例子，假如现在集群有181、182两个broker，上面有4个topic：test-1，test-2，test-3，test-4，这些topic都有4个分区，2个副本，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两个broker</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /kafka_26/brokers/ids</span><br><span class="line">[181, 182]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4个topic</span></span><br><span class="line">➜ bin/kafka-topics.sh --list --zookeeper localhost:2181/kafka_26</span><br><span class="line">__consumer_offsets</span><br><span class="line">test-1</span><br><span class="line">test-1</span><br><span class="line">test-3</span><br><span class="line">test-4</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-1</span></span><br><span class="line">➜  bin/kafka-topics.sh --describe --topic test-1  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-1   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-1   Partition: 0    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-1   Partition: 1    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line">        Topic: test-1   Partition: 2    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-1   Partition: 3    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-2</span></span><br><span class="line">➜  bin/kafka-topics.sh --describe --topic test-2  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-2   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-2   Partition: 0    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-2   Partition: 1    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line">        Topic: test-2   Partition: 2    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-2   Partition: 3    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-3</span></span><br><span class="line">➜  bin/kafka-topics.sh --describe --topic test-3  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-3   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-3   Partition: 0    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-3   Partition: 1    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line">        Topic: test-3   Partition: 2    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-3   Partition: 3    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">test</span>-4</span></span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-4  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-4   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-4   Partition: 0    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line">        Topic: test-4   Partition: 1    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br><span class="line">        Topic: test-4   Partition: 2    Leader: 182     Replicas: 182,181       Isr: 182,181</span><br><span class="line">        Topic: test-4   Partition: 3    Leader: 181     Replicas: 181,182       Isr: 181,182</span><br></pre></td></tr></table></figure><p>现在扩容了，新增了两个节点：183和184。扩容后，我们想要把test-3，test-4迁移到183，184上面去。</p><p>首先我们可以准备如下JSON格式的文件（假设文件名为<code>topics-to-move.json</code>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"topics"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"topic"</span>: <span class="string">"test-3"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"topic"</span>: <span class="string">"test-4"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面写明想要重新分配的topic。然后执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜ bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --topics-to-move-json-file topics-to-move.json --broker-list "183,184" --generate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前分区的分布情况</span></span><br><span class="line">Current partition replica assignment</span><br><span class="line">&#123;"version":1,"partitions":[&#123;"topic":"test-3","partition":0,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":1,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":2,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":3,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":0,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":1,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":2,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":3,"replicas":[181,182],"log_dirs":["any","any"]&#125;]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议的分区分布情况</span></span><br><span class="line">Proposed partition reassignment configuration</span><br><span class="line">&#123;"version":1,"partitions":[&#123;"topic":"test-3","partition":0,"replicas":[183,184],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":1,"replicas":[184,183],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":2,"replicas":[183,184],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":3,"replicas":[184,183],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":0,"replicas":[184,183],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":1,"replicas":[183,184],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":2,"replicas":[184,183],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":3,"replicas":[183,184],"log_dirs":["any","any"]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的命令会列出当前分区的分布情况，并且会给出一个建议的新分区分配方案，都是JSON格式的，内容也很简单。然后我们将建议的分配方案保存为一个文件（假设文件名为<code>expand-cluster-reassignment.json</code>），当然我们也可以手动修改这个方案，只要格式正确即可。然后执行下面命令使用新的方案进行分区重分配：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜ bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file expand-cluster-reassignment.json --execute</span><br><span class="line">Current partition replica assignment</span><br><span class="line"></span><br><span class="line">&#123;"version":1,"partitions":[&#123;"topic":"test-3","partition":0,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":1,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":2,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-3","partition":3,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":0,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":1,"replicas":[181,182],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":2,"replicas":[182,181],"log_dirs":["any","any"]&#125;,&#123;"topic":"test-4","partition":3,"replicas":[181,182],"log_dirs":["any","any"]&#125;]&#125;</span><br><span class="line"></span><br><span class="line">Save this to use as the --reassignment-json-file option during rollback</span><br><span class="line">Successfully started partition reassignments for test-3-0,test-3-1,test-3-2,test-3-3,test-4-0,test-4-1,test-4-2,test-4-3</span><br></pre></td></tr></table></figure><p>这样就<strong>提交</strong>了重分配的任务，可以使用下面的命令查看任务的执行状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜ bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file expand-cluster-reassignment.json --verify</span><br><span class="line">Status of partition reassignment:</span><br><span class="line">Reassignment of partition test-3-0 is complete.</span><br><span class="line">Reassignment of partition test-3-1 is complete.</span><br><span class="line">Reassignment of partition test-3-2 is complete.</span><br><span class="line">Reassignment of partition test-3-3 is complete.</span><br><span class="line">Reassignment of partition test-4-0 is complete.</span><br><span class="line">Reassignment of partition test-4-1 is complete.</span><br><span class="line">Reassignment of partition test-4-2 is complete.</span><br><span class="line">Reassignment of partition test-4-3 is complete.</span><br><span class="line"></span><br><span class="line">Clearing broker-level throttles on brokers 181,182,183,184</span><br><span class="line">Clearing topic-level throttles on topics test-3,test-4</span><br></pre></td></tr></table></figure><p>完成后，我们检查一下新的test-3和test-4的分区分配情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜ bin/kafka-topics.sh --describe --topic test-3  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-3   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-3   Partition: 0    Leader: 183     Replicas: 183,184       Isr: 183,184</span><br><span class="line">        Topic: test-3   Partition: 1    Leader: 184     Replicas: 184,183       Isr: 183,184</span><br><span class="line">        Topic: test-3   Partition: 2    Leader: 183     Replicas: 183,184       Isr: 183,184</span><br><span class="line">        Topic: test-3   Partition: 3    Leader: 184     Replicas: 184,183       Isr: 183,184</span><br><span class="line">        </span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-4  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-4   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-4   Partition: 0    Leader: 184     Replicas: 184,183       Isr: 183,184</span><br><span class="line">        Topic: test-4   Partition: 1    Leader: 183     Replicas: 183,184       Isr: 183,184</span><br><span class="line">        Topic: test-4   Partition: 2    Leader: 184     Replicas: 184,183       Isr: 183,184</span><br><span class="line">        Topic: test-4   Partition: 3    Leader: 183     Replicas: 183,184       Isr: 184,183</span><br></pre></td></tr></table></figure><p>可以看到，这两个topic的数据已经全部分配到183和184节点上了。</p><h2 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h2><p>从上面可以看到，其实数据分配完全是由我们自己把控的，缩容也只是数据迁移而已，只需要提供正确的迁移方案即可。一般生产环境很少有缩容的，但有一个场景比较常见，就是某个节点故障了，且无法恢复。以前的文章提到过，节点故障后，这个节点上的分区就丢了，Kafka不会自动在其它可用节点上重新创建一个副本，这个时候就需要我们自己手动在其他可用节点创建副本，原理和扩容是一样的。接着上面的例子，比如现在184节点故障了，且无法恢复了，而test-3和test-4有部分分区是在该节点上面的，自然也就丢了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 节点挂了，zk中的节点已经没了</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 15] ls /kafka_26/brokers/ids</span><br><span class="line">[181, 182, 183]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到ISR中已经没有184了</span></span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-3  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-3   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-3   Partition: 0    Leader: 183     Replicas: 183,184       Isr: 183</span><br><span class="line">        Topic: test-3   Partition: 1    Leader: 183     Replicas: 184,183       Isr: 183</span><br><span class="line">        Topic: test-3   Partition: 2    Leader: 183     Replicas: 183,184       Isr: 183</span><br><span class="line">        Topic: test-3   Partition: 3    Leader: 183     Replicas: 184,183       Isr: 183</span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-4  --zookeeper localhost:2181/kafka_26</span><br><span class="line">Topic: test-4   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-4   Partition: 0    Leader: 183     Replicas: 184,183       Isr: 183</span><br><span class="line">        Topic: test-4   Partition: 1    Leader: 183     Replicas: 183,184       Isr: 183</span><br><span class="line">        Topic: test-4   Partition: 2    Leader: 183     Replicas: 184,183       Isr: 183</span><br><span class="line">        Topic: test-4   Partition: 3    Leader: 183     Replicas: 183,184       Isr: 183</span><br></pre></td></tr></table></figure><p>这个时候，我们准备把test-3原来在184上的分区分配到181上面去，把test-4在184上的分区分配到182上去，那分配方案就是下面这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">➜ cat expand-cluster-reassignment.json</span><br><span class="line">&#123;</span><br><span class="line">  "version": 1,</span><br><span class="line">  "partitions": [</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-3",</span><br><span class="line">      "partition": 0,</span><br><span class="line">      "replicas": [183, 181],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-3",</span><br><span class="line">      "partition": 1,</span><br><span class="line">      "replicas": [181, 183],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-3",</span><br><span class="line">      "partition": 2,</span><br><span class="line">      "replicas": [183, 181],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-3",</span><br><span class="line">      "partition": 3,</span><br><span class="line">      "replicas": [181, 183],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-4",</span><br><span class="line">      "partition": 0,</span><br><span class="line">      "replicas": [182, 183],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-4",</span><br><span class="line">      "partition": 1,</span><br><span class="line">      "replicas": [183, 182],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-4",</span><br><span class="line">      "partition": 2,</span><br><span class="line">      "replicas": [182, 183],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "topic": "test-4",</span><br><span class="line">      "partition": 3,</span><br><span class="line">      "replicas": [183, 182],</span><br><span class="line">      "log_dirs": ["any", "any"]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行分配方案即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行分配方案</span></span><br><span class="line">➜ bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file expand-cluster-reassignment.json --execute</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看进度</span></span><br><span class="line">➜ bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file expand-cluster-reassignment.json --verify </span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成后查看<span class="built_in">test</span>-3和<span class="built_in">test</span>-4</span></span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-3  --zookeeper localhost:2181/kafka_26Topic: test-3   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-3   Partition: 0    Leader: 183     Replicas: 183,181       Isr: 183,181</span><br><span class="line">        Topic: test-3   Partition: 1    Leader: 183     Replicas: 181,183       Isr: 183,181</span><br><span class="line">        Topic: test-3   Partition: 2    Leader: 183     Replicas: 183,181       Isr: 183,181</span><br><span class="line">        Topic: test-3   Partition: 3    Leader: 183     Replicas: 181,183       Isr: 183,181</span><br><span class="line">➜ bin/kafka-topics.sh --describe --topic test-4  --zookeeper localhost:2181/kafka_26Topic: test-4   PartitionCount: 4       ReplicationFactor: 2    Configs: </span><br><span class="line">        Topic: test-4   Partition: 0    Leader: 183     Replicas: 182,183       Isr: 183,182</span><br><span class="line">        Topic: test-4   Partition: 1    Leader: 183     Replicas: 183,182       Isr: 183,182</span><br><span class="line">        Topic: test-4   Partition: 2    Leader: 183     Replicas: 182,183       Isr: 183,182</span><br><span class="line">        Topic: test-4   Partition: 3    Leader: 183     Replicas: 183,182       Isr: 183,182</span><br></pre></td></tr></table></figure><h2 id="kafka-manager页面操作"><a href="#kafka-manager页面操作" class="headerlink" title="kafka manager页面操作"></a>kafka manager页面操作</h2><p>页面操作不支持批量操作topic，需要逐个topic进行操作。</p><p>1，进入topic视图，点击 Generate Partition Assignments 生成分区分配。进入分区分配界面，</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/1.png" alt></p><p>2，对该topic需要占用的节点进行勾选，再次点击 Generate Partition Assignments</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/2.png" alt></p><p>3，分区完成 ， go to topic view</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/3.png" alt></p><p>4,  重新分配。 <strong>Reassign Partitions</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/4.png" alt></p><p>5，go to reassign partitions 转到重新分配分区</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/5.png" alt></p><p>6，验证查看</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/c34eeebc/6.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管扩容还是缩容，或者是故障后手动补齐分区，实质都是分区重分配，使用<code>kafka-reassign-partitions.sh</code>脚本即可。该脚本使用也非常简单：</p><ol><li>先提供一个JSON格式的需要重分配的topic列表，然后执行<code>--generate</code>生成迁移方案文件；</li><li>然后使用<code>--execute</code>执行新的分配方案；</li><li>最后使用<code>--verify</code>查看分配方案执行进度。</li></ol><p>如果对于分配方案文件格式很熟悉，可以跳过1.</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讨论Kafka的扩缩容以及故障后如何“补齐”分区。实质上先扩容再缩容也是迁移的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Kafka" scheme="https://wandouduoduo.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>lvs负载均衡实战</title>
    <link href="https://wandouduoduo.github.io/articles/17e1663a.html"/>
    <id>https://wandouduoduo.github.io/articles/17e1663a.html</id>
    <published>2021-04-19T06:23:22.000Z</published>
    <updated>2021-04-20T07:35:26.203Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>通过本文掌握什么是负载均衡及负载均衡的作用和意义；了解lvs负载均衡的三种模式；了解lvs-DR负载均衡部署方法；掌握nginx实现负载均衡的方法；掌握lvs+nginx负载均衡拓扑结构。</p> <a id="more"></a><h2 id="负载均衡方案"><a href="#负载均衡方案" class="headerlink" title="负载均衡方案"></a>负载均衡方案</h2><h3 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h3><p> 一台普通服务器的处理能力是有限的，假如能达到每秒几万个到几十万个请求，但却无法在一秒钟内处理上百万个甚至更多的请求。但若能将多台这样的服务器组成一个系统，并通过软件技术将所有请求平均分配给所有服务器，那么这个系统就完全拥有每秒钟处理几百万个甚至更多请求的能力。这就是负载均衡最初的基本设计思想。</p><p>负载均衡是由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助。通过某种负载分担技术，将外部发送来的请求按照某种策略分配到服务器集合的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。负载均衡解决了大量并发访问服务问题，其目的就是用最少的投资获得接近于大型主机的性能。 </p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/1.png" alt="img"></p><h3 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h3><h4 id="基于DNS的负载均衡"><a href="#基于DNS的负载均衡" class="headerlink" title="基于DNS的负载均衡"></a>基于DNS的负载均衡</h4><p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。</p><p>DNS负载均衡技术是最早的负载均衡解决方案，它是通过DNS服务中的随机名字解析来实现的，在DNS服务器中，可以为多个不同的地址配置同一个名字，而最终查询这个名字的客户机将在解析这个名字时得到其中的一个地址。因此，对于同一个名字，不同的客户机会得到不同的地址，它们也就访问不同地址上的Web服务器，从而达到负载均衡的目的。</p><p>如下图：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/2.png" alt="img"></p><p><strong>优点</strong></p><p>实现简单、实施容易、成本低、适用于大多数TCP/IP应用；</p><p><strong>缺点</strong></p><p>1、 负载分配不均匀，DNS服务器将Http请求平均地分配到后台的Web服务器上，而不考虑每个Web服务器当前的负载情况；如果后台的Web服务器的配置和处理能力不同，最慢的Web服务器将成为系统的瓶颈，处理能力强的服务器不能充分发挥作用；</p><p>2、可靠性低，如果后台的某台Web服务器出现故障，DNS服务器仍然会把DNS请求分配到这台故障服务器上，导致不能响应客户端。</p><p>3、变更生效时间长，如果更改NDS有可能造成相当一部分客户不能享受Web服务，并且由于DNS缓存的原因，所造成的后果要持续相当长一段时间(一般DNS的刷新周期约为24小时)。</p><h4 id="基于四层交换技术的负载均衡"><a href="#基于四层交换技术的负载均衡" class="headerlink" title="基于四层交换技术的负载均衡"></a>基于四层交换技术的负载均衡</h4><p>基于四层交换技术的负载均衡是通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器与请求客户端建立TCP连接，然后发送Client请求的数据。</p><p>如下图：</p><p>​        <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/3.png" alt="img"></p><p>client发送请求至4层负载均衡器，4层负载均衡器根据负载策略把client发送的报文目标地址(原来是负载均衡设备的IP地址)修改为后端服务器（可以是web服务器、邮件服务等）IP地址，这样client就可以直接跟后端服务器建立TCP连接并发送数据。</p><p>具有代表意义的产品：LVS（开源软件），F5（硬件）</p><p><strong>优点</strong></p><p>性能高、支持各种网络协议</p><p><strong>缺点</strong></p><p>对网络依赖较大，负载智能化方面没有7层负载好（比如不支持对url个性化负载），F5硬件性能很高但成本也高需要人民币几十万，对于小公司就望而却步了。</p><h4 id="基于七层交换技术的负载均衡"><a href="#基于七层交换技术的负载均衡" class="headerlink" title="基于七层交换技术的负载均衡"></a>基于七层交换技术的负载均衡</h4><p>基于七层交换技术的负载均衡也称内容交换，也就是主要通过报文中的真正有意义的应用层内容，再加上负载均衡设备设置的服务器选择方式，决定最终选择的服务器。</p><p>如下图：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/4.png" alt="img"></p><p>七层负载均衡服务器起了一个代理服务器的作用，client要访问webserver要先与七层负载设备进行三次握手后建立TCP连接，把要访问的报文信息发送给七层负载均衡；然后七层负载均衡再根据设置的均衡规则选择特定的webserver，然后通过三次握手与此台webserver建立TCP连接，然后webserver把需要的数据发送给七层负载均衡设备，负载均衡设备再把数据发送给client。</p><p>具有代表意义的产品：nginx（软件）、apache（软件）</p><p><strong>优点</strong></p><p>对网络依赖少，负载智能方案多（比如可根据不同的url进行负载）</p><p><strong>缺点</strong></p><p>网络协议有限，nginx和apache支持http负载，性能没有4层负载高</p><h3 id="确定使用四层-七层负载结合方案"><a href="#确定使用四层-七层负载结合方案" class="headerlink" title="确定使用四层+七层负载结合方案"></a>确定使用四层+七层负载结合方案</h3><p>四层负载使用lvs软件或F5硬件实现。</p><p>七层负载使用nginx实现。</p><p>如下图是lvs+nginx的拓扑结构：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/5.png" alt="img"></p><h3 id="nginx集群背景"><a href="#nginx集群背景" class="headerlink" title="nginx集群背景"></a>nginx集群背景</h3><p>在keepalived+nginx的主备容灾高可用的架构中，nginx是作为外部访问系统的唯一入口，理论上一台nginx的最大并发量可以高达50000，但是当并发量更大的时候，keepalived+nginx的高可用机制是没办法满足需求的，因为keepalived+nginx的架构中确确实实是一台nginx在工作，只有当master宕机或异常时候，备份机才会上位。那么如何解决更大的高并发问题呢，也许会问能不能搭建nginx集群，直接对外提供访问？</p><p>很显然这是欠妥当的，因为当nginx作为外部的唯一访问入口，没办法直接以集群的形式对外提供服务，没有那么多的公网ip资源可用，既太浪费也不友好。但是在内网环境下，是可以用nginx集群（nginx横向扩展服务集合）的，当然总得有一个对外入口，所以需要在nginx集群之上，在加一层负载均衡器，作为系统的唯一入口。</p><h2 id="lvs实现四层负载DR模式"><a href="#lvs实现四层负载DR模式" class="headerlink" title="lvs实现四层负载DR模式"></a>lvs实现四层负载DR模式</h2><h3 id="什么是lvs"><a href="#什么是lvs" class="headerlink" title="什么是lvs"></a>什么是lvs</h3><p>LVS是Linux Virtual Server的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。本项目在1998年5月由章文嵩博士成立，是中国国内最早出现的自由软件项目之一。</p><h3 id="lvs实现负载的三种方式"><a href="#lvs实现负载的三种方式" class="headerlink" title="lvs实现负载的三种方式"></a>lvs实现负载的三种方式</h3><p>运行 lPVS软件的服务器，在整个负载均衡集群中承担一调度角色 软件的服务器，（即 向真实服务器分配从客户端过来的请求。LVS中的调度方法有三种 ：NAT（Network Address Translation网络地址转换）、TUN（tunnel 隧道）、DR（direct route 直接路由）</p><h3 id="LVS-DR-模式"><a href="#LVS-DR-模式" class="headerlink" title="LVS-DR 模式"></a>LVS-DR 模式</h3><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/6.png" alt="img"></p><p>请求由LVS接受，由真实提供服务的服务器(RealServer, RS)直接返回给用户，返回的时候不经过LVS。</p><p>DR模式下需要LVS服务器和RS绑定同一个VIP， 一个请求过来时，LVS只需要将网络帧的MAC地址修改为某一台RS的MAC，该包就会被转发到相应的RS处理，注意此时的源IP和目标IP都没变，RS收到LVS转发来的包，发现MAC是自己的，发现IP也是自己的，于是这个包被合法地接受，而当RS返回响应时，只要直接向源IP(即用户的IP)返回即可，不再经过LVS。</p><p>DR模式下，lvs接收请求输入，将请求转发给RS，由RS输出响应给用户，性能非常高。</p><p>它的不足之处是要求负载均衡器与RS在一个物理段上。</p><h3 id="LVS-NAT模式"><a href="#LVS-NAT模式" class="headerlink" title="LVS-NAT模式"></a>LVS-NAT模式</h3><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/7.png" alt="img"></p><p>NAT(Network Address Translation)是一种外网和内网地址映射的技术。NAT模式下，LVS需要作为RS的网关，当网络包到达LVS时，LVS做目标地址转换(DNAT)，将目标IP改为RS的IP。RS接收到包以后，处理完，返回响应时，源IP是RS IP，目标IP是客户端的IP，这时RS的包通过网关(LVS)中转，LVS会做源地址转换(SNAT)，将包的源地址改为VIP，对于客户端只知道是LVS直接返回给它的。</p><p>NAT模式请求和响应都需要经过lvs，性能没有DR模式好。</p><h3 id="LVS-TUN模式"><a href="#LVS-TUN模式" class="headerlink" title="LVS-TUN模式"></a>LVS-TUN模式</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/31.png" alt="img"></p><p>TUN模式是通过ip隧道技术减轻lvs调度服务器的压力，许多Internet服务（例如WEB服务器）的请求包很短小，而应答包通常很大，负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量。相比NAT性能要高的多，比DR模式的优点是不限制负载均衡器与RS在一个物理段上。但是它的不足需要所有的服务器（lvs、RS）支持”IP Tunneling”(IP Encapsulation)协议。</p><h2 id="lvs-DR实战"><a href="#lvs-DR实战" class="headerlink" title="lvs-DR实战"></a>lvs-DR实战</h2><p>vip：192.168.101.100</p><p>lvs-director：192.168.101.8</p><p>nginx1：192.168.101.3</p><p>nginx2：192.168.101.4</p><h3 id="lvs调度服务器Director安装"><a href="#lvs调度服务器Director安装" class="headerlink" title="lvs调度服务器Director安装"></a>lvs调度服务器Director安装</h3><h4 id="安装lvs"><a href="#安装lvs" class="headerlink" title="安装lvs"></a>安装lvs</h4><p>在192.168.101.8上安装lvs</p><p>centos6.5自带lvs，检查linux内核是否集成lvs模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe -l | grep ipvs</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/8.png" alt="img"> </p><h4 id="安装lvs的管理工具ipvsadm"><a href="#安装lvs的管理工具ipvsadm" class="headerlink" title="安装lvs的管理工具ipvsadm"></a>安装lvs的管理工具ipvsadm</h4><ul><li>安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ makepcre pcre-devel kernel-devel openssl-devel libnl-devel popt*</span><br></pre></td></tr></table></figure><ul><li>安装ipvsadm</li></ul><p>将ipvsadm-1.26.tar.gz拷贝至/usr/local/下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">tar -zxvf ipvsadm-1.26.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ipvsadm-1.26</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">或者</span><br><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure><p>校验是否安装成功：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/9.png" alt="img"></p><h4 id="真实服务器Real-Server安装"><a href="#真实服务器Real-Server安装" class="headerlink" title="真实服务器Real Server安装"></a>真实服务器Real Server安装</h4><p>在192.168.101.3和192.168.101.4上安装nginx。</p><p><strong>nginx配置文件</strong></p><p>创建nginx-lvs.conf，http内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        listen       80;</span><br><span class="line"></span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Director-Server配置"><a href="#Director-Server配置" class="headerlink" title="Director Server配置"></a>Director Server配置</h3><h4 id="在eth0上绑定虚拟ip"><a href="#在eth0上绑定虚拟ip" class="headerlink" title="在eth0上绑定虚拟ip"></a>在eth0上绑定虚拟ip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0:0 192.168.101.100 broadcast 192.168.101.100 netmask 255.255.255.255 up</span><br></pre></td></tr></table></figure><p>此处在eth0设备上绑定了一个虚拟设备eth0:0，同时设置了一个虚拟IP是<em>192.168.101.100</em>，然后指定广播地址也为<em>192.168.101.100</em>，需要特别注意的是，虚拟ip地址的广播地址是它本身，子网掩码是255.255.255.255。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/10.png" alt="img"></p><h4 id="添加路由规则"><a href="#添加路由规则" class="headerlink" title="添加路由规则"></a>添加路由规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add -host 192.168.101.100 dev eth0:0</span><br></pre></td></tr></table></figure><h4 id="启用系统的包转发功能"><a href="#启用系统的包转发功能" class="headerlink" title="启用系统的包转发功能"></a>启用系统的包转发功能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt;/proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>参数值为1时启用ip转发，为0时禁止ip转发。</p><h4 id="清除原有转发规则"><a href="#清除原有转发规则" class="headerlink" title="清除原有转发规则"></a>清除原有转发规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm --clear</span><br></pre></td></tr></table></figure><h4 id="添加虚拟IP规则"><a href="#添加虚拟IP规则" class="headerlink" title="添加虚拟IP规则"></a>添加虚拟IP规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A -t 192.168.101.100:80 -s rr</span><br></pre></td></tr></table></figure><p> -s rr表示采用轮询策略。</p><p>:80表示负载转发的端口是80</p><h4 id="在虚拟IP中添加服务规则"><a href="#在虚拟IP中添加服务规则" class="headerlink" title="在虚拟IP中添加服务规则"></a>在虚拟IP中添加服务规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -a -t 192.168.101.100:80 -r 192.168.101.3:80 -g</span><br><span class="line">ipvsadm -a -t 192.168.101.100:80 -r 192.168.101.4:80 -g</span><br></pre></td></tr></table></figure><p>在新加虚拟IP记录中添加两条新的Real Server记录，-g表示指定LVS 的工作模式为直接路由模式。</p><p>lvs进行负载转发需要保证lvs负载的端口要和nginx服务的端口的一致，这里都为80。</p><h4 id="重启lvs"><a href="#重启lvs" class="headerlink" title="重启lvs"></a>重启lvs</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/11.png" alt="img"></p><h3 id="Real-Server配置"><a href="#Real-Server配置" class="headerlink" title="Real Server配置"></a>Real Server配置</h3><p>在lvs的DR和TUn模式下，用户的访问请求到达真实服务器后，是直接返回给用户的，而不再经过前端的Director Server，因此，就需要在每个Real server节点上增加虚拟的VIP地址，这样数据才能直接返回给用户。</p><h4 id="在回环设备上绑定了一个虚拟IP地址"><a href="#在回环设备上绑定了一个虚拟IP地址" class="headerlink" title="在回环设备上绑定了一个虚拟IP地址"></a>在回环设备上绑定了一个虚拟IP地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig lo:0 192.168.101.100 broadcast 192.168.101.100 netmask 255.255.255.255 up</span><br><span class="line">/sbin/route add -host 192.168.101.100 dev lo:0</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/12.png" alt="img"></p><h4 id="关闭arp解析"><a href="#关闭arp解析" class="headerlink" title="关闭arp解析"></a>关闭arp解析</h4><p>arp_announce ：定义不同级别：当ARP请求通过某个端口进来是否利用这个接口来回应。</p><p>​         0 -利用本地的任何地址，不管配置在哪个接口上去响应ARP请求；</p><p>​         1 - 避免使用另外一个接口上的mac地址去响应ARP请求；</p><p>​         2 - 尽可能使用能够匹配到ARP请求的最佳地址。</p><p>arp_ignore：当ARP请求发过来后发现自己正是请求的地址是否响应；</p><p>​            0 - 利用本地的任何地址，不管配置在哪个接口上去响应ARP请求；</p><p>​            1 - 哪个接口上接受ARP请求，就从哪个端口上回应。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2"</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2"</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce </span><br><span class="line"></span><br><span class="line">sysctl -p <span class="comment">#使用修改生效</span></span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/13.png" alt="img"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="预期目标"><a href="#预期目标" class="headerlink" title="预期目标"></a>预期目标</h4><p>由于lvs设置为rr轮询策略，当访问虚IP <a href="http://192.168.101.100，每次刷新请求通过lvs负载到不同的服务器。" rel="noopener" target="_blank">http://192.168.101.100，每次刷新请求通过lvs负载到不同的服务器。</a></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1、测试时需要在nginx的http中设置keepalive_timeout  0; 取消使用http持久连接模式，保证每次客户端发起请求都需要向服务端建立连接，这样做是为了每次刷新页面都要经过lvs负载转发。</p><p>2、lvs进行负载转发需要保证lvs负载的端口要和nginx服务的端口的一致，这里都为80。</p><p>keepalive_timeout说明：</p><p>在nginx中keepalive_timeout的默认值是75秒，默认使用http持久连接模式，可使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，可避免建立或重新建立连接。生产环境建议keepalive_timeout不要设置为0。</p><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4><p>修改192.168.101.3和192.168.101.4下html目录中index.html的内容使之个性化。</p><p>第一次请求：<a href="http://192.168.101.100" rel="noopener" target="_blank">http://192.168.101.100</a></p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/14.png" alt="img"></p><p>刷新，相当于第二次请求：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/15.png" alt="img"></p><p>依次交替测试，发现每次请求被负载到不同的nginx上。</p><p>任意停止掉一个nginx，请求<a href="http://192.168.101.100继续可以浏览，由于lvs采用轮询策略如果其中一个nginx请求不可到达则去请求另外的nginx。" rel="noopener" target="_blank">http://192.168.101.100继续可以浏览，由于lvs采用轮询策略如果其中一个nginx请求不可到达则去请求另外的nginx。</a></p><h3 id="脚本封装"><a href="#脚本封装" class="headerlink" title="脚本封装"></a>脚本封装</h3><p>为了方便配置启动lvs将上边Director Server和Real Server的配置过程封装在shell脚本中。</p><h4 id="Director-Server配置-1"><a href="#Director-Server配置-1" class="headerlink" title="Director Server配置"></a>Director Server配置</h4><p>在/etc/init.d下创建lvsdr，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 定义虚拟ip</span></span><br><span class="line">VIP=192.168.101.100 <span class="comment">#虚拟 ip根据需求修改</span></span><br><span class="line"><span class="comment"># 定义realserver,并已空格分开，根据需求修改</span></span><br><span class="line">RIPS=<span class="string">"192.168.101.3 192.168.101.4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义提供服务的端口</span></span><br><span class="line">SERVICE=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用init.d脚本的标准库</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start LVS of DR Mode"</span></span><br><span class="line">        <span class="comment"># 开启ip转发</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">        <span class="comment"># 绑定虚拟ip</span></span><br><span class="line">        ifconfig eth0:0 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up</span><br><span class="line">        route add -host <span class="variable">$VIP</span> dev eth0:0</span><br><span class="line">        <span class="comment"># 清除lvs规则</span></span><br><span class="line">        ipvsadm -C</span><br><span class="line">        <span class="comment"># 添加一条虚拟服务器记录</span></span><br><span class="line">    <span class="comment"># -p指定一定的时间内将相同的客户端分配到同一台后端服务器</span></span><br><span class="line">    <span class="comment"># 用于解决session的问题,测试时或有别的解决方案时建议去掉</span></span><br><span class="line">        ipvsadm -A -t <span class="variable">$VIP</span>:<span class="variable">$SERVICE</span> -s rr</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加真实服务器记录</span></span><br><span class="line">        <span class="keyword">for</span> RIP <span class="keyword">in</span> <span class="variable">$RIPS</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$RIP</span>:<span class="variable">$SERVICE</span>;</span><br><span class="line">                ipvsadm -a -t <span class="variable">$VIP</span>:<span class="variable">$SERVICE</span> -r <span class="variable">$RIP</span>:<span class="variable">$SERVICE</span> -g</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="comment"># 设置tcp tcpfin  udp的超时连接值</span></span><br><span class="line">        ipvsadm --<span class="built_in">set</span> 30 120 300</span><br><span class="line">        ipvsadm</span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">        stop)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Stop LVS DR"</span></span><br><span class="line">        ifconfig eth0:0 down</span><br><span class="line">        ipvsadm -C</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> &#123;start ¦ stop&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改脚本权限：</span></span><br><span class="line">chmod +x /etc/init.d/lvsdr</span><br><span class="line"><span class="comment">#启动Director server：</span></span><br><span class="line">service lvsdr start</span><br><span class="line"><span class="comment">#停止Director server：</span></span><br><span class="line">service lvsdr stop</span><br></pre></td></tr></table></figure><h4 id="Real-Server配置-1"><a href="#Real-Server配置-1" class="headerlink" title="Real Server配置"></a>Real Server配置</h4><p>在/etc/init.d下创建lvsdr，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">VIP=192.168.101.100 <span class="comment">#虚拟ip，根据需求修改</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"lo:0 port starting"</span></span><br><span class="line">        <span class="comment"># 为了相应lvs调度器转发过来的包,需在本地lo接口上绑定vip</span></span><br><span class="line">        ifconfig lo:0 <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask 255.255.255.255 up</span><br><span class="line">        <span class="comment"># 限制arp请求</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">        ;;</span><br><span class="line">        stop)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"lo:0 port closing"</span></span><br><span class="line">        ifconfig lo:0 down</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"0"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start ¦ stop&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改脚本权限：</span></span><br><span class="line">chmod +x /etc/init.d/lvsdr</span><br><span class="line"><span class="comment">#启动real server：</span></span><br><span class="line">service lvsdr start</span><br><span class="line"><span class="comment">#停止real server：</span></span><br><span class="line">service lvsdr stop</span><br></pre></td></tr></table></figure><h2 id="lvs四层-nginx七层负载均衡"><a href="#lvs四层-nginx七层负载均衡" class="headerlink" title="lvs四层+nginx七层负载均衡"></a>lvs四层+nginx七层负载均衡</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>lvs采用DR模式基本上没有性能瓶颈，用户请求输入至lvs经过负载转发到后台服务上，通过后台服务输出响应给用户。nginx的负载性能远没有lvs好，lvs四层+nginx七层负载的好处是最前端是lvs接收请求进行负载转发，由多个nginx共同完成七层负载，这样nginx的负载性能就可以线性扩展。</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>vip：192.168.101.100</p><p>lvs-director：192.168.101.8</p><p>nginx1：192.168.101.3                              安装nginx</p><p>nginx2：192.168.101.4                              安装nginx</p><p>tomcat1：192.168.101.5                           安装tomcat</p><p>tomcat2：192.168.101.6                           安装tomcat</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="Director-Server配置-2"><a href="#Director-Server配置-2" class="headerlink" title="Director Server配置"></a>Director Server配置</h4><p>vip：192.168.101.100</p><p>lvs-director：192.168.101.8</p><p>参考lvs四层负载DR模式进行配置</p><h4 id="Real-Server配置-2"><a href="#Real-Server配置-2" class="headerlink" title="Real Server配置"></a>Real Server配置</h4><p>nginx1：192.168.101.3                              安装nginx</p><p>nginx2：192.168.101.4                              安装nginx</p><p>参考lvs四层负载DR模式进行配置，需要修改nginx的配置文件使每个nginx对两个tomcat进行负载，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">   upstream tomcat_server_pool&#123;</span><br><span class="line">        server 192.168.101.5:8080 weight=10;</span><br><span class="line">        server 192.168.101.6:8080 weight=10;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">                 proxy_pass http://tomcat_server_pool;</span><br><span class="line">                 index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>请求<a href="http://192.168.101.100，lvs负载到不同的nginx上，如果停止任意一台nginx或停止任意一台tomcat不影响访问。" rel="noopener" target="_blank">http://192.168.101.100，lvs负载到不同的nginx上，如果停止任意一台nginx或停止任意一台tomcat不影响访问。</a></p><h2 id="lvs高可用-了解"><a href="#lvs高可用-了解" class="headerlink" title="lvs高可用(了解)"></a>lvs高可用(了解)</h2><h3 id="什么是高可用"><a href="#什么是高可用" class="headerlink" title="什么是高可用"></a>什么是高可用</h3><p>lvs作为负载均衡器，所有请求都先到达lvs，可见lvs处于非常重要的位置，如果lvs服务器宕机后端web服务将无法提供服务，影响严重。</p><p>为了屏蔽负载均衡服务器的宕机，需要建立一个备份机。主服务器和备份机上都运行高可用（High Availability）监控程序，通过传送诸如“I am alive”这样的信息来监控对方的运行状况。当备份机不能在一定的时间内收到这样的信息时，它就接管主服务器的服务IP并继续提供负载均衡服务；当备份管理器又从主管理器收到“I am alive”这样的信息时，它就释放服务IP地址，这样的主服务器就开始再次提供负载均衡服务。</p><h3 id="keepalived-lvs实现主备"><a href="#keepalived-lvs实现主备" class="headerlink" title="keepalived+lvs实现主备"></a>keepalived+lvs实现主备</h3><h4 id="什么是keepalived"><a href="#什么是keepalived" class="headerlink" title="什么是keepalived"></a>什么是keepalived</h4><p>keepalived是集群管理中保证集群高可用的一个服务软件，用来防止单点故障。</p><p>Keepalived的作用是检测web服务器的状态，如果有一台web服务器死机，或工作出现故障，Keepalived将检测到，并将有故障的web服务器从系统中剔除，当web服务器工作正常后Keepalived自动将web服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的web服务器。</p><h4 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a>keepalived工作原理</h4><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。</p><p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到VRRP包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p><p>keepalived主要有三个模块，分别是core、check和VRRP。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。VRRP模块是来实现VRRP协议的。</p><h4 id="keepalived-lvs实现主备过程"><a href="#keepalived-lvs实现主备过程" class="headerlink" title="keepalived+lvs实现主备过程"></a>keepalived+lvs实现主备过程</h4><p><strong>初始状态</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/16.png" alt="img"></p><p><strong>主机宕机</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/17.png" alt="img"></p><p><strong>主机恢复</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/18.png" alt="img"> </p><h3 id="准备环境-1"><a href="#准备环境-1" class="headerlink" title="准备环境"></a>准备环境</h3><p>vip：192.168.101.100</p><p>lvs-director：192.168.101.8   主lvs</p><p>lvs-director：192.168.101.9   备lvs</p><p>nginx1：192.168.101.3                              安装nginx</p><p>nginx2：192.168.101.4                              安装nginx</p><p>tomcat1：192.168.101.5                           安装tomcat</p><p>tomcat2：192.168.101.6                           安装tomcat</p><h3 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h3><p>分别在主备lvs上安装keepalived，参考“<a href="https://www.cnblogs.com/arjenlee/p/9256068.html" rel="noopener" target="_blank">安装手册</a>”进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure><h3 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h3><h4 id="主lvs"><a href="#主lvs" class="headerlink" title="主lvs"></a>主lvs</h4><p>修改主lvs下/etc/keepalived/keepalived.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    #xxxx@itcast.com                                   # 发生故障时发送的邮箱</span><br><span class="line">   &#125;</span><br><span class="line">   #notification_email_from xxxx@itcast.com             # 使用哪个邮箱发送</span><br><span class="line">   #smtp_server xxx.com                                  # 发件服务器</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER             # 标示为主lvs</span><br><span class="line">    interface eth0           # HA检测端口</span><br><span class="line">    virtual_router_id 51     # 主备的virtual_router_id 必须相同</span><br><span class="line">    priority 100             # 优先级,备lvs要比主lvs稍小</span><br><span class="line">    advert_int 1             # VRRP Multicast 广播周期秒数</span><br><span class="line">    authentication &#123;         # 定义认证</span><br><span class="line">        auth_type PASS       # 认证方式为口令认证</span><br><span class="line">        auth_pass 1111       # 定义口令</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;      # 定义vip</span><br><span class="line">        192.168.101.100        # 多个vip可换行添加</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.101.100 80 &#123;</span><br><span class="line">    delay_loop 6       # 每隔6秒查看realserver状态</span><br><span class="line">    lb_algo wlc        # 调度算法为加权最小连接数</span><br><span class="line">    lb_kind DR         # lvs工作模式为DR(直接路由)模式</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50  # 同一IP 的连接50秒内被分配到同一台realserver(测试时建议改为0)</span><br><span class="line">    protocol TCP            # 用TCP监测realserver的状态</span><br><span class="line"></span><br><span class="line">    real_server 192.168.101.3 80 &#123;       # 定义realserver</span><br><span class="line">        weight 3                       # 定义权重</span><br><span class="line">        TCP_CHECK &#123;  # 注意TCP_CHECK和&#123;之间的空格,如果没有的话只会添加第一个realserver</span><br><span class="line">            connect_timeout 3          # 三秒无响应超时</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.101.4 80 &#123;</span><br><span class="line">        weight 3</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="备lvs"><a href="#备lvs" class="headerlink" title="备lvs"></a>备lvs</h4><p>修改备lvs下/etc/keepalived/keepalived.conf文件</p><p><strong>配置备</strong>lvs<strong>时需要注意：需要修改state**</strong>为BACKUP , priority<strong><strong>比MASTER</strong></strong>低，virtual_router_id<strong><strong>和master</strong></strong>的值一致**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    #xxxx@itcast.com                                   # 发生故障时发送的邮箱</span><br><span class="line">   &#125;</span><br><span class="line">   #notification_email_from xxxx@itcast.com             # 使用哪个邮箱发送</span><br><span class="line">   #smtp_server xxx.com                                  # 发件服务器</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP             # 标示为备lvs</span><br><span class="line">    interface eth0           # HA检测端口</span><br><span class="line">    virtual_router_id 51     # 主备的virtual_router_id 必须相同</span><br><span class="line">    priority 99              # 优先级,备lvs要比主lvs稍小</span><br><span class="line">    advert_int 1             # VRRP Multicast 广播周期秒数</span><br><span class="line">    authentication &#123;         # 定义认证</span><br><span class="line">        auth_type PASS       # 认证方式为口令认证</span><br><span class="line">        auth_pass 1111       # 定义口令</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;      # 定义vip</span><br><span class="line">        192.168.101.100        # 多个vip可换行添加</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.101.100 80 &#123;</span><br><span class="line">    delay_loop 6       # 每隔6秒查看realserver状态</span><br><span class="line">    lb_algo wlc        # 调度算法为加权最小连接数</span><br><span class="line">    lb_kind DR         # lvs工作模式为DR(直接路由)模式</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 50  # 同一IP 的连接50秒内被分配到同一台realserver(测试时建议改为0)</span><br><span class="line">    protocol TCP            # 用TCP监测realserver的状态</span><br><span class="line"></span><br><span class="line">    real_server 192.168.101.3 80 &#123;       # 定义realserver</span><br><span class="line">        weight 3                       # 定义权重</span><br><span class="line">        TCP_CHECK &#123;  # 注意TCP_CHECK和&#123;之间的空格,如果没有的话只会添加第一个realserver</span><br><span class="line">            connect_timeout 3          # 三秒无响应超时</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.101.4 80 &#123;</span><br><span class="line">        weight 3</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 80</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ul><li>director Server启动：</li></ul><p><strong>注意：使用keepalived就不用手动配置启动lvs，在主、备lvs上启动keepalived即可。</strong></p><p>主备lvs（192.168.101.8、192.168.101.9）都启动keepalived。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><ul><li>real server启动：</li></ul><p>192.168.101.3、192.168.101.4启动nginx和lvs的realserver配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">./nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx-lvs.conf</span><br></pre></td></tr></table></figure><p> 启动lvs的realserver配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service lvsdr start</span><br></pre></td></tr></table></figure><p> <strong>注意：real server的lvs配置需要使用lvsdr脚本。</strong></p><ul><li>tomcat 启动</li></ul><p>略</p><h4 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h4><p>查看主lvs的eth0设置：</p><p>vip绑定在主lvs的eth0上。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/19.png" alt="img"></p><p>查询lvs状态：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/20.png" alt="img"></p><p>查看备lvs的eth0设置：</p><p>vip没有绑定在备lvs的eth0上。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/21.png" alt="img"></p><p>访问<a href="http://192.168.101.100，可以正常负载。" rel="noopener" target="_blank">http://192.168.101.100，可以正常负载。</a></p><h4 id="主机宕机"><a href="#主机宕机" class="headerlink" title="主机宕机"></a>主机宕机</h4><p>将主lvs的keepalived停止或将主lvs关机(相当于模拟宕机)，查看主lvs的eth0：</p><p>eth0没有绑定vip</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/22.png" alt="img"> </p><p>查看备lvs的eth0：</p><p>vip已经漂移到备lvs。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/23.png" alt="img"></p><p>访问<a href="http://192.168.101.100，可以正常负载。" rel="noopener" target="_blank">http://192.168.101.100，可以正常负载。</a></p><h4 id="主机恢复"><a href="#主机恢复" class="headerlink" title="主机恢复"></a>主机恢复</h4><p>将主lvs的keepalived启动。</p><p>查看主lvs的eth0：</p><p>查看备lvs的eth0：</p><p>vip漂移到主lvs。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/24.png" alt="img"></p><p>查看备lvs的eth0：</p><p>eth0没有绑定vip</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/25.png" alt="img"></p><p>访问<a href="http://192.168.101.100，可以正常负载。" rel="noopener" target="_blank">http://192.168.101.100，可以正常负载。</a></p><h3 id="keepalived-lvs实现双主"><a href="#keepalived-lvs实现双主" class="headerlink" title="keepalived+lvs实现双主"></a>keepalived+lvs实现双主</h3><p>上边主备方案是当前只有一台lvs工作，这造成资源浪费，可以采用双主结构，让两台lvs当前都进行工作，采用dns轮询方式，当用户访问域名通过dns轮询每台lvs，双主结构需要两个vip，这两个vip要绑定域名。</p><p> 同样，在每台lvs上安装keepalived软件，当keepalived检测到其中一个lvs宕机则将宕机的vip漂移到活动lvs上，当lvs恢复则vip又重新漂移回来。</p><h4 id="初始状态-1"><a href="#初始状态-1" class="headerlink" title="初始状态"></a>初始状态</h4><p>每台lvs绑定一个vip，共两个vip，DNS设置域名对应这两个vip，通过DNS轮询每次解析到不同的vip上即解析到不同的lvs上。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/26.png" alt="img"></p><h4 id="其中一个主机宕机"><a href="#其中一个主机宕机" class="headerlink" title="其中一个主机宕机"></a>其中一个主机宕机</h4><p>其中一个主机宕机，每台lvs上安装的keepalived程序会检测到对方宕机，将宕机一方的vip漂移至活动的lvs服务器上，这样DNS轮询全部到一台lvs继续对外提供服务。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/27.png" alt="img"></p><h4 id="主机恢复-1"><a href="#主机恢复-1" class="headerlink" title="主机恢复"></a>主机恢复</h4><p>当主机恢复又回到初始状态，每个vip绑定在不同的lvs上。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/28.png" alt="img"></p><h2 id="lvs扩展的思考"><a href="#lvs扩展的思考" class="headerlink" title="lvs扩展的思考"></a>lvs扩展的思考</h2><p>前端使用1到2台lvs作为负载基本可以满足中小型网站的并发要求，当lvs的负载成为瓶颈此时就需要对lvs进行优化、扩展。</p><ul><li><strong>方案1：LVS-ospf集群</strong></li></ul><p>​         OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system,AS）内决策路由。</p><p>LVS（DR）通过ospfd，做lvs集群，实现一个VIP，多台LVS同时工作提供服务，这种方案需要依赖三层交换机设备实现。</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/29.png" alt="img"> </p><p>用户请求（VIP：42.xx.xx.100）到达三层交换机之后，通过对原地址、端口和目的地址、端口的hash，将链接分配到集群中的某一台LVS上，LVS通过内网（10.101.10.x）向后端转发请求，后端再将数据返回给用户。</p><p>LVS-ospf集群模式的最大优势就在于：</p><p>1.LVS调度机自由伸缩，横向线性扩展（最大8台，受限于三层设备允许的等价路由数目maximum load-balancing）；</p><p>2.LVS机器同时工作，不存在备机，提高利用率；</p><p>3.做到了真正的高可用，某台LVS机器宕机后，不会影响服务</p><ul><li><strong>方案2：DNS轮询</strong></li></ul><p>上面讲的是一组双主结构，可以采用多组双主结构达到横向扩展lvs的目的，此方案需要每台lvs都绑定一个vip（公网ip），DNS设置域名轮询多个vip，如下图：</p><p> <img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/17e1663a/30.png" alt="img"></p><ul><li><strong>方案3：使用硬件负载均衡设置</strong> </li></ul><p>​         如果资金允许可以购买硬件设置来完成负载均衡，性能不错的有F5、Array等都可以满足超高并发的要求。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过本文掌握什么是负载均衡及负载均衡的作用和意义；了解lvs负载均衡的三种模式；了解lvs-DR负载均衡部署方法；掌握nginx实现负载均衡的方法；掌握lvs+nginx负载均衡拓扑结构。&lt;/p&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://wandouduoduo.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Lvs" scheme="https://wandouduoduo.github.io/tags/Lvs/"/>
    
  </entry>
  
  <entry>
    <title>k8s网络flannel和calico网络模式对比</title>
    <link href="https://wandouduoduo.github.io/articles/8b98d1d.html"/>
    <id>https://wandouduoduo.github.io/articles/8b98d1d.html</id>
    <published>2021-04-12T03:40:08.000Z</published>
    <updated>2021-04-20T07:31:14.800Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Kubernetes跨主机容器之间的通信组件，目前主流的是flannel和calico，本文对两个组件进行简单介绍和对比。</p><a id="more"></a><h2 id="Flannel-架构"><a href="#Flannel-架构" class="headerlink" title="Flannel 架构"></a>Flannel 架构</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/2.png" alt="img"></p><p>由CoreOS开发的项目Flannel，可能是最直接和最受欢迎的CNI插件。它是容器编排系统中最成熟的网络结构示例之一，旨在实现更好的容器间和主机间网络。随着CNI概念的兴起，Flannel CNI插件算是早期的入门。</p><p>与其他方案相比，Flannel相对容易安装和配置。它被打包为单个二进制文件FlannelD，许多常见的Kubernetes集群部署工具和许多Kubernetes发行版都可以默认安装Flannel。Flannel可以使用Kubernetes集群的现有etcd集群来使用API存储其状态信息，因此不需要专用的数据存储。</p><p>Flannel配置第3层IPv4 Overlay网络。它会创建一个大型内部网络，跨越集群中每个节点。在此Overlay网络中，每个节点都有一个子网，用于在内部分配IP地址。在配置Pod时，每个节点上的Docker桥接口都会为每个新容器分配一个地址。同一主机中的Pod可以使用Docker桥接进行通信，而不同主机上的pod会使用flanneld将其流量封装在UDP数据包中，以便路由到适当的目标。</p><p>Flannel有几种不同类型的后端可用于封装和路由。默认和推荐的方法是使用VXLAN，因为VXLAN性能更良好并且需要的手动干预更少。</p><h2 id="Calico-架构"><a href="#Calico-架构" class="headerlink" title="Calico 架构"></a><strong>Calico 架构</strong></h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/1.jpg" alt></p><p>calico包括如下重要组件：Felix，etcd，BGP Client，BGP Route Reflector。下面分别说明一下这些组件。</p><p>Felix：主要负责路由配置以及ACLS规则的配置以及下发，它存在在每个node节点上。</p><p>etcd：分布式键值存储，主要负责网络元数据一致性，确保Calico网络状态的准确性，可以与kubernetes共用；</p><p>BGPClient(BIRD), 主要负责把 Felix写入 kernel的路由信息分发到当前 Calico网络，确保 workload间的通信的有效性；</p><p>BGPRoute Reflector(BIRD), 大规模部署时使用，摒弃所有节点互联的mesh模式，通过一个或者多个 BGPRoute Reflector 来完成集中式的路由分发；</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/3.png" alt="img"></p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>如下图所示，描述了从源容器经过源宿主机，经过数据中心的路由，然后到达目的宿主机最后分配到目的容器的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/4.png" alt="img"></p><h3 id="跨主机通信"><a href="#跨主机通信" class="headerlink" title="跨主机通信"></a>跨主机通信</h3><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/6.jpg" alt></p><p><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/7.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上述的原理可以看出，flannel在进行路由转发的基础上进行了封包解包的操作，这样浪费了CPU的计算资源。下图是从网上找到的各个开源网络组件的性能对比。可以看出无论是带宽还是网络延迟，calico和主机的性能是差不多的。<br><img src="https://cdn.jsdelivr.net/gh/wandouduoduo/wandouduoduo.github.io@master/articles/8b98d1d/5.png" alt="img">  </p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes跨主机容器之间的通信组件，目前主流的是flannel和calico，本文对两个组件进行简单介绍和对比。&lt;/p&gt;
    
    </summary>
    
      <category term="容器编排" scheme="https://wandouduoduo.github.io/categories/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
      <category term="K8s" scheme="https://wandouduoduo.github.io/categories/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/K8s/"/>
    
    
      <category term="K8s" scheme="https://wandouduoduo.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Docker快速安装jumperserver</title>
    <link href="https://wandouduoduo.github.io/articles/4c63da33.html"/>
    <id>https://wandouduoduo.github.io/articles/4c63da33.html</id>
    <published>2021-04-09T03:57:50.000Z</published>
    <updated>2021-04-09T05:51:39.892Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Jumpserver堡垒机的作用和好处这里就不再赘述，本文教你快速用docker容器安装jumperserver，让你快速体验。本教程是在单机上操作，处于以后扩展的需求，强烈建议在多台服务器上搭建。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">yum -y install wget</span><br><span class="line">wget https://github.com/jumpserver/installer/releases/download/v2.8.2/jumpserver-installer-v2.8.2.tar.gz</span><br><span class="line">tar -xf jumpserver-installer-v2.8.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> jumpserver-installer-v2.8.2</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim config-example.txt</span><br><span class="line">所有配置都在此文件中，按照实际情况填写信息即可。</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">./jmsctl.sh install</span><br><span class="line"></span><br><span class="line">       ██╗██╗   ██╗███╗   ███╗██████╗ ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗</span><br><span class="line">       ██║██║   ██║████╗ ████║██╔══██╗██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗</span><br><span class="line">       ██║██║   ██║██╔████╔██║██████╔╝███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝</span><br><span class="line">  ██   ██║██║   ██║██║╚██╔╝██║██╔═══╝ ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗</span><br><span class="line">  ╚█████╔╝╚██████╔╝██║ ╚═╝ ██║██║     ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║</span><br><span class="line">   ╚════╝  ╚═════╝ ╚═╝    ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝</span><br><span class="line"></span><br><span class="line">                                                             Version:  v2.8.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 安装配置 Docker</span><br><span class="line">1. 安装 Docker</span><br><span class="line">开始下载 Docker 程序 ...</span><br><span class="line">完成</span><br><span class="line">开始下载 Docker Compose 程序 ...</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">2. 配置 Docker</span><br><span class="line">是否需要自定义 Docker 数据目录, 默认将使用 /var/lib/docker 目录? (y/n)  (默认为 n): n</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">3. 启动 Docker</span><br><span class="line">Docker 版本发生改变 或 Docker 配置文件发生变化，是否要重启? (y/n)  (默认为 y): y</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 加载 Docker 镜像</span><br><span class="line">Docker: Pulling from jumpserver/core:v2.8.2         [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/koko:v2.8.2         [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/luna:v2.8.2         [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/nginx:alpine2       [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/redis:6-alpine      [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/lina:v2.8.2         [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/mysql:5             [ OK ]</span><br><span class="line">Docker: Pulling from jumpserver/guacamole:v2.8.2    [ OK ]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 安装配置 JumpServer</span><br><span class="line">1. 检查配置文件</span><br><span class="line">配置文件位置: /opt/jumpserver/config</span><br><span class="line">/opt/jumpserver/config/config.txt                 [ √ ]</span><br><span class="line">/opt/jumpserver/config/nginx/lb_http_server.conf  [ √ ]</span><br><span class="line">/opt/jumpserver/config/nginx/lb_ssh_server.conf   [ √ ]</span><br><span class="line">/opt/jumpserver/config/core/config.yml   [ √ ]</span><br><span class="line">/opt/jumpserver/config/koko/config.yml   [ √ ]</span><br><span class="line">/opt/jumpserver/config/mysql/my.cnf      [ √ ]</span><br><span class="line">/opt/jumpserver/config/redis/redis.conf  [ √ ]</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">2. 配置 Nginx</span><br><span class="line">配置文件位置:: /opt/jumpserver/config/nginx/cert</span><br><span class="line">/opt/jumpserver/config/nginx/cert/server.crt  [ √ ]</span><br><span class="line">/opt/jumpserver/config/nginx/cert/server.key  [ √ ]</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">3. 备份配置文件</span><br><span class="line">备份至 /opt/jumpserver/config/backup/config.txt.2021-03-19_08-01-51</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">4. 配置网络</span><br><span class="line">是否需要支持 IPv6? (y/n)  (默认为 n): n</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">5. 配置加密密钥</span><br><span class="line">SECRETE_KEY:     ICAgIGluZXQ2IDI0MDk6OGE0ZDpjMjg6ZjkwMTo6ZDRjLzEyO</span><br><span class="line">BOOTSTRAP_TOKEN: ICAgIGluZXQ2IDI0</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">6. 配置持久化目录</span><br><span class="line">是否需要自定义持久化存储, 默认将使用目录 /opt/jumpserver? (y/n)  (默认为 n): n</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line">7. 配置 MySQL</span><br><span class="line">是否使用外部mysql (y/n)  (默认为n): n</span><br><span class="line"></span><br><span class="line">8. 配置 Redis</span><br><span class="line">是否使用外部redis  (y/n)  (默认为n): n</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 安装完成了</span><br><span class="line">1. 可以使用如下命令启动, 然后访问</span><br><span class="line">./jmsctl.sh start</span><br><span class="line"></span><br><span class="line">2. 其它一些管理命令</span><br><span class="line">./jmsctl.sh stop</span><br><span class="line">./jmsctl.sh restart</span><br><span class="line">./jmsctl.sh backup</span><br><span class="line">./jmsctl.sh upgrade</span><br><span class="line">更多还有一些命令, 你可以 ./jmsctl.sh --<span class="built_in">help</span> 来了解</span><br><span class="line"></span><br><span class="line">3. Web 访问</span><br><span class="line">http://192.168.100.248:8080</span><br><span class="line">https://192.168.100.248:8443</span><br><span class="line">默认用户: admin  默认密码: admin</span><br><span class="line"></span><br><span class="line">4. SSH/SFTP 访问</span><br><span class="line">ssh admin@192.168.100.248 -p2222</span><br><span class="line">sftp -P2222 admin@192.168.100.248</span><br><span class="line"></span><br><span class="line">5. 更多信息</span><br><span class="line">我们的官网: https://www.jumpserver.org/</span><br><span class="line">我们的文档: https://docs.jumpserver.org/</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "19128-1606361858239-837",        "name": "运维随笔",        "qrcode": "https://wandouduoduo.github.io/about/index/gongzhonghao.jpg",        "keyword": "yunwei"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jumpserver堡垒机的作用和好处这里就不再赘述，本文教你快速用docker容器安装jumperserver，让你快速体验。本教程是在单机上操作，处于以后扩展的需求，强烈建议在多台服务器上搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="容器技术" scheme="https://wandouduoduo.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Docker" scheme="https://wandouduoduo.github.io/tags/Docker/"/>
    
      <category term="Jumperserver" scheme="https://wandouduoduo.github.io/tags/Jumperserver/"/>
    
  </entry>
  
</feed>
