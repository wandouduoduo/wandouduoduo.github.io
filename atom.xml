<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豌豆多多</title>
  
  <subtitle>Deveops Study Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wandouduoduo.netlify.com/"/>
  <updated>2019-09-20T12:03:47.198Z</updated>
  <id>https://wandouduoduo.netlify.com/</id>
  
  <author>
    <name>WanDouDuoDuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx中https的配置和http强制跳转</title>
    <link href="https://wandouduoduo.netlify.com/articles/ebb4cd52.html"/>
    <id>https://wandouduoduo.netlify.com/articles/ebb4cd52.html</id>
    <published>2019-09-20T11:11:13.000Z</published>
    <updated>2019-09-20T12:03:47.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着现在网络互联网的告诉发展，给人们带来的很多便利，但也出现了很多隐患。作为站长，网站的安全至关重要。怎么做才安全呢？建议把http改为https，因为增加了证书认证，相对来说就会安全很多，并且对用户的体验也比较好，谁也不想访问个网站，在地址栏中显示不安全或直接显示不安全等。</p><p><img src="nginx%E4%B8%ADhttps%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8Chttp%E5%BC%BA%E5%88%B6%E8%B7%B3%E8%BD%AC/1.png" alt></p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>centos7</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>1，nginx有安装ssl模块，这样才可以使用证书。<a href="https://wandouduoduo.github.io/articles/88000f44.html" target="_blank" rel="noopener">参考文档</a></p><p>2，购买或申请获取的证书文件。</p><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><h4 id="放置证书"><a href="#放置证书" class="headerlink" title="放置证书"></a>放置证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf/ssl</span><br><span class="line">cp 证书.zip /usr/local/nginx/conf/ssl/</span><br><span class="line">cd /usr/local/nginx/conf/ssl/</span><br><span class="line">unzip 证书.zip</span><br></pre></td></tr></table></figure><h4 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line"></span><br><span class="line">    server_name wandouduoduo.com;</span><br><span class="line">    root /opt/www/webapps/;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">include block.conf;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache shared:SSL:100m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    ssl_certificate     ssl/证书.pem;</span><br><span class="line">    ssl_certificate_key ssl/证书.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置强制跳转"><a href="#配置强制跳转" class="headerlink" title="配置强制跳转"></a>配置强制跳转</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    server_name xxxxx;</span><br><span class="line">    rewrite ^(.*) https://<span class="variable">$server_name</span><span class="variable">$1</span> permanent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上述配置就可实现https，并让http强制跳转到https。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>nginx防SQL注入与文件注入等相关安全设置</p><p>可以把下面内容写个配置文件block.conf，在server块中include。如上面配置教程中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁止sql注入</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~* <span class="string">".*[\;\'\&lt;\&gt;].*"</span> )&#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">"(cost\()|(concat\()"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">"[+|(%20)]union[+|(%20)]"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">"[+|(%20)]and[+|(%20)]"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">"[+|(%20)]select[+|(%20)]"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"(&lt;|%3C).*script.*(&gt;|%3E)"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"GLOBALS(=|[|%[0-9A-Z]&#123;0,2&#125;)"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"_REQUEST(=|[|%[0-9A-Z]&#123;0,2&#125;)"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"proc/self/environ"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"mosConfig_[a-zA-Z_]&#123;1,21&#125;(=|%3D)"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"base64_(en|de)code(.*)"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"select"</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#禁止文件注入 </span></span><br><span class="line"><span class="comment">## Block file injections</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_file_injections</span> 0;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"[a-zA-Z0-9_]=(\.\.//?)+"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_file_injections</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"[a-zA-Z0-9_]=/([a-z0-9_.]//?)+"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_file_injections</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$block_file_injections</span> = 1) &#123;</span><br><span class="line">    <span class="built_in">return</span> 444;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 禁掉溢出攻击</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 0;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"(&lt;|%3C).*script.*(&gt;|%3E)"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"GLOBALS(=|[|%[0-9A-Z]&#123;0,2&#125;)"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"_REQUEST(=|[|%[0-9A-Z]&#123;0,2&#125;)"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"proc/self/environ"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"mosConfig_[a-zA-Z_]&#123;1,21&#125;(=|%3D)"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"base64_(en|de)code(.*)"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_common_exploits</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$block_common_exploits</span> = 1) &#123;</span><br><span class="line">    <span class="built_in">return</span> 444;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 禁spam字段</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_spam</span> 0;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)b"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_spam</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"b(erections|hoodia|huronriveracres|impotence|levitra|libido)b"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_spam</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"b(ambien|bluespill|cialis|cocaine|ejaculation|erectile)b"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_spam</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$query_string</span> ~ <span class="string">"b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)b"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_spam</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$block_spam</span> = 1) &#123;</span><br><span class="line">    <span class="built_in">return</span> 444;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 禁掉user-agents</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 0;</span><br><span class="line"><span class="comment"># Don’t disable wget if you need it to run cron jobs!</span></span><br><span class="line"><span class="comment">#if ($http_user_agent ~ "Wget") &#123;</span></span><br><span class="line"><span class="comment"># set $block_user_agents 1;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment"># Disable Akeeba Remote Control 2.5 and earlier</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Indy Library"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Common bandwidth hoggers and hacking tools.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"libwww-perl"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"GetRight"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"GetWeb!"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Go!Zilla"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Download Demon"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Go-Ahead-Got-It"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"TurnitinBot"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"GrabNet"</span>) &#123;</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"WebBench"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"ApacheBench"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ ^$) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"Python-urllib"</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$block_user_agents</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$block_user_agents</span> = 1) &#123;</span><br><span class="line"><span class="built_in">return</span> 444;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着现在网络互联网的告诉发展，给人们带来的很多便利，但也出现了很多隐患。作为站长，网站的安全至关重要。怎么做才安全呢？建议把http改为https，因为增加了证书认证，相对来说就会安全很多，并且对用户的体验也比较好，谁也不想访问个网站，在地址栏中显示不安全或直接显示不安全等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;nginx%E4%B8%ADhttps%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8Chttp%E5%BC%BA%E5%88%B6%E8%B7%B3%E8%BD%AC/1.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.netlify.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx升级或重新加载模块</title>
    <link href="https://wandouduoduo.netlify.com/articles/88000f44.html"/>
    <id>https://wandouduoduo.netlify.com/articles/88000f44.html</id>
    <published>2019-09-20T10:34:08.000Z</published>
    <updated>2019-09-20T11:38:51.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在日常运维工作中，有几个场景：</p><p>1，nginx  web服务升级 。</p><p>2，https证书配置后，发现nginx编译没有加入ssl模块。</p><p>3，nginx配置后，有<code>nginx: [emerg] the &quot;xxx&quot; parameter requires</code>等等报错。</p><p>这些都需要重新编译nginx程序，并把需要的模块加载进去，但是对于不熟悉nginx的人，又头疼和担心，需要重新编译，会不会对原来有啥影响等等。本文就是针对这些场景给出解决方案。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>centos7</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先，需要说明的是nginx因为其开放性而广受欢迎，其中开放性就是：松耦合，需要啥模块，重新加载编译后替换就可以了，所以完全不需要担心。</p><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="查看nginx原有模块"><a href="#查看nginx原有模块" class="headerlink" title="查看nginx原有模块"></a>查看nginx原有模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><img src="/articles/88000f44/1.png" alt></p><p>可以看到没有加载模块</p><h4 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到源码包</span></span><br><span class="line"><span class="built_in">cd</span> /opt/packages/sunscripts/install/packages/nginx-1.16.0</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx  --with-http_ssl_module  --with-http_stub_status_module  --with-http_gzip_static_module</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line">注意：这里不要进行make install，否则就是覆盖安装</span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 停nginx</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">cp ./objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"><span class="comment"># 检查验证</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img src="/articles/88000f44/2.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按照上面的方案，按照自己需求加载模块，定制自己的nginx。</p><h2 id="一键安装nginx脚本"><a href="#一键安装nginx脚本" class="headerlink" title="一键安装nginx脚本"></a>一键安装nginx脚本</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;在日常运维工作中，有几个场景：&lt;/p&gt;
&lt;p&gt;1，nginx  web服务升级 。&lt;/p&gt;
&lt;p&gt;2，https证书配置后，发现nginx编译没有加入ssl模块。&lt;/p&gt;
&lt;p&gt;3，nginx配置后，有&lt;code&gt;nginx: [emerg] the &amp;quot;xxx&amp;quot; parameter requires&lt;/code&gt;等等报错。&lt;/p&gt;
&lt;p&gt;这些都需要重新编译nginx程序，并把需要的模块加载进去，但是对于不熟悉nginx的人，又头疼和担心，需要重新编译，会不会对原来有啥影响等等。本文就是针对这些场景给出解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Nginx" scheme="https://wandouduoduo.netlify.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>centos7下使用yum源安装mysql5.7</title>
    <link href="https://wandouduoduo.netlify.com/articles/5449f5b8.html"/>
    <id>https://wandouduoduo.netlify.com/articles/5449f5b8.html</id>
    <published>2019-09-17T09:21:05.000Z</published>
    <updated>2019-09-17T09:43:59.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>现在centos上默认是没有yum源的，yum安装的是 MariaDB。本文详细介绍了centos7下使用yum源安装mysql5.7。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：centos7</p><a id="more"></a><h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><h4 id="下载yum源："><a href="#下载yum源：" class="headerlink" title="下载yum源："></a>下载yum源：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br></pre></td></tr></table></figure><p><img src="/articles/5449f5b8/1.png" alt></p><h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="/articles/5449f5b8/2.png" alt></p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="/articles/5449f5b8/3.png" alt></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动mysql,要知道在centos7中，没有了service命令，都是使用systemctl命令。注意启动的时候是start mysqld而不是mysql。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="/articles/5449f5b8/4.png" alt></p><p>如图所示，是已经启动了</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="修改数据库密码"><a href="#修改数据库密码" class="headerlink" title="修改数据库密码"></a>修改数据库密码</h4><p>mysql5.7的新特性之一就是在初始化的时候会生成一个自定义的密码，然后你需要找到这个密码，登录的时候输入。注意，输入密码的时候是不显示。</p><p>找到密码: 红框的地方就是密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/articles/5449f5b8/5.png" alt></p><p><strong>登录数据库：这里-p之后不用输入密码，回车后再输入。改过密码之后登录则是直接在-p后加密码了。</strong></p><p><strong>修改密码</strong></p><p>注意，修改的密码太简单会不给修改，把大小写字母和数字加上就肯定可以了。然后切记切记，mysql里面的命令要加分号！分号！分号！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&apos;Sun123$%^&apos;);</span><br></pre></td></tr></table></figure><p><strong>设置远程可以登录</strong></p><p>现在这样是无法在本地用工具登录访问的，现在要做两件事，一件事是将云服务器上的3306端口开放；另一件事是配置远程可以访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;Admin123!&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>先设置刚才的密码可以远程登录，然后使用flush命令使配置立即生效。<br>如果还不行可以尝试重启一下数据库。</p><p><img src="/articles/5449f5b8/6.png" alt></p><h4 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h4><p>mysql的配置文件真的很多，有的还很蛋疼。比如默认的字符集是拉丁字符集，每次创建数据库的时候要设置字符集；默认还不支持group by语句，默认的时区也不是我们现在的北京时间(东八区)，会导致我们的时间差了13个点。针对以上说几个简要的配置，更多的配置在以后遇到了再加上，或者留言吧！</p><p>打开配置文件，yum安装的默认在/etc文件夹下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在[mysqld]下面添加，不需要分号</span></span><br><span class="line"><span class="comment">#字符集:注意是utf8而不是utf-8!</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="comment">#这时候使用show variables like 'char%';就可以查看到字符集都是utf8了</span></span><br><span class="line"><span class="comment">#sql支持group by语句</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="comment">#设置时区为东八区</span></span><br><span class="line">default-time_zone = <span class="string">'+8:00'</span></span><br></pre></td></tr></table></figure><p>最后重启数据库，使配置生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a><strong>设置开机启动</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>安装记录就到这里，更多的配置在遇到后继续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;现在centos上默认是没有yum源的，yum安装的是 MariaDB。本文详细介绍了centos7下使用yum源安装mysql5.7。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;系统：centos7&lt;/p&gt;
    
    </summary>
    
      <category term="数据库运维" scheme="https://wandouduoduo.netlify.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Mysql" scheme="https://wandouduoduo.netlify.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker安装redmine服务</title>
    <link href="https://wandouduoduo.netlify.com/articles/40baf0f.html"/>
    <id>https://wandouduoduo.netlify.com/articles/40baf0f.html</id>
    <published>2019-09-05T05:38:52.000Z</published>
    <updated>2019-09-05T11:02:44.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>快速搭建redmine服务，以便能够对项目和工作流进行管控。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://hub.docker.com/_/redmine" target="_blank" rel="noopener">官方文档</a>或者<a href="https://docs.docker.com/samples/library/redmine/" target="_blank" rel="noopener">docker官方</a></p><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="用SQLite3运行Redmine"><a href="#用SQLite3运行Redmine" class="headerlink" title="用SQLite3运行Redmine"></a>用SQLite3运行Redmine</h4><p>这是最简单的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sunredmine redmine:3.4</span><br></pre></td></tr></table></figure><h4 id="使用数据库容器运行Redmine"><a href="#使用数据库容器运行Redmine" class="headerlink" title="使用数据库容器运行Redmine"></a>使用数据库容器运行Redmine</h4><p>建议使用数据库服务器运行Redmine。</p><p>1, 启动数据库容器</p><p>PostgreSQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-postgres --network some-network -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=redmine postgres</span><br></pre></td></tr></table></figure><p>MySQL的（替代<code>-e REDMINE_DB_POSTGRES=some-postgres</code>与<code>-e REDMINE_DB_MYSQL=some-mysql</code>运行管理平台时）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-mysql --network some-network -e MYSQL_USER=redmine -e MYSQL_PASSWORD=secret -e MYSQL_DATABASE=redmine -e MYSQL_RANDOM_ROOT_PASSWORD=1 mysql:5.7</span><br></pre></td></tr></table></figure><p>2, 运行redmine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-redmine --network some-network -e REDMINE_DB_POSTGRES=some-postgres -e REDMINE_DB_USERNAME=redmine -e REDMINE_DB_PASSWORD=secret redmine</span><br></pre></td></tr></table></figure><h2 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h2><p>假设已有postgres数据库容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run --name pgsql -p 5432:5432 -e POSTGRES_PASSWORD=sunxu123 -v /data/postgres:/var/lib/postgresql/data -d postgres:9.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器后操作</span></span><br><span class="line">docker <span class="built_in">exec</span> -it pgsql /bin/bash</span><br><span class="line"><span class="comment"># 进Postgresql账号</span></span><br><span class="line">su postgres</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CREATE USER redmine WITH PASSWORD <span class="string">'Sun123'</span>;</span><br><span class="line"><span class="comment"># 建库</span></span><br><span class="line">createdb -O redmine redmine 和 CREATE DATABASE redmine OWNER redmine等效,二选一即可</span><br><span class="line"><span class="comment"># 赋权</span></span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE redmine to redmine;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redmine</span></span><br><span class="line">docker run  --name redmine -p 10083:3000 -v /data/redmine/data:/usr/src/redmine/files --link pgsql:remine -d redmine:3.4</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs -f remine</span><br></pre></td></tr></table></figure><h2 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h2><h4 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker redmine:/usr/src/redmine/config/configuration.yml.example  ./</span><br><span class="line">mv configuration.yml.example configuration.yml</span><br><span class="line">vim configuration.yml</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">  email_delivery:</span><br><span class="line">    delivery_method: :smtp</span><br><span class="line">    smtp_settings:</span><br><span class="line">      enable_starttls_auto: <span class="literal">true</span></span><br><span class="line">      address: <span class="string">"xxxxxxxxxxx"</span></span><br><span class="line">      port: 587</span><br><span class="line">      authentication: :login</span><br><span class="line">      domain: <span class="string">'xxxxxxxxxxxxxx'</span></span><br><span class="line">      user_name: <span class="string">'xxxxxxxxxxxxx'</span></span><br><span class="line">      password: <span class="string">'xxxxxxxxxxxx'</span></span><br></pre></td></tr></table></figure><p><img src="/articles/40baf0f/1.png" alt></p><p><strong>测试是否配置成功：</strong><br>打开Redmine &gt;管理员登陆 &gt; 管理 &gt; 配置 &gt; 邮件通知 &gt;页面底部:发送测试邮件。将会发送邮件到你目前登陆的用户邮箱中。</p><p>如果没有配置成功，则这个选项卡显示的是黄色的字，如未对邮件进行配置，config/configuration.yml。</p><h4 id="ldap接入和用户同步"><a href="#ldap接入和用户同步" class="headerlink" title="ldap接入和用户同步"></a>ldap接入和用户同步</h4><p>原始的ldap认证，我试了下不完美，他需要创建用户然后使用ldap认证，也就是说还是需要先去创建用户。这样显得很麻烦</p><p><img src="/articles/40baf0f/2.png" alt></p><p>Base dn是基准DN</p><p>LDAP过滤器是用来过滤你需要加入到redmine里的用户，我这里是用对象类即objectclass去filter用户</p><p>认证模式改以下就好。</p><p>但是这样还是创建用户 还是麻烦 这个时候需要用到ldap的插件（Redmine LDAP Sync）</p><p>插件安装基本官网都有说</p><p>git：<a href="https://github.com/thorin/redmine_ldap_sync#rake-tasks" target="_blank" rel="noopener">https://github.com/thorin/redmine_ldap_sync#rake-tasks</a></p><p>里面有介绍我这里就不说了，大致上就两步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">因为这个插件好多年不再维护了只能支持redmine3.4.x最新的redmine4.0.x不支持，会报错，这也是为什么docker启动时用3.4版本的原因</span><br><span class="line"></span><br><span class="line">1，在#&#123;RAILS_ROOT&#125;/plugins目录下下载插件</span><br><span class="line">git clone git://github.com/thorin/redmine_ldap_sync.git</span><br><span class="line">2，在#&#123;RAILS_ROOT&#125; 目录下执行</span><br><span class="line">rake -T redmine:plugins:ldap_sync RAILS_ENV=production</span><br></pre></td></tr></table></figure><p><img src="/articles/40baf0f/4.png" alt></p><p>插件安装好之后重启redmine也就是nginx</p><p>然后打开web发现会多一个ldap sync<br><img src="/articles/40baf0f/5.png" alt></p><p>填写好测试完成看看结果</p><p><img src="/articles/40baf0f/6.png" alt></p><p><img src="/articles/40baf0f/7.png" alt></p><p><img src="/articles/40baf0f/8.png" alt></p><p>配置项根据自己的环境设置，设置好之后点击第三栏菜单test是否可以取出成功，</p><p>可以的话就直接激活这个ldap sync</p><p>之后直接去登录就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;快速搭建redmine服务，以便能够对项目和工作流进行管控。&lt;/p&gt;
&lt;h2 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/redmine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;或者&lt;a href=&quot;https://docs.docker.com/samples/library/redmine/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker官方&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="https://wandouduoduo.netlify.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>docker构建自己的openldap自助密码服务</title>
    <link href="https://wandouduoduo.netlify.com/articles/d83ca733.html"/>
    <id>https://wandouduoduo.netlify.com/articles/d83ca733.html</id>
    <published>2019-09-03T07:17:12.000Z</published>
    <updated>2019-09-03T10:09:07.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>OpenLDAP安装完毕后，如果用户要修改密码的话，就需要通过OpenLDAP管理员来进行修改。为了解放管理员的工作，让OpenLDAP用户可以自行进行密码的修改和重置，就需要我们来搭建一套自助修改密码系统。</p><p>在此我们使用的是开源的基于php语言开发的ldap自助修改密码系统Self Service Password。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://github.com/wandouduoduo/docker-ssp" target="_blank" rel="noopener">参考文档</a></p><a id="more"></a><p>按照参考文档正确配置并构建镜像，运行后，登录网页访问，通过网页修改账号密码验证</p><p><img src="/articles/d83ca733/1.png" alt></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果遇到以下错误：</p><p><img src="/articles/d83ca733/2.png" alt></p><p>修改配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$keyphrase = &quot;secret&quot;;  改为  $keyphrase = &quot;sunxu&quot;; #任意字符串</span><br></pre></td></tr></table></figure><p>重启容器，再次访问。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>邮件重置密码：</p><p><img src="/articles/d83ca733/3.png" alt></p><p>查看邮件</p><p><img src="/articles/d83ca733/4.png" alt></p><p>修改完成会收到一条邮件：</p><p><img src="/articles/d83ca733/5.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;OpenLDAP安装完毕后，如果用户要修改密码的话，就需要通过OpenLDAP管理员来进行修改。为了解放管理员的工作，让OpenLDAP用户可以自行进行密码的修改和重置，就需要我们来搭建一套自助修改密码系统。&lt;/p&gt;
&lt;p&gt;在此我们使用的是开源的基于php语言开发的ldap自助修改密码系统Self Service Password。&lt;/p&gt;
&lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wandouduoduo/docker-ssp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>confluence6.3.1升级最新版本6.15.8</title>
    <link href="https://wandouduoduo.netlify.com/articles/4afcf658.html"/>
    <id>https://wandouduoduo.netlify.com/articles/4afcf658.html</id>
    <published>2019-09-02T04:00:40.000Z</published>
    <updated>2019-09-06T10:12:19.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>收到公司总部安全部门扫描测试，查出公司内部confluence的版本太低，存在安全漏洞。给出的解决方案是升级到最新版本，最新版本已经把该漏洞修复。本文就详细介绍下confluence的升级过程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cwiki.us/display/CONFLUENCEWIKI/Upgrading+Confluence" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h2><h3 id="备份你的数据"><a href="#备份你的数据" class="headerlink" title="备份你的数据"></a>备份你的数据</h3><h4 id="官方备份方法"><a href="#官方备份方法" class="headerlink" title="官方备份方法"></a>官方备份方法</h4><p>点击一般设置的，点击备份和还原</p><p><img src="/articles/4afcf658/1.png" alt></p><h3 id="自行备份"><a href="#自行备份" class="headerlink" title="自行备份"></a>自行备份</h3><p>1，备份数据源。默认路径为：/var/atlassian/application-data/confluence/confluence.cfg.xml</p><p>2，备份附件。默认路径为：/var/atlassian/application-data/confluence/attachments</p><h2 id="安装部署最新版"><a href="#安装部署最新版" class="headerlink" title="安装部署最新版"></a>安装部署最新版</h2><h4 id="破解文件备份"><a href="#破解文件备份" class="headerlink" title="破解文件备份"></a>破解文件备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar ~/atlassian-extras-2.4.jar</span><br></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://www.atlassian.com/software/confluence/download" target="_blank" rel="noopener">官网下载地址</a>，放在/opt</p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x atlassian-confluence-6.15.1-x64.bin   <span class="comment">#赋予可执行权限</span></span><br><span class="line">./atlassian-confluence-6.15.1-x64.bin  <span class="comment">#执行安装</span></span><br></pre></td></tr></table></figure><p>到了红圈这步选择3，回车。表示升级</p><p><img src="/articles/4afcf658/2.png" alt></p><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>下面询问你是否要备份，上面我们已经自己备份了，也可选他默认备份</p><p><img src="/articles/4afcf658/3.png" alt></p><h4 id="确认更新"><a href="#确认更新" class="headerlink" title="确认更新"></a>确认更新</h4><p>会展示了一些改变的文件（破解文件变了，下面伏笔），问你同意</p><p><img src="/articles/4afcf658/4.png" alt></p><h4 id="成功部署"><a href="#成功部署" class="headerlink" title="成功部署"></a>成功部署</h4><p>访问  ip:8090</p><h4 id="重新破解"><a href="#重新破解" class="headerlink" title="重新破解"></a>重新破解</h4><p>破解包被升级，有机会出现下面画面，代表验证不通过</p><p><img src="/articles/4afcf658/5.png" alt></p><p>把备份的atlassian-extras-2.4.jar文件复制到/opt/atlassian/confluence/confluence/WEB-INF/lib，并重命名为该版本的文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ~/atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar</span><br></pre></td></tr></table></figure><p>重启服务</p><p>数据和附件，无损升级到，6.15.8</p><p><img src="/articles/4afcf658/6.png" alt></p><h2 id="破解教程"><a href="#破解教程" class="headerlink" title="破解教程"></a>破解教程</h2><p>有的同学可能没有备份破解文件，或者可能不是自己搭建的，现在刚刚接手。那么如何破解呢？</p><h4 id="下载破解工具"><a href="#下载破解工具" class="headerlink" title="下载破解工具"></a>下载破解工具</h4><p>链接: <a href="https://pan.baidu.com/s/13GZ-3XutMEyE3cUl9rwg_Q" target="_blank" rel="noopener">https://pan.baidu.com/s/13GZ-3XutMEyE3cUl9rwg_Q</a> 提取码: 7gtd </p><p>破解工具是个jar包，所以需要jdk环境。jdk环境配置在网上很多，这里省略。java -jar 破解文件.jar</p><p><img src="/articles/4afcf658/7.png" alt></p><h4 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级时</span></span><br><span class="line">grep -Po <span class="string">"(?&lt;=server.id\"\&gt;).*(?=\&lt;)"</span> /var/atlassian/application-data/confluence/confluence.cfg.xml</span><br><span class="line"><span class="comment"># 全新安装此步骤跳过</span></span><br></pre></td></tr></table></figure><h4 id="生产key"><a href="#生产key" class="headerlink" title="生产key"></a>生产key</h4><p>先点.patch加载从服务器复制出来的atlassian-extras-2.4.jar文件，然后点.gen破解</p><p><img src="/articles/4afcf658/8.png" alt></p><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><p>如权限安装，如下图填写</p><p><img src="/articles/4afcf658/9.png" alt></p><p>如升级，如下图更改配置</p><p>vim /var/atlassian/application-data/confluence/confluence.cfg.xml</p><p><img src="/articles/4afcf658/10.png" alt></p><p>把破解后的文件atlassian-extras-2.4.jar复制到服务器的/opt/atlassian/confluence/confluence/WEB-INF/lib/，并重命名为该版本的名称，如：atlassian-extras-decoder-v2-3.4.1.jar</p><h2 id="接入Ldap"><a href="#接入Ldap" class="headerlink" title="接入Ldap"></a>接入Ldap</h2><p>管理员登录，一般配置–&gt;用户目录–&gt;添加用户目录–&gt;Ldap</p><p><img src="/articles/4afcf658/11.png" alt></p><p>填写信息</p><p><img src="/articles/4afcf658/12.png" alt></p><p><img src="/articles/4afcf658/13.png" alt></p><p><img src="/articles/4afcf658/14.png" alt></p><p><img src="/articles/4afcf658/15.png" alt></p><p><img src="/articles/4afcf658/16.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;收到公司总部安全部门扫描测试，查出公司内部confluence的版本太低，存在安全漏洞。给出的解决方案是升级到最新版本，最新版本已经把该漏洞修复。本文就详细介绍下confluence的升级过程。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cwiki.us/display/CONFLUENCEWIKI/Upgrading+Confluence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Confluence" scheme="https://wandouduoduo.netlify.com/tags/Confluence/"/>
    
  </entry>
  
  <entry>
    <title>cmdbuild接入openldap方法</title>
    <link href="https://wandouduoduo.netlify.com/articles/364a7d87.html"/>
    <id>https://wandouduoduo.netlify.com/articles/364a7d87.html</id>
    <published>2019-08-30T10:19:54.000Z</published>
    <updated>2019-08-30T10:51:10.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>cmdbuid接入openldap用户权限，便于用户统一管理。</p><a id="more"></a><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>已安装好cmdbuid和openldap。</p><p><a href="https://wandouduoduo.github.io/articles/4fcc594d.html" target="_blank" rel="noopener">安装cmdbuild</a></p><p><a href="https://wandouduoduo.github.io/articles/931613a4.html#more" target="_blank" rel="noopener">安装openldap</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1,  参考官方文档，如下图</p><p><img src="/articles/364a7d87/1.png" alt></p><p>翻译大意是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LDAP协议配置</span><br><span class="line">在本节中，我们将看到LDAP协议的配置选项。</span><br><span class="line">CMDBuild目前仅支持使用简单绑定进行身份验证。但是可以使用</span><br><span class="line">匿名绑定以在LDAP树中搜索用户。</span><br><span class="line">要在CMDBuild中处理用户权限，必须存在要进行身份验证的用户在用户数据库表中。</span><br><span class="line">例如，如果具有LDAP UID j.doe的用户需要访问CMDBuild使用Tech Group必须遵循以下步骤：</span><br><span class="line">•使用任何密码在CMDBuild中创建用户j.doe</span><br><span class="line">•创建Tech组并定义其权限</span><br><span class="line">•将j.doe添加到Tech组</span><br><span class="line">经过上面三步后，当用户j.doe尝试验证自己时，系统将验证提供的凭据在LDAP服务器上（按身份验证类型链指定的顺序）。</span><br><span class="line"></span><br><span class="line">所以就是所需要事先安装openldap树在cmdbuild中创建用户组和用户，这样配置后才能认证，感觉有点多次一举，我既然都事先创建了，干嘛还要接入openldap。最好的方法是直接读取认证，但是目前官方不支持。</span><br><span class="line">有个想法是直接写脚本把openldap信息读取出来定时写入到cmdbuild数据库中，这样就可以实现统一管控。</span><br></pre></td></tr></table></figure><p>2,  配置cmdbuild认证文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT/WEB-INF/conf/auth.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## Authentication method chain (the first match stops the auth chain)</span></span><br><span class="line"><span class="comment">#auth.methods=HeaderAuthenticator,CasAuthenticator,LdapAuthenticator,DBAuthenticator</span></span><br><span class="line">auth.methods=LdapAuthenticator</span><br><span class="line"></span><br><span class="line"><span class="comment">#auth.case.insensitive=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#force.ws.password.digest=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## HEADER</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#header.attribute.name=username</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## CAS</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cas.server.url=https://casserver/cas</span></span><br><span class="line"><span class="comment">#cas.login.page=/login</span></span><br><span class="line"><span class="comment">#cas.service.param=service</span></span><br><span class="line"><span class="comment">#cas.ticket.param=ticket</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## LDAP</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">ldap.server.address=xxx.xxx.xxxx.xxx</span><br><span class="line">ldap.server.port=389</span><br><span class="line">ldap.use.ssl=<span class="literal">false</span></span><br><span class="line">ldap.basedn=dc=wandouduoduo,dc=com</span><br><span class="line">ldap.bind.attribute=uid</span><br><span class="line"></span><br><span class="line">ldap.search.filter=(objectClass=*)</span><br><span class="line"><span class="comment">##Accept only none (anonymous bind) and simple (simple bind)</span></span><br><span class="line"><span class="comment">#ldap.search.auth.method=none</span></span><br><span class="line"><span class="comment">##This section is only for simple bind</span></span><br><span class="line">ldap.search.auth.method=simple</span><br><span class="line">ldap.search.auth.principal=cn=admin,dc=wandouduoduo,dc=com</span><br><span class="line">ldap.search.auth.password=xxxx</span><br></pre></td></tr></table></figure><p>3，重启cmdbuild，生效配置。</p><p>4，日志改为debug模式，便于观察。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/tomcat/webapps/ROOT/WEB-INF/conf/log4j.conf</span><br></pre></td></tr></table></figure><p><img src="/articles/364a7d87/2.png" alt></p><p>经过上述步骤就可实现接入步骤，观察日志，如下图：</p><p><img src="/articles/364a7d87/3.png" alt></p><p>表示认证成功，后续会补充同步脚本。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;cmdbuid接入openldap用户权限，便于用户统一管理。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
      <category term="Cmdb" scheme="https://wandouduoduo.netlify.com/tags/Cmdb/"/>
    
  </entry>
  
  <entry>
    <title>Docker版快速安装OpenLDAP</title>
    <link href="https://wandouduoduo.netlify.com/articles/931613a4.html"/>
    <id>https://wandouduoduo.netlify.com/articles/931613a4.html</id>
    <published>2019-08-28T06:58:44.000Z</published>
    <updated>2019-08-30T10:57:18.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>互联网公司中，会开发很多平台系统，有开源的有自演的，但是每个平台或系统在用户认证方面都需要做，而且处于安全等因素考虑还必须做，统一的用户管理机制可以解决这一痛点。openldap就是这么一个工具。本文，通过docker快速搭建起来，让你体会到它的魅力。</p><a id="more"></a><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.openldap.org" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/osixia/docker-openldap" target="_blank" rel="noopener">镜像文档</a></p><!--more--><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a><strong>拉取镜像</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull osixia/openldap</span><br></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a><strong>运行镜像</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存放数据库</span></span><br><span class="line">mkdir -p /data/openldap/ldap</span><br><span class="line"><span class="comment">#存放配置</span></span><br><span class="line">mkdir -p /data/openldap/slapd.d</span><br><span class="line"></span><br><span class="line">docker run -p 389:389 --name openldap -v /data/openldap/ldap:/var/lib/ldap -v /data/openldap/slapd.d:/etc/openldap/slapd.d --network bridge --hostname openldap-host --env LDAP_ORGANISATION=<span class="string">"wandouduoduo"</span> --env LDAP_DOMAIN=<span class="string">"wandouduoduo.com"</span> --env LDAP_ADMIN_PASSWORD=<span class="string">"Sun123456"</span> --detach osixia/openldap</span><br></pre></td></tr></table></figure><p>配置LDAP域：<code>--env LDAP_DOMAIN=&quot;wandouduoduo.com&quot;</code></p><p>配置LDAP密码：<code>--env LDAP_ADMIN_PASSWORD=&quot;Sun123456&quot;</code></p><p>默认登录用户名：<code>admin</code></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h4 id="LDAP-Admin客户端"><a href="#LDAP-Admin客户端" class="headerlink" title="LDAP Admin客户端"></a>LDAP Admin客户端</h4><p>Ldap Admin是一个用于LDAP目录管理的免费Windows LDAP客户端和管理工具。此应用程序允许您在LDAP服务器上浏览，搜索，修改，创建和删除对象。它还支持更复杂的操作，例如目录复制和在远程服务器之间移动，并扩展常用编辑功能以支持特定对象类型（例如组和帐户）。</p><p>支持系统：<code>Winndows&amp;Linux</code></p><p><a href="http://www.ldapadmin.org/" target="_blank" rel="noopener">官网</a></p><p>下载安装LDAP Admin客户端，新增连接如下：</p><p><img src="/articles/931613a4/1.png" alt></p><p>连接成功即表明OpenLDAP安装成功。</p><h4 id="PHPLdapAdmin客户端"><a href="#PHPLdapAdmin客户端" class="headerlink" title="PHPLdapAdmin客户端"></a>PHPLdapAdmin客户端</h4><p>phpLDAPadmin（也称为PLA）是一个基于Web的LDAP客户端。它为LDAP服务器提供简单，随处可访问的多语言管理。</p><p>其分层树查看器和高级搜索功能使您可以直观地浏览和管理LDAP目录。由于它是一个Web应用程序，因此该LDAP浏览器可在许多平台上运行，使您可以从任何位置轻松管理LDAP服务器。</p><p>phpLDAPadmin是LDAP专业人员和新手的完美LDAP浏览器。其用户群主要由LDAP管理专业人员组成。</p><p><a href="http://phpldapadmin.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="noopener">官网</a></p><h4 id="使用docker-安装-PHPLdapAdmin"><a href="#使用docker-安装-PHPLdapAdmin" class="headerlink" title="使用docker 安装 PHPLdapAdmin"></a>使用docker 安装 PHPLdapAdmin</h4><p><a href="https://github.com/osixia/docker-phpLDAPadmin" target="_blank" rel="noopener">https://github.com/osixia/docker-phpLDAPadmin</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged -p 10004:80 --name myphpldapadmin --env PHPLDAPADMIN_HTTPS=<span class="literal">false</span> --env PHPLDAPADMIN_LDAP_HOSTS=172.17.0.6 --detach osixia/phpldapadmin</span><br></pre></td></tr></table></figure><p>配置的Ldap地址：<code>--env PHPLDAPADMIN_LDAP_HOSTS=172.17.0.6</code></p><p>配置不开启HTTPS：<code>--env PHPLDAPADMIN_HTTPS=false</code>（默认是true）</p><p>如果开启HTTPS，需要配置443端口映射：<code>-p 8443:443</code>，并采用https访问</p><p><strong>通过访问<a href="http://localhost:10004" target="_blank" rel="noopener">http://localhost:10004</a> 来管理，登陆界面</strong></p><p><img src="/articles/931613a4/2.png" alt></p><p><strong>点击login进行登录</strong></p><p><strong>Login DN：</strong><code>cn=admin,dc=wandouduoduo,dc=com</code></p><p><strong>Password：</strong><code>ldap123</code></p><p><strong>登录成功后如下：</strong></p><p><img src="/articles/931613a4/3.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文可以快速搭建和使用openldap, 但是默认openldap是没有打开memerof功能的，如有兴趣，请参考</p><p><a href="https://wandouduoduo.github.io/articles/53f92c3c.html" target="_blank" rel="noopener">OpenLDAP启用MemberOf</a></p><p><a href="https://blog.csdn.net/Michaelwubo/article/details/80525284" target="_blank" rel="noopener">ldapsearch用法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;互联网公司中，会开发很多平台系统，有开源的有自演的，但是每个平台或系统在用户认证方面都需要做，而且处于安全等因素考虑还必须做，统一的用户管理机制可以解决这一痛点。openldap就是这么一个工具。本文，通过docker快速搭建起来，让你体会到它的魅力。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>OpenLDAP启用MemberOf</title>
    <link href="https://wandouduoduo.netlify.com/articles/53f92c3c.html"/>
    <id>https://wandouduoduo.netlify.com/articles/53f92c3c.html</id>
    <published>2019-08-28T06:35:09.000Z</published>
    <updated>2019-09-04T07:41:09.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>默认情况下OpenLDAP的用户组属性是Posixgroup，Posixgroup用户组和用户没有实际的对应关系。如果需要把Posixgroup和user关联起来则需要将用户添加到对应的组中。 通过如上配置可以满足大部分业务场景，但是如果需要通过用户组来查找用户的话，Posixgroup用户组属性，是无法满足要求的。此时需要使用OpenLDAP的groupOfUniqueNames用户组属性。本篇文章Fayson主要介绍如何为OpenLDAP启用MemberOf。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OpenLDAP版本为2.4.44</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="先查看openldap的数据库信息"><a href="#先查看openldap的数据库信息" class="headerlink" title="先查看openldap的数据库信息"></a>先查看openldap的数据库信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/openldap/slapd.d/cn=config/</span><br><span class="line">或者</span><br><span class="line">ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b cn=config dn</span><br></pre></td></tr></table></figure><p>得到的结果大概如下，不一样也不要害怕:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cn=module&#123;0&#125;.ldif cn=schema/ cn=schema.ldif olcDatabase=&#123;0&#125;config.ldif olcDatabase=&#123;-1&#125;frontend.ldif olcDatabase=&#123;1&#125;monitor.ldif olcDatabase=&#123;2&#125;bdb/ olcDatabase=&#123;2&#125;bdb.ldif</span><br></pre></td></tr></table></figure><p>其中有一个带什么<code>db.ldif</code>的就是你最终需要修改的数据库文件，我这里是<code>bdb.ldif</code>，你的可能是<code>mdb.ldif</code>，还有人是<code>hdb.ldif</code>，不管什么<code>db</code>，总之你要改的是一个叫<code>db</code>的文件就对了，你可以<code>cat</code>打开看一看，但是不要用<code>vi</code>去修改它。</p><h4 id="准备memberof-conf-ldif文件"><a href="#准备memberof-conf-ldif文件" class="headerlink" title="准备memberof_conf.ldif文件"></a>准备memberof_conf.ldif文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim memberof_conf.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启memberof支持</span></span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">cn: modulle&#123;0&#125;</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">objectclass: top</span><br><span class="line">olcModuleload: memberof.la</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增用户支持memberof配置</span></span><br><span class="line">dn: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcMemberOf</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: memberof</span><br><span class="line">olcMemberOfDangling: ignore</span><br><span class="line">olcMemberOfRefInt: TRUE</span><br><span class="line">olcMemberOfGroupOC: groupOfUniqueNames</span><br><span class="line">olcMemberOfMemberAD: uniqueMember</span><br><span class="line">olcMemberOfMemberOfAD: memberOf</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/1.jpeg" alt></p><h4 id="编辑refint1-ldif文件"><a href="#编辑refint1-ldif文件" class="headerlink" title="编辑refint1.ldif文件"></a>编辑refint1.ldif文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim refint1.ldif </span><br><span class="line"></span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/2.png" alt></p><h4 id="编辑refint2-ldif文件"><a href="#编辑refint2-ldif文件" class="headerlink" title="编辑refint2.ldif文件"></a>编辑refint2.ldif文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> vim refint2.ldif </span><br><span class="line"> </span><br><span class="line">dn: olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: refint</span><br><span class="line">olcRefintAttribute: memberof member manager owner</span><br><span class="line"><span class="comment">#olcRefintAttribute: memberof uniqueMember  manager owner</span></span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/3.jpeg" alt></p><h4 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意：导入时文件路径跟绝对路径</span></span><br><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f  /data/disk1/openladp/memberof_conf.ldif </span><br><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f  /data/disk1/openladp/refint1.ldif </span><br><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /data/disk1/openladp/refint2.ldif</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/4.jpeg" alt></p><p>以上步骤就完成了OpenLDAP的MemberOf模块启用。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>验证一下配置，这个命令可以列出所有配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slapcat -b cn=config</span><br></pre></td></tr></table></figure><p><strong>创建用户测试</strong></p><p>1, 创建一个测试用户cdsw_a,ldif文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim cdsw_user.ldif</span><br><span class="line"></span><br><span class="line">dn: uid=cdsw_a,ou=People,dc=fayson,dc=com</span><br><span class="line">uid: cdsw_a</span><br><span class="line">cn: cdsw_a</span><br><span class="line">objectClass: account</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">userPassword: 123456</span><br><span class="line">shadowLastChange: 17694</span><br><span class="line">shadowMin: 0</span><br><span class="line">shadowMax: 99999</span><br><span class="line">shadowWarning: 7</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">uidNumber: 10001</span><br><span class="line">gidNumber: 10001</span><br><span class="line">homeDirectory: /home/cdsw_a</span><br></pre></td></tr></table></figure><p>2, 执行如下命令将cdsw_a用户导入到OpenLDAP中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -D &quot;cn=Manager,dc=fayson,dc=com&quot; -W -x -f cdsw_user.ldif</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/5.png" alt></p><p>3, 创建一个新的groupOfUniqueNames用户组，并把cdsw_a用户添加到该组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim cdsw_group.ldif </span><br><span class="line"></span><br><span class="line">dn: cn=cdsw_admin,ou=Group,dc=fayson,dc=com</span><br><span class="line">objectClass: groupOfUniqueNames</span><br><span class="line">cn: cdsw_admin</span><br><span class="line">uniqueMember: uid=cdsw_a,ou=People,dc=fayson,dc=com</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/6.png" alt></p><ol start="4"><li>将cdsw_admin组添加到OpenLDAP中</li></ol><p><img src="/articles/53f92c3c/7.png" alt></p><ol start="5"><li>通过命令查看用户所属组，命令如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -LL -Y EXTERNAL -H ldapi:/// <span class="string">"(uid=cdsw_a)"</span> -b dc=fayson,dc=com memberOf</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/10.jpeg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>在OpenLDAP中配置启用MemberOf时需要注意配置文件的通配符{0}/{2},这个数字不是随意指定的而是根据当前的/etc/openldap/slapd.d/cn=config/生成的内容得出</p><p><img src="/articles/53f92c3c/8.jpeg" alt></p><p>搜索例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># docker openldap</span><br><span class="line">docker exec xxxx ldapsearch -x -D &quot;cn=admin,dc=xxxx,dc=com&quot; -w &quot;xxxx&quot; -b &quot;dc=xxxx,dc=com&quot; &quot;cn=*&quot;</span><br><span class="line"></span><br><span class="line">#现在默认用docker安装openldap是开启了memberof，所以直接添加用户，添加用户组后，直接用下面命令验证</span><br><span class="line">ldapsearch -LL  -H ldapi:/// -D &quot;cn=admin,dc=xxx,dc=net&quot; -W &quot;(uid=sunxu)&quot; -b dc=xxx,dc=net memberOf</span><br></pre></td></tr></table></figure><p><img src="/articles/53f92c3c/8.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;默认情况下OpenLDAP的用户组属性是Posixgroup，Posixgroup用户组和用户没有实际的对应关系。如果需要把Posixgroup和user关联起来则需要将用户添加到对应的组中。 通过如上配置可以满足大部分业务场景，但是如果需要通过用户组来查找用户的话，Posixgroup用户组属性，是无法满足要求的。此时需要使用OpenLDAP的groupOfUniqueNames用户组属性。本篇文章Fayson主要介绍如何为OpenLDAP启用MemberOf。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>Centos7上配置最新版openldap服务多主模式(镜像模式)</title>
    <link href="https://wandouduoduo.netlify.com/articles/3337f7d4.html"/>
    <id>https://wandouduoduo.netlify.com/articles/3337f7d4.html</id>
    <published>2019-08-28T05:54:54.000Z</published>
    <updated>2019-08-28T11:26:27.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在实际产线运维环境下，使用最多的就是镜像模式，当然多IDC机房的情况下也会结合使用其他模式，例如主从模式。</p><p>镜像模式只允许2个主节点，如果超过2个节点其他节点只会同步获取前面2个节点的配置（这个是博客文档里面看到的，没有验证）</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="center">主机名称</th><th align="center">地址</th><th align="center">版本</th><th align="center">角色</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">sysldap-shylf-1</td><td align="center">10.116.72.11</td><td align="center">CentOS7.6 min</td><td align="center">openLdap, httpd, phpldapadmin</td><td align="center">主节点</td></tr><tr><td align="center">sysldap-shylf-2</td><td align="center">10.116.72.12</td><td align="center">CentOS7.6 min</td><td align="center">openLdap, httpd, phpldapadmin</td><td align="center">主节点</td></tr><tr><td align="center">systerm-shylf-1</td><td align="center">10.116.72.15</td><td align="center">CentOS7.6 min</td><td align="center">openLdap client</td><td align="center"></td></tr></tbody></table><p>前提条件，为了方便配置防火墙以及禁用selinux<br>配置示例:dc=example,dc=com</p><a id="more"></a><h2 id="OpenLDAP服务基础配置"><a href="#OpenLDAP服务基础配置" class="headerlink" title="OpenLDAP服务基础配置"></a>OpenLDAP服务基础配置</h2><p>本文档假设2个节点都已经设置好了<a href="https://wandouduoduo.github.io/articles/be8d00d3.html#more" target="_blank" rel="noopener">OpenLDAP服务基础配置</a></p><h2 id="配置OpenLDAP-双主结构（mirrormode）"><a href="#配置OpenLDAP-双主结构（mirrormode）" class="headerlink" title="配置OpenLDAP 双主结构（mirrormode）"></a>配置OpenLDAP 双主结构（mirrormode）</h2><h3 id="OpenLDAP的2个主节点都需要添加模块syncprov"><a href="#OpenLDAP的2个主节点都需要添加模块syncprov" class="headerlink" title="OpenLDAP的2个主节点都需要添加模块syncprov"></a>OpenLDAP的2个主节点都需要添加模块syncprov</h3><p><strong><code>2个主节点都需要执行</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim mod_syncprov.ldif</span><br><span class="line"></span><br><span class="line">dn: cn=module,cn=config</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">cn: module</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line">olcModuleLoad: syncprov.la</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f mod_syncprov.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line">vim syncprov.ldif</span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line">olcSpSessionLog: 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif</span><br></pre></td></tr></table></figure><h3 id="主节点1配置-10-116-72-11-同步"><a href="#主节点1配置-10-116-72-11-同步" class="headerlink" title="主节点1配置(10.116.72.11)同步"></a>主节点1配置(10.116.72.11)同步</h3><p>需要根据实际情况修改的参数：<br>provider 同步来源，也就是主节点，可以包含多个主节点<br>binddn 主节点管理账户<br>credentials 主节点管理账户密码<br>searchbase 根目录<br><strong><code>特别主机：2个主节点属性 olcServerID的值不能相同，provider指向对方</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">vim master_node_1.ldif</span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcServerID</span><br><span class="line">olcServerID: 0</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcSyncRepl</span><br><span class="line">olcSyncRepl: rid=001</span><br><span class="line">  provider=ldap://10.116.72.12:389/</span><br><span class="line">  bindmethod=simple</span><br><span class="line">  binddn=<span class="string">"cn=Manager,dc=example,dc=com"</span></span><br><span class="line">  credentials=openldap</span><br><span class="line">  searchbase=<span class="string">"dc=example,dc=com"</span></span><br><span class="line">  scope=sub</span><br><span class="line">  schemachecking=on</span><br><span class="line">  <span class="built_in">type</span>=refreshAndPersist</span><br><span class="line">  retry=<span class="string">"30 5 300 3"</span></span><br><span class="line">  interval=00:00:05:00</span><br><span class="line">-</span><br><span class="line">add: olcMirrorMode</span><br><span class="line">olcMirrorMode: TRUE</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: add</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f master_node_1.ldif</span><br></pre></td></tr></table></figure><h3 id="主节点2配置-10-116-72-12-同步"><a href="#主节点2配置-10-116-72-12-同步" class="headerlink" title="主节点2配置(10.116.72.12)同步"></a>主节点2配置(10.116.72.12)同步</h3><p><strong>特别主机：2个主节点属性 olcServerID的值不能相同，provider指向对方</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">vim master_node_2.ldif</span><br><span class="line"></span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcServerID</span><br><span class="line">olcServerID: 1</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcSyncRepl</span><br><span class="line">olcSyncRepl: rid=001</span><br><span class="line">  provider=ldap://10.116.72.11:389/</span><br><span class="line">  bindmethod=simple</span><br><span class="line">  binddn=<span class="string">"cn=Manager,dc=example,dc=com"</span></span><br><span class="line">  credentials=openldap</span><br><span class="line">  searchbase=<span class="string">"dc=example,dc=com"</span></span><br><span class="line">  scope=sub</span><br><span class="line">  schemachecking=on</span><br><span class="line">  <span class="built_in">type</span>=refreshAndPersist</span><br><span class="line">  retry=<span class="string">"30 5 300 3"</span></span><br><span class="line">  interval=00:00:05:00</span><br><span class="line">-</span><br><span class="line">add: olcMirrorMode</span><br><span class="line">olcMirrorMode: TRUE</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: add</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f master_node_2.ldif</span><br></pre></td></tr></table></figure><ul><li>验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从服务节点验证数据是否同步正常</span><br><span class="line">ldapsearch -x -b <span class="string">'ou=People,dc=example,dc=com'</span></span><br><span class="line">[输出内容省略]</span><br><span class="line"></span><br><span class="line">验证是OK的。</span><br></pre></td></tr></table></figure><h3 id="远程主机配置（客户端-10-116-72-15）"><a href="#远程主机配置（客户端-10-116-72-15）" class="headerlink" title="远程主机配置（客户端 10.116.72.15）"></a>远程主机配置（客户端 10.116.72.15）</h3><p>客户端 可以指定多个openldap uri 修改配置如下（当然也可以只配置其中1个）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authconfig --enableldap --enableldapauth --ldapserver=<span class="string">"10.116.72.11,10.116.72.12"</span> --ldapbasedn=<span class="string">"dc=example,dc=com"</span> --update</span><br></pre></td></tr></table></figure><ul><li>验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh  800001@10.116.72.15</span><br><span class="line">Warning: Permanently added <span class="string">'10.116.72.15'</span> (ECDSA) to the list of known hosts.</span><br><span class="line">800001@10.116.72.15<span class="string">'s password: </span></span><br><span class="line"><span class="string">Last login: Thu Jul  4 17:59:32 2019 from 10.116.71.200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[800001@systerm-shylf-1 ~]$</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;在实际产线运维环境下，使用最多的就是镜像模式，当然多IDC机房的情况下也会结合使用其他模式，例如主从模式。&lt;/p&gt;
&lt;p&gt;镜像模式只允许2个主节点，如果超过2个节点其他节点只会同步获取前面2个节点的配置（这个是博客文档里面看到的，没有验证）&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;主机名称&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;地址&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;版本&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;角色&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sysldap-shylf-1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.11&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap, httpd, phpldapadmin&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;主节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sysldap-shylf-2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap, httpd, phpldapadmin&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;主节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;systerm-shylf-1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.15&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap client&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;前提条件，为了方便配置防火墙以及禁用selinux&lt;br&gt;配置示例:dc=example,dc=com&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>Centos7上配置最新版openldap服务主从架构</title>
    <link href="https://wandouduoduo.netlify.com/articles/760f3c02.html"/>
    <id>https://wandouduoduo.netlify.com/articles/760f3c02.html</id>
    <published>2019-08-28T05:44:44.000Z</published>
    <updated>2019-08-28T06:06:51.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在实际产线运维环境下，可能包含多个IDC机房，每个机房的主机都需要通过OpenLDAP体系管理运维账户登录。这种情况下可以配置OpenLDAP的主从架构实现(当然同一个机房也可以配置主从架构，客户端配置ldap uri指定多个地址)。主openldap节点称为“provider”可读可写，从openldap节点称为“consumer”只读。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="center">主机名称</th><th align="center">地址</th><th align="center">版本</th><th align="center">角色</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">sysldap-shylf-1</td><td align="center">10.116.72.11</td><td align="center">CentOS7.6 min</td><td align="center">openLdap, httpd, phpldapadmin</td><td align="center">主节点</td></tr><tr><td align="center">sysldap-shylf-2</td><td align="center">10.116.72.12</td><td align="center">CentOS7.6 min</td><td align="center">openLdap</td><td align="center">从节点，可以配置多从的</td></tr><tr><td align="center">systerm-shylf-1</td><td align="center">10.116.72.15</td><td align="center">CentOS7.6 min</td><td align="center">openLdap client</td><td align="center"></td></tr></tbody></table><p>前提条件，为了方便配置防火墙以及禁用selinux<br>配置示例:dc=example,dc=com</p><a id="more"></a><h2 id="OpenLDAP服务基础配置"><a href="#OpenLDAP服务基础配置" class="headerlink" title="OpenLDAP服务基础配置"></a>OpenLDAP服务基础配置</h2><p>本文档假设2个节点都已经设置好了<a href="https://wandouduoduo.github.io/articles/be8d00d3.html#more" target="_blank" rel="noopener">OpenLDAP服务基础配置</a></p><h2 id="配置OpenLDAP主从结构"><a href="#配置OpenLDAP主从结构" class="headerlink" title="配置OpenLDAP主从结构"></a>配置OpenLDAP主从结构</h2><h3 id="主节点配置-10-116-72-11-，添加模块syncprov"><a href="#主节点配置-10-116-72-11-，添加模块syncprov" class="headerlink" title="主节点配置(10.116.72.11)，添加模块syncprov"></a>主节点配置(10.116.72.11)，添加模块syncprov</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim mod_syncprov.ldif</span><br><span class="line"></span><br><span class="line">dn: cn=module,cn=config</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">cn: module</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line">olcModuleLoad: syncprov.la</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f mod_syncprov.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line">vim syncprov.ldif</span><br><span class="line">dn: olcOverlay=syncprov,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcSyncProvConfig</span><br><span class="line">olcOverlay: syncprov</span><br><span class="line">olcSpSessionLog: 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f syncprov.ldif</span><br></pre></td></tr></table></figure><h3 id="从节点配置-10-116-72-12-同步"><a href="#从节点配置-10-116-72-12-同步" class="headerlink" title="从节点配置(10.116.72.12)同步"></a>从节点配置(10.116.72.12)同步</h3><p>需要根据实际情况修改的参数：<br>provider 同步来源，也就是主节点，可以包含多个主节点<br>binddn 主节点管理账户<br>credentials 主节点管理账户密码<br>searchbase 根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim syncrepl.ldif</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcSyncRepl</span><br><span class="line">olcSyncRepl: rid=001</span><br><span class="line">  provider=ldap://10.116.72.11:389/</span><br><span class="line">  bindmethod=simple</span><br><span class="line">  binddn=<span class="string">"cn=Manager,dc=example,dc=com"</span></span><br><span class="line">  credentials=openldap</span><br><span class="line">  searchbase=<span class="string">"dc=example,dc=com"</span></span><br><span class="line">  scope=sub</span><br><span class="line">  schemachecking=on</span><br><span class="line">  <span class="built_in">type</span>=refreshAndPersist</span><br><span class="line">  retry=<span class="string">"30 5 300 3"</span></span><br><span class="line">  interval=00:00:05:00</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置使之生效</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f syncrepl.ldif</span><br></pre></td></tr></table></figure><ul><li>验证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从服务节点验证数据是否同步正常</span><br><span class="line">ldapsearch -x -b &apos;ou=People,dc=example,dc=com&apos;</span><br><span class="line">[输出内容省略]</span><br><span class="line"></span><br><span class="line">验证是OK的。</span><br></pre></td></tr></table></figure><h3 id="远程主机配置（客户端-10-116-72-15）"><a href="#远程主机配置（客户端-10-116-72-15）" class="headerlink" title="远程主机配置（客户端 10.116.72.15）"></a>远程主机配置（客户端 10.116.72.15）</h3><p>客户端 可以指定多个openldap uri 修改配置如下（当然也可以只配置其中1个）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authconfig --enableldap --enableldapauth --ldapserver=<span class="string">"10.116.72.11,10.116.72.12"</span> --ldapbasedn=<span class="string">"dc=example,dc=com"</span> --update</span><br></pre></td></tr></table></figure><ul><li>验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh  800001@10.116.72.15</span><br><span class="line">Warning: Permanently added <span class="string">'10.116.72.15'</span> (ECDSA) to the list of known hosts.</span><br><span class="line">800001@10.116.72.15<span class="string">'s password: </span></span><br><span class="line"><span class="string">Last login: Thu Jul  4 17:59:32 2019 from 10.116.71.200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[800001@systerm-shylf-1 ~]$</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;在实际产线运维环境下，可能包含多个IDC机房，每个机房的主机都需要通过OpenLDAP体系管理运维账户登录。这种情况下可以配置OpenLDAP的主从架构实现(当然同一个机房也可以配置主从架构，客户端配置ldap uri指定多个地址)。主openldap节点称为“provider”可读可写，从openldap节点称为“consumer”只读。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;主机名称&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;地址&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;版本&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;角色&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sysldap-shylf-1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.11&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap, httpd, phpldapadmin&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;主节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;sysldap-shylf-2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.12&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;从节点，可以配置多从的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;systerm-shylf-1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.116.72.15&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7.6 min&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;openLdap client&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;前提条件，为了方便配置防火墙以及禁用selinux&lt;br&gt;配置示例:dc=example,dc=com&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>Centos7上单节点安装配置最新版openldap服务</title>
    <link href="https://wandouduoduo.netlify.com/articles/be8d00d3.html"/>
    <id>https://wandouduoduo.netlify.com/articles/be8d00d3.html</id>
    <published>2019-08-28T03:31:13.000Z</published>
    <updated>2019-08-28T04:34:44.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>本文详细介绍了在centos7上安装最新版openldap的过程和常见场景。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：centos7.6</p><p>软件版本：openldap-2.4.44</p><p>配置示例:   dc=example,dc=com</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>为了方便配置防火墙以及禁用selinux，或者关闭防火墙。</p><p>查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p>停止firewall</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>禁止firewall开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>关闭selinux </p><p>进入到/etc/selinux/config文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">将SELINUX=enforcing改为SELINUX=disabled</span><br></pre></td></tr></table></figure><h2 id="OpenLDAP服务端配置"><a href="#OpenLDAP服务端配置" class="headerlink" title="OpenLDAP服务端配置"></a>OpenLDAP服务端配置</h2><p>创建一个配置目录，将相关配置文件放在这个目录下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">openldap</span><br><span class="line">├── base.ldif</span><br><span class="line">├── config.ldif</span><br><span class="line">├── demo.ldif</span><br><span class="line">├── loglevel.ldif</span><br><span class="line">├── schema</span><br><span class="line">│   ├── sudo.ldif</span><br><span class="line">│   └── sudo.schema</span><br><span class="line">├── sudo_ops_role.ldif</span><br><span class="line">└── SUODers.ldif</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> openldap</span><br></pre></td></tr></table></figure><h2 id="安装LDAP组件并启动服务"><a href="#安装LDAP组件并启动服务" class="headerlink" title="安装LDAP组件并启动服务"></a>安装LDAP组件并启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum安装</span></span><br><span class="line">yum -y install openldap  openldap-clients openldap-servers </span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立Ldap数据库</span></span><br><span class="line">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class="line">chown ldap:ldap /var/lib/ldap/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动和开机自启</span></span><br><span class="line">systemctl start slapd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> slapd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">netstat -antup | grep -i 389</span><br><span class="line">tcp     0    0 0.0.0.0:389      0.0.0.0:*   LISTEN      16349/slapd     </span><br><span class="line">tcp6    0    0 :::389           :::*        LISTEN      16349/slapd</span><br></pre></td></tr></table></figure><h2 id="配置OpenLDAP服务"><a href="#配置OpenLDAP服务" class="headerlink" title="配置OpenLDAP服务"></a>配置OpenLDAP服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成Ldap root密码</span></span><br><span class="line">~]<span class="comment"># slappasswd</span></span><br><span class="line">New password: openldap</span><br><span class="line">Re-enter new password: openldap </span><br><span class="line">&#123;SSHA&#125;npo7WhvpY+s4+p584zAnoduStQzeTxHE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加需要的schemas [可以根据需要添加更多]</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif </span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置openLDAP服务</span></span><br><span class="line">vim config.ldif</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base=<span class="string">"gidNumber=0+uidNumber=0,cn=peercred,cn=external, cn=auth"</span> <span class="built_in">read</span> by dn.base=<span class="string">"cn=Manager,dc=example,dc=com"</span> <span class="built_in">read</span> by * none</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=example,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=Manager,dc=example,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;npo7WhvpY+s4+p584zAnoduStQzeTxHE</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=<span class="string">"cn=Manager,dc=example,dc=com"</span> write by anonymous auth by self write by * none</span><br><span class="line">olcAccess: &#123;1&#125;to dn.base=<span class="string">""</span> by * <span class="built_in">read</span></span><br><span class="line">olcAccess: &#123;2&#125;to * by dn=<span class="string">"cn=Manager,dc=example,dc=com"</span> write by * <span class="built_in">read</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置到LDAP服务</span></span><br><span class="line">ldapmodify -Y EXTERNAL  -H ldapi:/// -f config.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 域example.com配置</span></span><br><span class="line">vi base.ldif</span><br><span class="line"></span><br><span class="line">dn: dc=example,dc=com</span><br><span class="line">o: example com</span><br><span class="line">dc: example</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line"></span><br><span class="line">dn: cn=Manager,dc=example,dc=com</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: Manager</span><br><span class="line">description: LDAP Manager</span><br><span class="line"></span><br><span class="line">dn: ou=People,dc=example,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: People</span><br><span class="line"></span><br><span class="line">dn: ou=Group,dc=example,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置到LDAP服务</span></span><br><span class="line">ldapadd -x -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -f base.ldif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ldap log</span></span><br><span class="line">vim loglevel.ldif</span><br><span class="line"></span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcLogLevel</span><br><span class="line">olcLogLevel: stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送配置到LDAP服务</span></span><br><span class="line">ldapmodify -Y EXTERNAL -H ldapi:/// -f loglevel.ldif</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"local4.*  /var/log/slapd/slapd.log"</span> &gt;&gt; /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">vi /etc/logrotate.d/slapd</span><br><span class="line"></span><br><span class="line">/var/<span class="built_in">log</span>/openldap.log &#123;</span><br><span class="line">    rotate 14</span><br><span class="line">    size 10M</span><br><span class="line">    missingok</span><br><span class="line">    compress</span><br><span class="line">    copytruncate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"><span class="comment"># 如果有需要还可以配置日志轮转</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个测试用户</span></span><br><span class="line">vi demo.ldif</span><br><span class="line"></span><br><span class="line">dn: uid=800001,ou=People,dc=example,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: account</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">cn: demo</span><br><span class="line">uid: 800001</span><br><span class="line">uidNumber: 3000</span><br><span class="line">gidNumber: 100</span><br><span class="line">homeDirectory: /home/ldapusers</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">gecos: Demo [Demo user (at) example]</span><br><span class="line">userPassword: &#123;crypt&#125;x</span><br><span class="line">shadowLastChange: 17058</span><br><span class="line">shadowMin: 0</span><br><span class="line">shadowMax: 99999</span><br><span class="line">shadowWarning: 7</span><br><span class="line"></span><br><span class="line">dn: cn=ops,ou=Group,dc=example,dc=com</span><br><span class="line">objectClass: posixGroup</span><br><span class="line">objectClass: top</span><br><span class="line">cn: ops</span><br><span class="line">gidNumber: 80001</span><br><span class="line">memberUid: 800001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">ldapadd -x -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -f demo.ldif</span><br><span class="line"><span class="comment"># 改密</span></span><br><span class="line">ldappasswd -s <span class="string">'passwd@123'</span> -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -x <span class="string">"uid=800001,ou=People,dc=example,dc=com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证搜索</span></span><br><span class="line">ldapsearch -x uid=800001 -b dc=example,dc=com</span><br><span class="line"></span><br><span class="line">//删除使用如下命令，暂不删除，因后续实验需用到测试用户</span><br><span class="line">ldapdelete -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -x <span class="string">"uid=800001,ou=People,dc=example,dc=com"</span></span><br></pre></td></tr></table></figure><h2 id="ldap客户端配置"><a href="#ldap客户端配置" class="headerlink" title="ldap客户端配置"></a>ldap客户端配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装组件</span></span><br><span class="line">yum install -y openldap-clients nss-pam-ldapd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加client服务器到LDAP服务,注意IP</span></span><br><span class="line">authconfig --enableldap --enableldapauth --ldapserver=<span class="string">"localhost"</span> --ldapbasedn=<span class="string">"dc=example,dc=com"</span> --update</span><br><span class="line"><span class="comment"># 这个指令修改了/etc/nsswitch.conf 以及/etc/openldap/ldap.conf文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动ldap客户端服务</span></span><br><span class="line">systemctl restart  nslcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">getent passwd 800001</span><br><span class="line">800001:3000:100:Demo [Demo user (at) example]:/home/demo:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程ssh登录验证</span></span><br><span class="line">ssh 800001@10.116.72.15</span><br><span class="line">800001@10.116.72.15<span class="string">'s password: demopassword</span></span><br><span class="line"><span class="string">-bash-4.2$ id 800001</span></span><br><span class="line"><span class="string">uid=3000(800001) gid=100(users) groups=100(users),80001(ops)</span></span><br><span class="line"><span class="string">-bash-4.2$ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这里可以看到没有配置自动生成账户的家目录，在实际的运维过程中，也不会去生成家目录（不然一堆的账户加目录），而是让运维账户统一一个家目录，并且设置为只读。</span></span><br><span class="line"><span class="string"># 不过如果有需要配置配置家目录自动生成，需要修改pam模块</span></span><br></pre></td></tr></table></figure><h2 id="配置LDAP使用公钥-publicKey-远程ssh登录客户主机"><a href="#配置LDAP使用公钥-publicKey-远程ssh登录客户主机" class="headerlink" title="配置LDAP使用公钥(publicKey)远程ssh登录客户主机"></a>配置LDAP使用公钥(publicKey)远程ssh登录客户主机</h2><h3 id="openldap服务端配置"><a href="#openldap服务端配置" class="headerlink" title="openldap服务端配置"></a>openldap服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装openssh-ldap</span></span><br><span class="line">yum install openssh-ldap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">rpm -aql |grep openssh-ldap</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/HOWTO.ldap-keys</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/ldap.conf</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-openldap.ldif</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-openldap.schema</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-sun.ldif</span><br><span class="line">/usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-sun.schema</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置添加相关schema</span></span><br><span class="line">cp /usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-openldap.ldif /etc/openldap/schema/</span><br><span class="line">cp /usr/share/doc/openssh-ldap-7.4p1/openssh-lpk-openldap.schema /etc/openldap/schema/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/openssh-lpk-openldap.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 账户添加objectClass: ldapPublicKey 并添加属性sshPublicKey</span></span><br><span class="line"><span class="comment"># 具体修改流程，可以使用下面安装的ldapadmin或者phpldapadmin进行配置</span></span><br><span class="line">objectClass: ldapPublicKey</span><br><span class="line">sshPublicKey:  值是具体的publickey</span><br></pre></td></tr></table></figure><h3 id="客户主机配置"><a href="#客户主机配置" class="headerlink" title="客户主机配置"></a>客户主机配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install openssh-ldap</span><br><span class="line">cp /usr/share/doc/openssh-ldap-7.4p1/ldap.conf /etc/ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用TLS 配置TLS,这里不使用</span></span><br><span class="line">vim /etc/ssh/ldap.conf</span><br><span class="line"></span><br><span class="line">ssl no</span><br><span class="line">uri ldap://10.116.72.11/</span><br><span class="line"></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 脚本将从LDAP获取密钥并将其提供给SSH服务器</span></span><br><span class="line">AuthorizedKeysCommand /usr/libexec/openssh/ssh-ldap-wrapper</span><br><span class="line">AuthorizedKeysCommandUser nobody</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa 800001@10.116.72.15</span><br><span class="line">Last login: Thu Jul  4 16:15:30 2019 from 10.116.71.200</span><br><span class="line">Could not <span class="built_in">chdir</span> to home directory /home/demo: No such file or directory</span><br><span class="line">-bash-4.2$</span><br></pre></td></tr></table></figure><h2 id="配置LDAP账户可以登录的主机列表"><a href="#配置LDAP账户可以登录的主机列表" class="headerlink" title="配置LDAP账户可以登录的主机列表"></a>配置LDAP账户可以登录的主机列表</h2><p>测试使用的远程ssh服务器是10.116.72.15，我们验证如下</p><ol><li><p>添加账户主机列表（host属性）不包含116.116.72.15 测试是否可以正常登录</p></li><li><p>添加账户主机列表（host属性）包含116.116.72.15 测试是否可以正常登录</p></li></ol><h3 id="需要通过Ldap远程登录的客户机配置"><a href="#需要通过Ldap远程登录的客户机配置" class="headerlink" title="需要通过Ldap远程登录的客户机配置"></a>需要通过Ldap远程登录的客户机配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nsswitch.conf</span><br><span class="line"><span class="comment"># 添加如下过滤配置，包含本机主机名称。表示过滤匹配包括本机IP或者允许任意IP地址的账户授权信息</span></span><br><span class="line">filter passwd (|(host=10.116.72.15)(host=\*))(host=ALL)</span><br></pre></td></tr></table></figure><p>备注：如果远程主机是centos6，配置稍有不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pam_ldap.conf</span><br><span class="line">pam_filter |(host=10.116.72.16)(host=\*)(host=ALL)</span><br></pre></td></tr></table></figure><h3 id="LDAP账户配置"><a href="#LDAP账户配置" class="headerlink" title="LDAP账户配置"></a>LDAP账户配置</h3><p>ldap命令或者ldapadmin管理工具为账户添加属性host，这个属性可以添加多次。</p><ul><li>第一次配置不包含测试主机10.116.72.15</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x uid=800001 -b <span class="string">'ou=People,dc=example,dc=com'</span></span><br><span class="line"></span><br><span class="line">dn: uid=800001,ou=People,dc=example,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: account</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">cn: demo</span><br><span class="line">uid: 800001</span><br><span class="line">uidNumber: 3000</span><br><span class="line">gidNumber: 100</span><br><span class="line">homeDirectory: /home/demo</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">gecos: Demo [Admin (at) eju]</span><br><span class="line">shadowMin: 0</span><br><span class="line">shadowMax: 99999</span><br><span class="line">shadowWarning: 7</span><br><span class="line">host: 10.116.72.12</span><br><span class="line">host: 10.116.72.16</span><br><span class="line"></span><br><span class="line">测试登录</span><br><span class="line"><span class="comment"># ssh 800001@10.116.72.15</span></span><br><span class="line">800001@10.116.72.15<span class="string">'s password: </span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><ul><li>第二次配置包含测试主机10.116.72.15</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x uid=800001 -b <span class="string">'ou=People,dc=example,dc=com'</span></span><br><span class="line"></span><br><span class="line">dn: uid=800001,ou=People,dc=example,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: account</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">cn: demo</span><br><span class="line">uid: 800001</span><br><span class="line">uidNumber: 3000</span><br><span class="line">gidNumber: 100</span><br><span class="line">homeDirectory: /home/demo</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">gecos: Demo [Admin (at) eju]</span><br><span class="line">shadowMin: 0</span><br><span class="line">shadowMax: 99999</span><br><span class="line">shadowWarning: 7</span><br><span class="line">host: 10.116.72.12</span><br><span class="line">host: 10.116.72.15</span><br><span class="line">host: 10.116.72.16</span><br><span class="line"></span><br><span class="line">测试登录</span><br><span class="line"><span class="comment"># ssh 800001@10.116.72.15</span></span><br><span class="line">800001@10.116.72.15<span class="string">'s password: </span></span><br><span class="line"><span class="string">Last login: Thu Jul  4 16:15:30 2019 from 10.116.71.200</span></span><br><span class="line"><span class="string">Could not chdir to home directory /home/demo: No such file or directory</span></span><br><span class="line"><span class="string">-bash-4.2$</span></span><br></pre></td></tr></table></figure><p>以上，测试通过。</p><h2 id="配置LDAP-sudo权限管理"><a href="#配置LDAP-sudo权限管理" class="headerlink" title="配置LDAP sudo权限管理"></a>配置LDAP sudo权限管理</h2><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><p>CentOS7.6下安装的OpenLDAP是2.4.44 ,schema目录下并没有sudo.ldif以及sudo.schema文件，需要单独处理。 sudo是默认安装的，sudo相关目录下有sudo.schema模板文件schema.OpenLDAP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">find / -name schema.OpenLDAP -<span class="built_in">exec</span> cp &#123;&#125; /etc/openldap/schema/sudo.schema \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成sudo.ldif</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'include     /etc/openldap/schema/sudo.schema'</span> &gt; /tmp/sudo.conf</span><br><span class="line">mkdir /tmp/sudo</span><br><span class="line">slaptest -f /tmp/sudo.conf -F /tmp/sudo</span><br><span class="line"></span><br><span class="line">vim /tmp/sudo/cn=config/cn=schema/cn=&#123;0&#125;sudo.ldif</span><br><span class="line"></span><br><span class="line">替换（前3行）</span><br><span class="line">dn: cn=&#123;0&#125;sudo</span><br><span class="line">objectClass: olcSchemaConfig</span><br><span class="line">cn: &#123;0&#125;sudo</span><br><span class="line">为</span><br><span class="line">dn: cn=sudo,cn=schema,cn=config</span><br><span class="line">objectClass: olcSchemaConfig</span><br><span class="line">cn: sudo</span><br><span class="line">删除(最后7行)</span><br><span class="line">structuralObjectClass: olcSchemaConfig</span><br><span class="line">entryUUID: ec3b659a-31a9-1039-90ae-87c69280e4a2</span><br><span class="line">creatorsName: cn=config</span><br><span class="line">createTimestamp: 20190703064542Z</span><br><span class="line">entryCSN: 20190703064542.945991Z<span class="comment">#000000#000#000000</span></span><br><span class="line">modifiersName: cn=config</span><br><span class="line">modifyTimestamp: 20190703064542Z</span><br><span class="line"></span><br><span class="line">cp /tmp/sudo/cn=config/cn=schema/cn=&#123;0&#125;sudo.ldif /etc/openldap/schema/sudo.ldif</span><br><span class="line">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/sudo.ldif</span><br><span class="line"></span><br><span class="line">rm -f /tmp/sudo.conf /tmp/sudo</span><br></pre></td></tr></table></figure><h3 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim SUODers.ldif</span><br><span class="line"></span><br><span class="line">dn: ou=SUDOers,dc=example,dc=com</span><br><span class="line">ou: SUDOers</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line"></span><br><span class="line">dn: cn=defaults,ou=SUDOers,dc=example,dc=com</span><br><span class="line">objectClass: sudoRole</span><br><span class="line">cn: defaults</span><br><span class="line">sudoOption: requiretty</span><br><span class="line">sudoOption: !visiblepw</span><br><span class="line">sudoOption: always_set_home</span><br><span class="line">sudoOption: env_reset</span><br><span class="line">sudoOption: env_keep =  <span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS"</span></span><br><span class="line">sudoOption: env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span></span><br><span class="line">sudoOption: env_keep += <span class="string">"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span></span><br><span class="line">sudoOption: env_keep += <span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span></span><br><span class="line">sudoOption: env_keep += <span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span></span><br><span class="line">sudoOption: secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">sudoOption: logfile = /var/<span class="built_in">log</span>/sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">ldapadd -x -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -f SUODers.ldif</span><br></pre></td></tr></table></figure><h3 id="将上面的demo（800001）账户配置为sudo权限"><a href="#将上面的demo（800001）账户配置为sudo权限" class="headerlink" title="将上面的demo（800001）账户配置为sudo权限"></a>将上面的demo（800001）账户配置为sudo权限</h3><p>这里配置一个运维sudo role，名称为sudo_ops_role，简单配置为sudo 到root所有权限，并将800001加入该role</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim sudo_ops_role.ldif</span><br><span class="line"></span><br><span class="line">dn: cn=sudo_ops_role,ou=SUDOers,dc=example,dc=com</span><br><span class="line">objectClass: sudoRole</span><br><span class="line">cn: sudo_ops_role</span><br><span class="line">sudoOption: !authenticate</span><br><span class="line">sudoRunAsUser: root</span><br><span class="line">sudoCommand: ALL</span><br><span class="line">sudoHost: ALL</span><br><span class="line">sudoUser: 800001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">ldapadd -x -W -D <span class="string">"cn=Manager,dc=example,dc=com"</span> -f sudo_ops_role.ldif</span><br></pre></td></tr></table></figure><h3 id="客户端增加如下配置"><a href="#客户端增加如下配置" class="headerlink" title="客户端增加如下配置"></a>客户端增加如下配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nsswitch.conf</span><br><span class="line"><span class="comment"># 追加内存</span></span><br><span class="line">sudoers:    files ldap</span><br><span class="line"></span><br><span class="line">mv /etc/sudo-ldap.conf&#123;,.bak&#125;</span><br><span class="line">vi /etc/sudo-ldap.conf</span><br><span class="line">uri ldap://10.116.72.11/ </span><br><span class="line">base dc=example,dc=com</span><br><span class="line">sudoers_base ou=SUDOers,dc=example,dc=com</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh 800001@10.116.72.15</span></span><br><span class="line">800001@10.116.72.15<span class="string">'s password: </span></span><br><span class="line"><span class="string">Could not chdir to home directory /home/ldapusers: No such file or directory</span></span><br><span class="line"><span class="string">-bash-4.2$ sudo su -</span></span><br><span class="line"><span class="string">Last login: Wed Jul  3 15:09:21 CST 2019 from 10.116.71.200 on pts/0</span></span><br><span class="line"><span class="string">[root@systerm-shylf-1 ~]#</span></span><br></pre></td></tr></table></figure><h2 id="基于web的OpenLDAP管理工具phpldapadmin"><a href="#基于web的OpenLDAP管理工具phpldapadmin" class="headerlink" title="基于web的OpenLDAP管理工具phpldapadmin"></a>基于web的OpenLDAP管理工具phpldapadmin</h2><p>实例在openldap安装，实际使用中可以部署在其他服务器上通过网络访问。前端还可以配置一个nginx去代理实现高可用</p><h3 id="安装配置phpldapadmin"><a href="#安装配置phpldapadmin" class="headerlink" title="安装配置phpldapadmin"></a>安装配置phpldapadmin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装组件</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install httpd phpldapadmin</span><br><span class="line"><span class="comment"># yum安装后的项目文件位置/usr/share/phpldapadmin/htdocs，配置文件位置/etc/phpldapadmin/config.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># phpldapadmin修改</span></span><br><span class="line">vim /etc/phpldapadmin/config.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉</span></span><br><span class="line">//<span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'uid'</span>);</span><br><span class="line"><span class="comment"># 或者修改为</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'dn'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;newServer(<span class="string">'ldap_pla'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'name'</span>,<span class="string">'LDAP Server'</span>); </span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'host'</span>,<span class="string">'127.0.0.1'</span>); //根据需要修改为实际地址,这个部署到openldap本机直接保留127.0.0.1</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'port'</span>,389);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'base'</span>,array(<span class="string">'dc=example,dc=com'</span>));   //</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'auth_type'</span>,<span class="string">'cookie'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'bind_id'</span>,<span class="string">'cn=Manager,dc=example,dc=com'</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'bind_pass'</span>,<span class="string">''</span>);</span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'server'</span>,<span class="string">'tls'</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># httpd修改</span></span><br><span class="line">vim /etc/httpd/conf.d/phpldapadmin.conf</span><br><span class="line"></span><br><span class="line">Alias /phpldapadmin /usr/share/phpldapadmin/htdocs</span><br><span class="line">Alias /ldapadmin /usr/share/phpldapadmin/htdocs</span><br><span class="line"></span><br><span class="line">&lt;Directory /usr/share/phpldapadmin/htdocs&gt;</span><br><span class="line">  &lt;IfModule mod_authz_core.c&gt;</span><br><span class="line">    <span class="comment"># Apache 2.4</span></span><br><span class="line">    <span class="comment"># Require local</span></span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">  &lt;IfModule !mod_authz_core.c&gt;</span><br><span class="line">    <span class="comment"># Apache 2.2</span></span><br><span class="line">    Order Deny,Allow</span><br><span class="line">    Deny from all</span><br><span class="line">    Allow from 127.0.0.1</span><br><span class="line">    Allow from ::1</span><br><span class="line">    <span class="comment"># 根据需要配置许可</span></span><br><span class="line">    Allow from 10.116</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动httpd服务</span></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><h3 id="使用phpldapadmin"><a href="#使用phpldapadmin" class="headerlink" title="使用phpldapadmin"></a>使用phpldapadmin</h3><p><img src="/articles/be8d00d3/1.png" alt></p><p><img src="/articles/be8d00d3/2.png" alt></p><p>备注，如果报错如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Forbidden </span><br><span class="line">You don<span class="string">'t have permission to access /ldapadmin/ on this server.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以尝试修改httpd.conf</span></span><br><span class="line"><span class="string">vi /etc/httpd/conf/http.conf</span></span><br><span class="line"><span class="string">修改</span></span><br><span class="line"><span class="string">&lt;Directory /&gt;</span></span><br><span class="line"><span class="string">    AllowOverride none</span></span><br><span class="line"><span class="string">    Require all denied</span></span><br><span class="line"><span class="string">&lt;/Directory&gt;</span></span><br><span class="line"><span class="string">为</span></span><br><span class="line"><span class="string">&lt;Directory /&gt; </span></span><br><span class="line"><span class="string">Options Indexes FollowSymLinks </span></span><br><span class="line"><span class="string">AllowOverride None </span></span><br><span class="line"><span class="string">&lt;/Directory&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">systemctl restart httpd</span></span><br></pre></td></tr></table></figure><h3 id="为phpldapadmin添加suorole配置模版"><a href="#为phpldapadmin添加suorole配置模版" class="headerlink" title="为phpldapadmin添加suorole配置模版"></a>为phpldapadmin添加suorole配置模版</h3><p>从<a href="http://phpldapadmin.sourceforge.net/wiki/index.php/TemplatesContributed:Sudo" target="_blank" rel="noopener">官网地址</a> 可以获取到sudoRole模板，可以在这个基础上进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/share/phpldapadmin/templates</span><br><span class="line"><span class="comment"># ll /usr/share/phpldapadmin/templates</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  4 15:32 creation</span><br><span class="line">drwxr-xr-x 2 root root   69 Jul  4 15:31 modification</span><br><span class="line">-rw-r--r-- 1 root root 2089 Oct  1  2012 template.dtd</span><br></pre></td></tr></table></figure><p>vim  /usr/share/phpldapadmin/templates/creation/sudo.xml 注意根据需要进行修改，我的sudo ou名称是SUDOers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE template SYSTEM "template.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sudo Policy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^ou=SUDOers,dc=.*<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">icon</span>&gt;</span>images/door.png<span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>New Sudo Policy<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">askcontainer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">askcontainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rdn</span>&gt;</span>cn<span class="tag">&lt;/<span class="name">rdn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">visible</span>&gt;</span>1<span class="tag">&lt;/<span class="name">visible</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">objectClasses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objectClass</span> <span class="attr">id</span>=<span class="string">"sudoRole"</span>&gt;</span><span class="tag">&lt;/<span class="name">objectClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectClasses</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"cn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Policy Name<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>1<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoOption"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Option<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>2<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoRunAsUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Run As User<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>3<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoCommand"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Command<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>4<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Users<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>=php.MultiList(/,(objectClass=posixAccount),uid,%uid%</span><br><span class="line">(%cn%),sudoUser)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>5<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoHost"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Hosts<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span>10<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>6<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>textarea<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>7<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vim  /usr/share/phpldapadmin/templates/modification/sudo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE template SYSTEM "template.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sudo Policy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^cn=.*,ou=SUDOers,dc=.*<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">icon</span>&gt;</span>images/door.png<span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Sudo Policy<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">askcontainer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">askcontainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rdn</span>&gt;</span>cn<span class="tag">&lt;/<span class="name">rdn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">visible</span>&gt;</span>1<span class="tag">&lt;/<span class="name">visible</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">objectClasses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">objectClass</span> <span class="attr">id</span>=<span class="string">"sudoRole"</span>&gt;</span><span class="tag">&lt;/<span class="name">objectClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectClasses</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"cn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Policy Name<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>1<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoOption"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Option<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>2<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoRunAsUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Run As User<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>3<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoCommand"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Command<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>4<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Users<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>5<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"sudoHost"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Sudo Hosts<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;array&gt;10&lt;/array&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>6<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spacer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">spacer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">id</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>textarea<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">display</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">order</span>&gt;</span>7<span class="tag">&lt;/<span class="name">order</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">page</span>&gt;</span>1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cols</span>&gt;</span>200<span class="tag">&lt;/<span class="name">cols</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rows</span>&gt;</span>10<span class="tag">&lt;/<span class="name">rows</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启httpd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>浏览器查看(ou=SUODers,dc=example,dc=com 创建一条子目录 sudoRole)</p><p><img src="/articles/be8d00d3/3.png" alt></p><h2 id="windows下的一个OpenLDAP管理工具-LdapAdmin"><a href="#windows下的一个OpenLDAP管理工具-LdapAdmin" class="headerlink" title="windows下的一个OpenLDAP管理工具 LdapAdmin"></a>windows下的一个OpenLDAP管理工具 LdapAdmin</h2><p>下载地址 <a href="http://www.ldapadmin.org/download/ldapadmin.html" target="_blank" rel="noopener">LdapAdmin</a>, 当前最新版本是<a href="https://sourceforge.net/projects/ldapadmin/files/ldapadmin/1.8.3/LdapAdminExe-w64-1.8.3.zip/download" target="_blank" rel="noopener">1.8.3</a>。 下载后直接解压就是一个exe文件。</p><h3 id="创建连接到openldap服务"><a href="#创建连接到openldap服务" class="headerlink" title="创建连接到openldap服务"></a>创建连接到openldap服务</h3><p><img src="/articles/be8d00d3/4.png" alt></p><h3 id="配置一个运维组ops，然后将用户800001加入到ops组"><a href="#配置一个运维组ops，然后将用户800001加入到ops组" class="headerlink" title="配置一个运维组ops，然后将用户800001加入到ops组"></a>配置一个运维组ops，然后将用户800001加入到ops组</h3><p><img src="/articles/be8d00d3/5.png" alt></p><h2 id="开启memberOf"><a href="#开启memberOf" class="headerlink" title="开启memberOf"></a>开启memberOf</h2><p>默认情况下openldap的用户组属性是Posixgroup，Posixgroup用户组属性和用户没有实际的对应关系。如果要对应起来的话，就需要单独把用户设置到Posixgroup中</p><p>开启memberOf之后可以配置groupOfUniqueNames用户组属性，可以根据用户组过滤用户，这个过滤是唯一的</p><p>开启memberof，并让新增用户支持memberof</p><p>创建 memberof_config.ldif</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dn</span>: cn=module&#123;0&#125;,cn=config</span><br><span class="line"><span class="attribute">cn</span>: modulle&#123;0&#125;</span><br><span class="line"><span class="attribute">objectClass</span>: olcModuleList</span><br><span class="line"><span class="attribute">objectclass</span>: top</span><br><span class="line"><span class="attribute">olcModuleload</span>: memberof.la</span><br><span class="line"><span class="attribute">olcModulePath</span>: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line"><span class="attribute">dn</span>: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line"><span class="attribute">objectClass</span>: olcConfig</span><br><span class="line"><span class="attribute">objectClass</span>: olcMemberOf</span><br><span class="line"><span class="attribute">objectClass</span>: olcOverlayConfig</span><br><span class="line"><span class="attribute">objectClass</span>: top</span><br><span class="line"><span class="attribute">olcOverlay</span>: memberof</span><br><span class="line"><span class="attribute">olcMemberOfDangling</span>: ignore</span><br><span class="line"><span class="attribute">olcMemberOfRefInt</span>: TRUE</span><br><span class="line"><span class="attribute">olcMemberOfGroupOC</span>: groupOfNames</span><br><span class="line"><span class="attribute">olcMemberOfMemberAD</span>: member</span><br><span class="line"><span class="attribute">olcMemberOfMemberOfAD</span>: memberOf</span><br></pre></td></tr></table></figure><p>创建 refint1.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br></pre></td></tr></table></figure><p>创建 refint2.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dn: olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: refint</span><br><span class="line">olcRefintAttribute: memberof member manager owner</span><br></pre></td></tr></table></figure><p>导入配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f memberof_config.ldif</span><br><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f refint1.ldif</span><br><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f refint2.ldif</span><br><span class="line"><span class="comment"># 导入refint2时如果有报错，把最后一句改为：olcRefintAttribute: memberof uniqueMember  manager owner</span></span><br></pre></td></tr></table></figure><p>验证一下配置，这个命令可以列出所有配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slapcat -b cn=config</span><br></pre></td></tr></table></figure><h2 id="禁止匿名访问"><a href="#禁止匿名访问" class="headerlink" title="禁止匿名访问"></a><strong>禁止匿名访问</strong></h2><p>默认情况下匿名用户可以获取所有用户信息，甚至是密码字段，虽然密码字段是经过加密的那也很危险</p><p>创建disable_anon.ldif文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcDisallows</span><br><span class="line">olcDisallows: bind_anon</span><br><span class="line"></span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRequires</span><br><span class="line">olcRequires: authc</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;-1&#125;frontend,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRequires</span><br><span class="line">olcRequires: authc</span><br></pre></td></tr></table></figure><p>导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -Q -Y EXTERNAL -H ldapi:/// -f disable_anon.ldif</span><br></pre></td></tr></table></figure><h2 id="设置ACL"><a href="#设置ACL" class="headerlink" title="设置ACL"></a>设置ACL</h2><p>拒绝所有用户查看用户信息，并且添加有ldap管理账号</p><p>创建acl.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcAccess</span><br><span class="line">olcAccess: to attrs=userPassword</span><br><span class="line">  by anonymous auth</span><br><span class="line">  by dn.base=&quot;cn=ldapadmin,ou=manage,dc=taovip,dc=com&quot; write</span><br><span class="line">  by * none</span><br><span class="line">olcAccess: to *</span><br><span class="line">  by anonymous auth</span><br><span class="line">  by dn.base=&quot;cn=ldapadmin,ou=manage,dc=taovip,dc=com&quot; write</span><br><span class="line">  by dn.base=&quot;cn=ldapread,ou=manage,dc=taovip,dc=com&quot; read</span><br><span class="line">  by * none</span><br></pre></td></tr></table></figure><p>导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f acl.ldif</span><br></pre></td></tr></table></figure><p>删除ACL</p><p>创建文件del_acl.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">delete: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;</span><br></pre></td></tr></table></figure><p>导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f acl.ldif</span><br></pre></td></tr></table></figure><h2 id="创建管理用户"><a href="#创建管理用户" class="headerlink" title="创建管理用户"></a>创建管理用户</h2><p>创建add_ou.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dn: ou=manage,dc=example,dc=com</span><br><span class="line">ou: manage</span><br><span class="line">description: Directory Manage</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure><p>创建add_manage_user.ldif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n: cn=ldapadmin,ou=manage,dc=example,dc=com</span><br><span class="line">cn: ldapadmin</span><br><span class="line">sn: ldapadmin</span><br><span class="line">uid: ldapadmin</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: person</span><br><span class="line">userPassword: &#123;SSHA&#125;4eDZHnxvfOOoAgSM6tDLDueCIUB9sRuDHVpVJ</span><br><span class="line"></span><br><span class="line">dn: cn=ldapread,ou=manage,dc=example,dc=com</span><br><span class="line">cn: ldapread</span><br><span class="line">sn: ldapread</span><br><span class="line">uid: ldapread</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: organizationalPerson</span><br><span class="line">objectClass: person</span><br><span class="line">userPassword: &#123;SSHA&#125;4eDZHnxvfOOoAgSM6tDLDueCIUB9sRuDHVpVJ</span><br></pre></td></tr></table></figure><p>导入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -x -D cn=root,dc=example,dc=com -W -f add_ou.ldif</span><br><span class="line">ldapadd -x -D cn=root,dc=example,dc=com -W -f add_manage_user.ldif</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;本文详细介绍了在centos7上安装最新版openldap的过程和常见场景。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;操作系统：centos7.6&lt;/p&gt;
&lt;p&gt;软件版本：openldap-2.4.44&lt;/p&gt;
&lt;p&gt;配置示例:   dc=example,dc=com&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenLDAP_MirrorMode的OpenLDAP高可用</title>
    <link href="https://wandouduoduo.netlify.com/articles/1c70a485.html"/>
    <id>https://wandouduoduo.netlify.com/articles/1c70a485.html</id>
    <published>2019-08-19T04:06:31.000Z</published>
    <updated>2019-08-28T06:06:19.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>LDAP是一款轻量级目录访问协议（Lightweight Directory Access Protocol，简称LDAP），属于开源集中账号管理架构的实现，且支持众多系统版本，被广大互联网公司所采用。目录服务是一种特殊的数据库系统，对于数据的读取、浏览、搜索有很好的效果。同时做为用户中心，数据库的高可用显得尤为重要。在客户生产环境中使用的是客户的负载均衡设备，基于思杰的硬件负载均衡设备，后端配置的是OpenLDAP_MirrorMode,相当于Mysql的双主模式，后面某一台服务器出现问题，负载均衡会将后端的服务器剔除，另一台仍能提供服务，如下图所示<br><img src="/articles/1c70a485/1.png" alt="1"></p><a id="more"></a><h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><p>操作系统: centos 7.2<br>服务器A：10.10.1.134<br>服务器B：10.10.1.132</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>下载软件： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/admin/openldap &amp;&amp; cd /home/admin/openldap</span><br><span class="line"></span><br><span class="line">wget ftp://ftp.openldap.org/pub/OpenLDAP/openldap- release/openldap-2.4.23.tgz</span><br><span class="line">wget http://download.oracle.com/berkeley-db/db-4.6.21.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>关闭selinux </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/SELINUX/s/enforcing/disabled/' /etc/selinux/config &amp;&amp; sestatus</span><br></pre></td></tr></table></figure></li><li><p>防火墙关闭 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/systemctl disable firewalld.service &amp;&amp; /bin/systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>配置yum源为阿里云yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从阿里云镜像网站下载yum源配置文件到yum目录中</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo </span><br><span class="line"><span class="meta"> #</span><span class="bash">修改版本号为redhat7</span></span><br><span class="line">sed -i 's/$releasever/7/g' /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">清空yum缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="meta">#</span><span class="bash">生成列表</span></span><br><span class="line">yum list</span><br></pre></td></tr></table></figure></li><li><p>安装openldap环境所需要的依赖包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libtool-ltdl libtool-ltdl-devel gcc openssl openssl-devel cyrus-sasl-lib.x86_64 cyrus-sasl-devel.x86_64 cyrus-sasl-plain.x86_64 cyrus-sasl-md5.x86_64 cyrus-sasl-ldap.x86_64</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装openldap和Berkeley-DB"><a href="#安装openldap和Berkeley-DB" class="headerlink" title="安装openldap和Berkeley DB"></a>安装openldap和Berkeley DB</h2><h4 id="1-写在安装之前："><a href="#1-写在安装之前：" class="headerlink" title="1. 写在安装之前："></a>1. 写在安装之前：</h4><p>编译安装openldap需要数据库的支持，openldap的数据库支持<br>Berkeley DB,Oracle,Mysql,MariaDB,GDBM等数据库。默认openldap采用Berkeley DB，并且openldap对数据库有一定的要求，openldap 2.4的软件为例，需要Berkeley DB 4.4版本以上,所以在编译安装openldap源码包时需要先下载安装Berkeley DB</p><h4 id="2-编译安装Berkeley-DB"><a href="#2-编译安装Berkeley-DB" class="headerlink" title="2. 编译安装Berkeley DB"></a>2. 编译安装Berkeley DB</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -xf db-4.6.21.tar.gz -C /usr/local/src</span><br><span class="line">cd /usr/local/src/db-4.6.21/build_unix/ &amp;&amp; mkdir /usr/local/BDB</span><br><span class="line">../dist/configure --prefix=/usr/local/BDB</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">echo "/usr/local/BDB/lib/" &gt; /etc/ld.so.conf.d/bdb.conf</span><br><span class="line">ldconfig -v</span><br><span class="line">ln -sv /usr/local/BDB/include /usr/include/BDB</span><br></pre></td></tr></table></figure><h4 id="3-编译安装openldap"><a href="#3-编译安装openldap" class="headerlink" title="3. 编译安装openldap"></a>3. 编译安装openldap</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -xf openldap-2.4.23.tgz -C /usr/<span class="built_in">local</span>/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/openldap-2.4.23/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/openldap --<span class="built_in">enable</span>-syslog --<span class="built_in">enable</span>-modules --<span class="built_in">enable</span>-debug --with-tls CPPFLAGS=-I/usr/<span class="built_in">local</span>/BDB/include/ LDFLAGS=-L/usr/<span class="built_in">local</span>/BDB/lib/ --<span class="built_in">enable</span>-ldap --<span class="built_in">enable</span>-relay --<span class="built_in">enable</span>-accesslog --<span class="built_in">enable</span>-auditlog --<span class="built_in">enable</span>-syncprov --with-cyrus-sasl --<span class="built_in">enable</span>-spasswd</span><br><span class="line">make depend</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/openldap/lib/"</span> &gt; /etc/ld.so.conf.d/ldap.conf</span><br><span class="line">ldconfig -v</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/openldap/include/ /usr/include/ldap</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openldap/bin/* /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openldap/sbin/* /usr/<span class="built_in">local</span>/sbin/</span><br></pre></td></tr></table></figure><h2 id="配置openldap"><a href="#配置openldap" class="headerlink" title="配置openldap"></a>配置openldap</h2><h4 id="1-配置openldap的方法有两种："><a href="#1-配置openldap的方法有两种：" class="headerlink" title="1. 配置openldap的方法有两种："></a>1. 配置openldap的方法有两种：</h4><ul><li>通过修改配置文件实现配置</li><li>通过配置数据库的形式完成配置（slapd.d下的数据库配置文件）,属于动态配置不需要重启slapd进程,<br>此配置文件在cn=config目录下的LDIF的配置文件 。此文件不建议手动修改，用ldap命令生成。</li></ul><h4 id="2-配置rootdn密码-optional"><a href="#2-配置rootdn密码-optional" class="headerlink" title="2. 配置rootdn密码(optional)"></a>2. 配置rootdn密码(optional)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/openldap/bin/slappasswd  <span class="comment">#此密码记住，后面配置openldap会用到。</span></span><br></pre></td></tr></table></figure><h4 id="3-创建用户ldap"><a href="#3-创建用户ldap" class="headerlink" title="3. 创建用户ldap"></a>3. 创建用户ldap</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd ldap</span><br></pre></td></tr></table></figure><h4 id="4-创建数据目录以及日志文件"><a href="#4-创建数据目录以及日志文件" class="headerlink" title="4. 创建数据目录以及日志文件"></a>4. 创建数据目录以及日志文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/openldap/&#123;data,<span class="built_in">log</span>,var&#125; -p</span><br><span class="line"><span class="built_in">cd</span> /data/openldap/var/</span><br><span class="line">mkdir run</span><br></pre></td></tr></table></figure><h4 id="5-修改权限："><a href="#5-修改权限：" class="headerlink" title="5. 修改权限："></a>5. 修改权限：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/openldap/etc/openldap/DB_CONFIG.example /data/openldap/data/DB_CONFIG</span><br><span class="line">chown -R ldap:ldap /data/openldap/data</span><br><span class="line">chmod 700 -R /data/openldap/data</span><br></pre></td></tr></table></figure><h4 id="6-修改openldap配置文件"><a href="#6-修改openldap配置文件" class="headerlink" title="6. 修改openldap配置文件"></a>6. 修改openldap配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件vim slapd.conf</span></span><br><span class="line"></span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/core.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/collective.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/corba.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/cosine.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/duaconf.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/dyngroup.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/inetorgperson.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/java.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/misc.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/nis.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/openldap.schema</span><br><span class="line">include /usr/<span class="built_in">local</span>/openldap/etc/openldap/schema/ppolicy.schema</span><br><span class="line">pidfile /data/openldap/var/run/slapd.pid</span><br><span class="line">argsfile /data/openldap/var/run/slapd.args</span><br><span class="line">loglevel 256</span><br><span class="line">logfile /data/openldap/<span class="built_in">log</span>/slapd.log</span><br><span class="line">moduleload syncprov.la <span class="comment"># 需要数据同步需要开启此模块</span></span><br><span class="line">database bdb</span><br><span class="line">directory /data/openldap/data</span><br><span class="line">suffix <span class="string">"dc=boe,dc=com"</span></span><br><span class="line">rootdn <span class="string">"cn=Manager,dc=boe,dc=com"</span></span><br><span class="line">rootpw &#123;SSHA&#125;eJtr5umAo23PqTKATU/X6D8swJ9yIlSx <span class="comment">#用slappasswd命令生成的密码</span></span><br><span class="line">index objectclass,entryCSN,entryUUID eq</span><br><span class="line">overlay syncprov</span><br><span class="line">syncprov-checkpoint 100 10</span><br><span class="line">syncprov-sessionlog 100</span><br><span class="line">serverID 2</span><br><span class="line">syncrepl rid=123</span><br><span class="line">provider=ldap://对端服务器ip</span><br><span class="line">bindmethod=simple</span><br><span class="line">binddn=<span class="string">"cn=Manager,dc=boe,dc=com"</span></span><br><span class="line">credentials=密码(管理员密码，这里是Manager的密码)</span><br><span class="line">searchbase=<span class="string">"dc=boe,dc=com"</span></span><br><span class="line">schemachecking=off</span><br><span class="line"><span class="built_in">type</span>=refreshAndPersist</span><br><span class="line">retry=<span class="string">"60 +"</span></span><br><span class="line">mirrormode on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#两个服务器的配置文件有两个地方不一致</span></span><br><span class="line">1）serverID不一致 </span><br><span class="line">2）provider=ldap://对端的ip</span><br></pre></td></tr></table></figure><h4 id="7-开启日志功能"><a href="#7-开启日志功能" class="headerlink" title="7.开启日志功能"></a>7.开启日志功能</h4><ul><li>通过修改配置文件开启日志功能</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/rsyslog.d/slapd.conf</span><br><span class="line">local4.* /data/openldap/<span class="built_in">log</span>/openldap.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启rsyslog和slapd</span></span><br><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure><ul><li>通过修改数据库配置文件开启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/root/loglevel.ldif &lt;&lt; EOF</span><br><span class="line">dn: cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcLogLevel</span><br><span class="line">olcLogLevel: stats</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入</span></span><br><span class="line">ldapadd -x -D <span class="string">"cn=Manager,dc=boe,dc=com"</span> -f ./loglevel.ldif -w secret</span><br></pre></td></tr></table></figure><h2 id="配置phpldpadmin工具"><a href="#配置phpldpadmin工具" class="headerlink" title="配置phpldpadmin工具"></a>配置phpldpadmin工具</h2><h4 id="1-安装和配置LDAP管理工具PHPldapadmin"><a href="#1-安装和配置LDAP管理工具PHPldapadmin" class="headerlink" title="1. 安装和配置LDAP管理工具PHPldapadmin"></a>1. 安装和配置LDAP管理工具PHPldapadmin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd php php-ldap php-gd php-mbstring php-pear php-bcmath php-xml</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum --enablerepo=epel -y install phpldapadmin</span><br></pre></td></tr></table></figure><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/phpldapadmin/config.php +398</span><br><span class="line"><span class="comment">#397行取消注释，398行添加注释</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">'login'</span>,<span class="string">'attr'</span>,<span class="string">'dn'</span>);</span><br><span class="line"></span><br><span class="line">vim /etc/httpd/密码 d/phpldapadmin.conf</span><br><span class="line">Apache 2.4</span><br><span class="line"></span><br><span class="line">Require all granted （修改此处)</span><br><span class="line">Order Deny,Allow</span><br><span class="line">Deny from all</span><br><span class="line">Allow from 127.0.0.1</span><br><span class="line">Allow from ::1</span><br></pre></td></tr></table></figure><h4 id="3-设置开机自启并启动Apache"><a href="#3-设置开机自启并启动Apache" class="headerlink" title="3. 设置开机自启并启动Apache"></a>3. 设置开机自启并启动Apache</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl start httpd </span><br><span class="line"><span class="comment">#启动openldap</span></span><br><span class="line"><span class="comment">#/usr/local/openldap/libexec/slapd</span></span><br><span class="line"></span><br><span class="line">访问用http://ip/phpldapadmin访问如图</span><br></pre></td></tr></table></figure><p><img src="/articles/1c70a485/2.jpeg" alt="111"><br><img src="/articles/1c70a485/3.jpeg" alt="222"><br>在10.10.1.132上创建了一个OU名为testou,会发现10.10.1.132会自动同步到本地，如图:<br><img src="/articles/1c70a485/4.jpeg" alt="333"><br><img src="/articles/1c70a485/5.jpeg" alt="444"><br>两服务器日志如下：<br><img src="/articles/1c70a485/6.png" alt="555"><br><img src="https://yqfile.alicdn.com/224de6f3795b999de2bf35524cab63c4d066cb10.jpeg" alt="666"><br>以上结果得知，在镜像模式下，当其中一台服务器增加操作OU时，另一台也会同步增加，两台服务器均可进行读写操作，任何一台信息发生变化，都会以推的方式进行通知。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;LDAP是一款轻量级目录访问协议（Lightweight Directory Access Protocol，简称LDAP），属于开源集中账号管理架构的实现，且支持众多系统版本，被广大互联网公司所采用。目录服务是一种特殊的数据库系统，对于数据的读取、浏览、搜索有很好的效果。同时做为用户中心，数据库的高可用显得尤为重要。在客户生产环境中使用的是客户的负载均衡设备，基于思杰的硬件负载均衡设备，后端配置的是OpenLDAP_MirrorMode,相当于Mysql的双主模式，后面某一台服务器出现问题，负载均衡会将后端的服务器剔除，另一台仍能提供服务，如下图所示&lt;br&gt;&lt;img src=&quot;/articles/1c70a485/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Openldap" scheme="https://wandouduoduo.netlify.com/tags/Openldap/"/>
    
  </entry>
  
  <entry>
    <title>自制yum源离线安装开发代码时的对应版本ansible</title>
    <link href="https://wandouduoduo.netlify.com/articles/fe96187b.html"/>
    <id>https://wandouduoduo.netlify.com/articles/fe96187b.html</id>
    <published>2019-08-16T08:59:17.000Z</published>
    <updated>2019-08-16T10:03:05.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于在工作环境中，经常遇到批量安装的服务器，不具备连接互联网的条件。同时通过简单的下载安装 ansible 源码安装，又会遇到各种奇葩问题，推荐使用自制 yum 源方法，然后使用 yum安装 ansible。不得不说，ansible很好用，ansible团队也一致在维护和更新。但是，版本之间存在比较大的差异。以前写的代码，现在直接安装新版本的ansible后可能就不能用了，你想想下：代码中用到的类没有了，模块消失了，变量不见了等等，当然可以查看新的文档更改代码适应新版本，但是代码沉淀时间久了，做迁移还是会遇到这种问题，这个问题困扰了很多Devops。如何安装写代码时的版本，如何在断网模式下安装代码对应版本的ansible, 这成为了一种刚需和痛点，本文就以安装旧版本：2.3.1为例，详细阐述。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>操作系统版本</strong>：Centos7.2</p><p><strong>Python版本</strong>：  Python2.7.5</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="旧代码机器操作"><a href="#旧代码机器操作" class="headerlink" title="旧代码机器操作"></a>旧代码机器操作</h3><h5 id="安装-yumdownloader"><a href="#安装-yumdownloader" class="headerlink" title="安装 yumdownloader"></a>安装 yumdownloader</h5><p>准备一台可以连接互联网的相同版本系统的操作系统(安装环境一样)，使用yumdownloader工具下载ansible安装包以及所有依赖包。并以 root 身份安装 yumdownloader工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  -y install  yum-utils</span><br></pre></td></tr></table></figure><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><p>用于存放依赖的安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir   /root/packages</span><br></pre></td></tr></table></figure><h5 id="更新国内yum源"><a href="#更新国内yum源" class="headerlink" title="更新国内yum源"></a>更新国内yum源</h5><p>由于默认的源里没有 ansible，需要安装国内快速稳定的yum源, 这里选择阿里源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/epel-7.repo /etc/yum.repos.d/epel-7.repo.bak</span><br><span class="line">wget -O /etc/yum.repos.d/epel-7.repo  http://mirrors.aliyun.com/repo/epel-7.repo </span><br><span class="line">yum clean all     <span class="comment"># 清除系统所有的yum缓存</span></span><br><span class="line">yum makecache     <span class="comment"># 生成yum缓存</span></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><h5 id="下载-ansible-和-所有依赖包"><a href="#下载-ansible-和-所有依赖包" class="headerlink" title="下载 ansible 和 所有依赖包"></a>下载 ansible 和 所有依赖包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载ansible依赖包</span></span><br><span class="line">yumdownloader --resolve --destdir /root/packages   ansible</span><br><span class="line"><span class="comment">#下载createrepo依赖包</span></span><br><span class="line">yumdownloader --resolve --destdir /root/packages   createrepo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩安装包</span></span><br><span class="line">tar -Jcvf  packages.tar.xz   packages</span><br></pre></td></tr></table></figure><h3 id="新机器操作"><a href="#新机器操作" class="headerlink" title="新机器操作"></a>新机器操作</h3><p>将上面下载的所有 rpm 安装包打包，传输到需要批量的新服务器上，并解压到指定的文件夹里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新机器解压到/mnt/下</span></span><br><span class="line">tar -Jxvf  packages.tar.xz   -C  /mnt/</span><br><span class="line"></span><br><span class="line">链接：https://pan.baidu.com/s/1FtZxpXk1AzZ_WcGVJFGE5w</span><br><span class="line">提取码：0sf2</span><br></pre></td></tr></table></figure><h5 id="首先创建-安装createrepo"><a href="#首先创建-安装createrepo" class="headerlink" title="首先创建 安装createrepo"></a>首先创建 安装createrepo</h5><p>进入 /mnt/packages 目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh deltarpm-3.6-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh python-deltarpm-3.6-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh createrepo-0.9.9-28.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h5 id="然后使用createrepo生成符合要求的yum仓库"><a href="#然后使用createrepo生成符合要求的yum仓库" class="headerlink" title="然后使用createrepo生成符合要求的yum仓库"></a>然后使用createrepo生成符合要求的yum仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd  /mnt</span></span><br><span class="line"><span class="comment"># createrepo /packages</span></span><br><span class="line"></span><br><span class="line">Spawning worker 0 with 25 pkgs</span><br><span class="line">Workers Finished</span><br><span class="line">Saving Primary metadata</span><br><span class="line">Saving file lists metadata</span><br><span class="line">Saving other metadata</span><br><span class="line">Generating sqlite DBs</span><br><span class="line">Sqlite DBs complete</span><br></pre></td></tr></table></figure><h5 id="配置本地-yum源"><a href="#配置本地-yum源" class="headerlink" title="配置本地 yum源"></a>配置本地 yum源</h5><p>把当前存在 yum 做备份，并移走别的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim  /etc/yum.repos.d/ansible.repo</span></span><br><span class="line">[ansibel]</span><br><span class="line">name=sun <span class="built_in">local</span> ansible</span><br><span class="line">baseurl=file:///mnt/packages</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">保存退出，然后执行：</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h5 id="使用-yum安装-ansible"><a href="#使用-yum安装-ansible" class="headerlink" title="使用 yum安装 ansible"></a>使用 yum安装 ansible</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ansible</span><br></pre></td></tr></table></figure><h5 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible --version</span></span><br><span class="line">ansible 2.3.1.0</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = Default w/o overrides</span><br><span class="line">  python version = 2.7.5 (default, Jun 20 2019, 20:27:34) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/9a34d458de29" target="_blank" rel="noopener">https://www.jianshu.com/p/9a34d458de29</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于在工作环境中，经常遇到批量安装的服务器，不具备连接互联网的条件。同时通过简单的下载安装 ansible 源码安装，又会遇到各种奇葩问题，推荐使用自制 yum 源方法，然后使用 yum安装 ansible。不得不说，ansible很好用，ansible团队也一致在维护和更新。但是，版本之间存在比较大的差异。以前写的代码，现在直接安装新版本的ansible后可能就不能用了，你想想下：代码中用到的类没有了，模块消失了，变量不见了等等，当然可以查看新的文档更改代码适应新版本，但是代码沉淀时间久了，做迁移还是会遇到这种问题，这个问题困扰了很多Devops。如何安装写代码时的版本，如何在断网模式下安装代码对应版本的ansible, 这成为了一种刚需和痛点，本文就以安装旧版本：2.3.1为例，详细阐述。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Ansible" scheme="https://wandouduoduo.netlify.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Confluence(破解版)</title>
    <link href="https://wandouduoduo.netlify.com/articles/f9f96949.html"/>
    <id>https://wandouduoduo.netlify.com/articles/f9f96949.html</id>
    <published>2019-07-30T10:17:29.000Z</published>
    <updated>2019-08-07T02:06:43.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>confluence是一个专业的企业知识管理与协同软件，可以用于构建企业wiki。通过它可以实现团队成员之间的协作和知识共享。现在大多数公司都会部署一套confluence，用作内部wiki。现在confluence已收费，那么下面将介绍下Docker安装破解confluence的操作记录。</p><a id="more"></a><h2 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h2><p>Docker ：17.12.0-ce</p><p>MySQL：5.7</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>Docker安装MySQL详见<a href="https://my.oschina.net/u/2289161/blog/1647061" target="_blank" rel="noopener">https://my.oschina.net/u/2289161/blog/1647061</a></p><h2 id="安装Confluence"><a href="#安装Confluence" class="headerlink" title="安装Confluence"></a>安装Confluence</h2><p>下载镜像：<a href="https://hub.docker.com/r/cptactionhank/atlassian-confluence/" target="_blank" rel="noopener">https://hub.docker.com/r/cptactionhank/atlassian-confluence/</a></p><p>启动一个confluence容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name confluence -p 8090:8090  --link mysql5.7:db --user root:root cptactionhank/atlassian-confluence:latest</span><br></pre></td></tr></table></figure><p>可以用以下命令检查confluence是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps  </span><br><span class="line">docker inspect confluence</span><br></pre></td></tr></table></figure><p>访问<a href="http://host-to-server:8090/" target="_blank" rel="noopener">http://ip:8090/</a> 就可以看到Confluence的初始化和配置页面。</p><p><img src="/articles/f9f96949/1.png" alt="img"></p><p>选择中文。</p><p><img src="/articles/f9f96949/2.png" alt="img"></p><p>选择产品安装并点击下一步，继续安装。</p><p><img src="/articles/f9f96949/3.png" alt="img"></p><p><img src="/articles/f9f96949/4.png" alt="img"></p><p><strong>通过上图可以看出需要输入授权码，下面介绍下破解confluence授权码的操作。</strong></p><h2 id="破解confluence"><a href="#破解confluence" class="headerlink" title="破解confluence"></a><strong>破解confluence</strong></h2><p>下载破解confluence文件：</p><p>atlassian-universal-plugin-manager-plugin-2.22.jar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://cdn-blog.oss-cn-beijing.aliyuncs.com/k2p-frp/atlassian-universal-plugin-manager-plugin-2.22.jar</span><br></pre></td></tr></table></figure><p>atlassian-extras-decoder-v2-3.2.jar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://cdn-blog.oss-cn-beijing.aliyuncs.com/k2p-frp/atlassian-extras-decoder-v2-3.2.jar</span><br></pre></td></tr></table></figure><p>进入confluence容器命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it confluence /bin/sh</span><br></pre></td></tr></table></figure><p>用下载的文件替换atlassian-extras-decoder-v2-3.x.jar/atlassian-universal-plugin-manager-plugin-2.22.x.jar文件（该文件下载到<code>/opt``下，替换前必须做之前的文件备份，方便回退）</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">备份要替换的文件</span></span><br><span class="line">mv /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.3.0.jar   /mnt/</span><br><span class="line">mv /opt/atlassian/confluence/confluence/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.5.jar /mnt</span><br></pre></td></tr></table></figure><p>备份好文件后，退出confluence容器。拷贝下载的文件到confluence容器中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将下载的破解文件替换对应的jar</span></span><br><span class="line">docker cp atlassian-extras-decoder-v2-3.2.jar confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/</span><br><span class="line">docker cp atlassian-universal-plugin-manager-plugin-2.22.jar  confluence:/opt/atlassian/confluence/confluence/WEB-INF/atlassian-bundled-plugins/</span><br></pre></td></tr></table></figure><p>重新启动confluence容器。</p><p>然后继续访问<a href="http://172.16.220.129:8090/" target="_blank" rel="noopener">http://ip:8090</a>，接着注册confluence的key</p><p><img src="/articles/f9f96949/5.png" alt="img"></p><p>下面的操作需要在翻墙的前提下进行，使用google邮箱注册。</p><p><img src="/articles/f9f96949/6.png" alt="img"></p><p><img src="/articles/f9f96949/7.png" alt="img"></p><p><img src="/articles/f9f96949/8.png" alt="img"></p><p><img src="/articles/f9f96949/9.png" alt="img"></p><p><img src="/articles/f9f96949/10.png" alt="img"></p><p><img src="/articles/f9f96949/11.png" alt="img"></p><p><img src="/articles/f9f96949/12.png" alt="img"></p><p><strong>稍微等一会儿，就会自动弹出下面的信息，点击”Yes”</strong></p><p><img src="/articles/f9f96949/13.png" alt="img"></p><p><img src="/articles/f9f96949/14.png" alt="img"></p><p><img src="/articles/f9f96949/15.png" alt="img"></p><p><img src="/articles/f9f96949/16.png" alt="img"></p><p>再连接数据库时，需要修改数据库的隔离级别。操作详见：<a href="https://blog.csdn.net/taylor_tao/article/details/7063639" target="_blank" rel="noopener">https://blog.csdn.net/taylor_tao/article/details/7063639</a></p><p><img src="/articles/f9f96949/17.png" alt="img"></p><p><img src="/articles/f9f96949/18.png" alt="img"></p><p><img src="/articles/f9f96949/19.png" alt="img"></p><p><img src="/articles/f9f96949/20.png" alt="img"></p><p><img src="/articles/f9f96949/21.png" alt="img"></p><p><img src="/articles/f9f96949/22.png" alt="img"></p><p><img src="/articles/f9f96949/23.png" alt="img"></p><p><img src="/articles/f9f96949/24.png" alt="img"></p><p><img src="/articles/f9f96949/25.png" alt="img"></p><p><strong>下面说下confluence邮箱功能（不多赘述，直接看截图）：</strong></p><p><strong><img src="/articles/f9f96949/26.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/27.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/28.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/29.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/30.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/31.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/32.jpg" alt="img"></strong></p><p><img src="/articles/f9f96949/33.jpg" alt="img"></p><p><strong>有上面配置后，就已经配置好了confluence的邮件功能了。下面说下在管理员账号下创建或邀请其他用户的做法：</strong></p><p><strong><img src="/articles/f9f96949/34.jpg" alt="img"></strong></p><p><strong>一般要禁止用户注册自己注册，要在管理员账号下创建新用户或邀请新用户（通过邮件的方式）</strong></p><p><strong><img src="/articles/f9f96949/35.jpg" alt="img"></strong></p><p><strong>如下在管理员账号下”添加用户”,添加后给用户设置一个初始密码，用户收到邮件后，可以登陆修改密码。</strong></p><p><strong><img src="/articles/f9f96949/36.jpg" alt="img"></strong></p><p><strong><img src="/articles/f9f96949/37.jpg" alt="img"></strong></p><p><strong>———————————————————————————————————–</strong><br><strong>也可以通过”邀请用户”的方式来创建新用户，用户收到邮件后，按照邮件提示进行用户创建</strong></p><p><strong><img src="/articles/f9f96949/38.jpg" alt="img"></strong></p><p><strong>———————————————————————————————————–</strong><br><strong>邮件功能设置后，在分享文章的时候，可以以邮件的方式分享到用户的邮箱里。</strong></p><p><img src="/articles/f9f96949/39.jpg" alt="img"></p><p>注意：在创建文章时 ，左边的页面或子页面的创建时，可以点击左下角的”空间管理”-“配置侧边栏”<br><strong>到此，confluence的安装破解已经完全搞定！后续再介绍下confluence跟jira接连、及其它们对接LDAP的做法！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;confluence是一个专业的企业知识管理与协同软件，可以用于构建企业wiki。通过它可以实现团队成员之间的协作和知识共享。现在大多数公司都会部署一套confluence，用作内部wiki。现在confluence已收费，那么下面将介绍下Docker安装破解confluence的操作记录。&lt;/p&gt;
    
    </summary>
    
      <category term="应用运维" scheme="https://wandouduoduo.netlify.com/categories/%E5%BA%94%E7%94%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Docker" scheme="https://wandouduoduo.netlify.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster集群[四]:redis-cluster集群配置</title>
    <link href="https://wandouduoduo.netlify.com/articles/d2e62a87.html"/>
    <id>https://wandouduoduo.netlify.com/articles/d2e62a87.html</id>
    <published>2019-07-30T10:01:08.000Z</published>
    <updated>2019-08-07T02:06:43.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis分片："><a href="#Redis分片：" class="headerlink" title="Redis分片："></a>Redis分片：</h2><p>为什么要分片：随着Redis存储的数据越来越庞大，会导致Redis的性能越来越差！</p><p>目前分片的方法：</p><p>1,客户端分片</p><p>在应用层面分片，程序里指定什么数据存放在那个Redis  优势：比较灵活    缺点：加个节点扩容就很费劲</p><p>2, 代理Proxy分片  第三方的Twemproxy  使用代理的缺点，你代理什么性能，那么你整个Redis的性能就是什么样的！</p><p>3, redis cluster</p><p>4, codis （豌豆荚）开源</p> <a id="more"></a><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://redisdoc.com/topic/cluster-tutorial.html#id2" target="_blank" rel="noopener">Redis cluster</a></p><h2 id="集群分片原理："><a href="#集群分片原理：" class="headerlink" title="集群分片原理："></a>集群分片原理：</h2><p>Redis 集群使用数据分片（sharding）而非一致性哈希（consistency hashing）来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot），</p><p>数据库中的每个键都属于这 16384 个哈希槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽，</p><p>其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分哈希槽。 举个例子， 一个集群可以有三个哈希槽， 其中：</p><pre><code>* 节点 A 负责处理 0 号至 5500 号哈希槽。* 节点 B 负责处理 5501 号至 11000 号哈希槽。* 节点 C 负责处理 11001 号至 16384 号哈希槽。</code></pre><p>这种将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点。 比如说：</p><pre><code>* 如果用户将新节点 D 添加到集群中， 那么集群只需要将节点 A 、B 、 C 中的某些槽移动到节点 D 就可以了。* 与此类似， 如果用户要从集群中移除节点 A ， 那么集群只需要将节点 A 中的所有哈希槽移动到节点 B 和节点 C ， 然后再移除空白（不包含任何哈希槽）的节点 A 就可以了。</code></pre><p>因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。</p><p>Redis集群中的主从复制<br>为了使得集群在一部分节点下线或者无法与集群的大多数（majority）节点进行通讯的情况下， 仍然可以正常运作，</p><p>Redis 集群对节点使用了主从复制功能： 集群中的每个节点都有 1 个至 N 个复制品（replica）， 其中一个复制品为主节点（master）， 而其余的 N-1 个复制品为从节点（slave）。<br>在之前列举的节点 A 、B 、C 的例子中， 如果节点 B 下线了， 那么集群将无法正常运行， 因为集群找不到节点来处理 5501 号至 11000 号的哈希槽。<br>另一方面， 假如在创建集群的时候（或者至少在节点 B 下线之前）， 我们为主节点 B 添加了从节点 B1 ， 那么当主节点 B 下线的时候， 集群就会将 B1 设置为新的主节点，</p><p>并让它代替下线的主节点 B ， 继续处理 5501 号至 11000 号的哈希槽， 这样集群就不会因为主节点 B 的下线而无法正常运作了。</p><p>不过如果节点 B 和 B1 都下线的话， Redis 集群还是会停止运作。</p><p>Redis 集群的一致性保证（guarantee）<br>Redis 集群不保证数据的强一致性（strong consistency）： 在特定条件下， Redis 集群可能会丢失已经被执行过的写命令。<br>使用异步复制（asynchronous replication）是 Redis 集群可能会丢失写命令的其中一个原因。 考虑以下这个写命令的例子：</p><pre><code>* 客户端向主节点 B 发送一条写命令。* 主节点 B 执行写命令，并向客户端返回命令回复。* 主节点 B 将刚刚执行的写命令复制给它的从节点 B1 、 B2 和 B3 。</code></pre><p>如你所见， 主节点对命令的复制工作发生在返回命令回复之后， 因为如果每次处理命令请求都需要等待复制操作完成的话， 那么主节点处理命令请求的速度将极大地降低 —— 我们必须在性能和一致性之间做出权衡。<br>如果真的有必要的话， Redis 集群可能会在将来提供同步地（synchronou）执行写命令的方法。<br>Redis 集群另外一种可能会丢失命令的情况是， 集群出现网络分裂（network partition）， 并且一个客户端与至少包括一个主节点在内的少数（minority）实例被孤立。<br>举个例子， 假设集群包含 A 、 B 、 C 、 A1 、 B1 、 C1 六个节点， 其中 A 、B 、C 为主节点， 而 A1 、B1 、C1 分别为三个主节点的从节点， 另外还有一个客户端 Z1 。<br>假设集群中发生网络分裂， 那么集群可能会分裂为两方， 大多数（majority）的一方包含节点 A 、C 、A1 、B1 和 C1 ， 而少数（minority）的一方则包含节点 B 和客户端 Z1 。<br>在网络分裂期间， 主节点 B 仍然会接受 Z1 发送的写命令：</p><pre><code>* 如果网络分裂出现的时间很短， 那么集群会继续正常运行；* 但是， 如果网络分裂出现的时间足够长， 使得大多数一方将从节点 B1 设置为新的主节点， 并使用 B1 来代替原来的主节点 B ， 那么 Z1 发送给主节点 B 的写命令将丢失。</code></pre><p>注意， 在网络分裂出现期间， 客户端 Z1 可以向主节点 B 发送写命令的最大时间是有限制的， 这一时间限制称为节点超时时间（node timeout）， 是 Redis 集群的一个重要的配置选项：</p><ul><li><p>对于大多数一方来说， 如果一个主节点未能在节点超时时间所设定的时限内重新联系上集群， 那么集群会将这个主节点视为下线， 并使用从节点来代替这个主节点继续工作。</p></li><li><p>对于少数一方， 如果一个主节点未能在节点超时时间所设定的时限内重新联系上集群， 那么它将停止处理写命令， 并向客户端报告错误。</p></li></ul><h2 id="Redis-Cluster安装："><a href="#Redis-Cluster安装：" class="headerlink" title="Redis Cluster安装："></a>Redis Cluster安装：</h2><p>1、安装环境：首先确保安装了Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">mkdir `seq 7001 7008`</span><br><span class="line">cp /etc/redis/6379.conf ./</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">配置文件里：</span><br><span class="line"> </span><br><span class="line">新增这三行即可</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"> </span><br><span class="line">并且报：AOF是开启的</span><br><span class="line">appendonly yes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">把相关的信息都统一修改为：6379  （端口、日志文件、存储dir持久化）</span></span><br><span class="line">sed  's/6379/7001/g' 6379.conf &gt; 7001/redis.conf</span><br><span class="line">sed  's/6379/7002/g' 6379.conf &gt; 7002/redis.conf</span><br><span class="line">sed  's/6379/7003/g' 6379.conf &gt; 7003/redis.conf</span><br><span class="line">sed  's/6379/7004/g' 6379.conf &gt; 7004/redis.conf</span><br><span class="line">sed  's/6379/7005/g' 6379.conf &gt; 7005/redis.conf</span><br><span class="line">sed  's/6379/7006/g' 6379.conf &gt; 7006/redis.conf</span><br><span class="line">sed  's/6379/7007/g' 6379.conf &gt; 7007/redis.conf</span><br><span class="line">sed  's/6379/7008/g' 6379.conf &gt; 7008/redis.conf</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">for i in `seq 7001 7009`;do cd /opt/$i &amp;&amp; /usr/local/bin/redis-server redis.conf ; done</span><br></pre></td></tr></table></figure><p>2、安装管理工具，源码自带了一个管理Cluster集群的工具是用ruby写的所以需要安装ruby</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ruby rubygems</span><br><span class="line"><span class="meta">#</span><span class="bash">安装ruby的管理工具redis</span></span><br><span class="line">gem install redis</span><br></pre></td></tr></table></figure><p> 3、复制管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-3.0.4/src/redis-trib.rb /usr/local/bin/redis-trib</span><br><span class="line"><span class="meta">#</span><span class="bash">查看redis-trib帮助</span></span><br><span class="line">redis-trib help</span><br></pre></td></tr></table></figure><p> 4、创建集群  7001-7006   6个redis为集群node，7007-7008   “2个redis为back node”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@server.tianshuai.com]$ redis-trib create --replicas 1 192.168.0.201:7001 192.168.0.201:7002 192.168.0.201:7003 192.168.0.201:7004 192.168.0.201:7005 192.168.0.201:7006</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Creating cluster</span></span><br><span class="line">Connecting to node 192.168.0.201:7001: OK</span><br><span class="line">Connecting to node 192.168.0.201:7002: OK</span><br><span class="line">Connecting to node 192.168.0.201:7003: OK</span><br><span class="line">Connecting to node 192.168.0.201:7004: OK</span><br><span class="line">Connecting to node 192.168.0.201:7005: OK</span><br><span class="line">Connecting to node 192.168.0.201:7006: OK</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Using 3 masters:</span><br><span class="line">192.168.0.201:7001</span><br><span class="line">192.168.0.201:7002</span><br><span class="line">192.168.0.201:7003                                                                         </span><br><span class="line">Adding replica 192.168.0.201:7004 to 192.168.0.201:7001</span><br><span class="line">Adding replica 192.168.0.201:7005 to 192.168.0.201:7002</span><br><span class="line">Adding replica 192.168.0.201:7006 to 192.168.0.201:7003</span><br><span class="line">M: 699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001                          </span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: 96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004                          </span><br><span class="line">   replicates 699f318027f87f3c49d48e44116820e673bd306a</span><br><span class="line">S: d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005</span><br><span class="line">   replicates 96892fd3f51292e922383ddb6e8018e2f772deed</span><br><span class="line">S: a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006</span><br><span class="line">   replicates f702fd03c1e3643db7e385915842533ba5aab98d</span><br><span class="line">Can I set the above configuration? (type 'yes' to accept):  YES</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join...</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.0.201:7001)</span></span><br><span class="line">M: 699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: 96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">M: d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   replicates 699f318027f87f3c49d48e44116820e673bd306a</span><br><span class="line">M: d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   replicates 96892fd3f51292e922383ddb6e8018e2f772deed</span><br><span class="line">M: a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006</span><br><span class="line">   slots: (0 slots) master</span><br><span class="line">   replicates f702fd03c1e3643db7e385915842533ba5aab98d</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">create --replicas 1    这里--replicas 1 是指定复制几份，相当于每个master有几个从</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redis cluaster最低要求有3个master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">master的定义  host1:port host2:port  host3:port如果--replicas 1 那么：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">host1:port == master  host2:port 是：host1:port从</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果--replicas 2 那么：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">host1:port == master host2:port &amp; host3:port 是host1:port 的从</span></span><br><span class="line"> </span><br><span class="line">M: 这个是cluaster 自动生成的ID 集群在通信的时候是使用这个ID来区分的</span><br></pre></td></tr></table></figure><p> 4、连接cluster（连接任意的Cluster集群中的服务器即可）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -h 192.168.0.201 -p 7001   的需要加-c的参数   可以连接集群的任意节点！</span><br><span class="line"> </span><br><span class="line">192.168.0.201:7001&gt; cluster nodes  查看cluster节点</span><br><span class="line">f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003 master - 0 1444813870405 3 connected 10923-16383</span><br><span class="line">699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001 myself,master - 0 0 1 connected 0-5460</span><br><span class="line">d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004 slave 699f318027f87f3c49d48e44116820e673bd306a 0 1444813870105 4 connected</span><br><span class="line">a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006 slave f702fd03c1e3643db7e385915842533ba5aab98d 0 1444813868605 6 connected</span><br><span class="line">96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002 master - 0 1444813869405 2 connected 5461-10922</span><br><span class="line">d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005 slave 96892fd3f51292e922383ddb6e8018e2f772deed 0 1444813869105 5 connected</span><br><span class="line"> </span><br><span class="line">192.168.0.201:7001&gt; cluster info  查看cluster信息</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_sent:1809</span><br><span class="line">cluster_stats_messages_received:1809</span><br></pre></td></tr></table></figure><p>5、集群扩容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">redis-trib add-node 192.168.0.201:7007 192.168.0.201:7001 </span><br><span class="line">命令解释：</span><br><span class="line">redis-trib add-node 要加的节点和端口  现有任意节点和端口</span><br><span class="line"> </span><br><span class="line">加完之后查看结果：</span><br><span class="line">192.168.0.201:7001&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:7</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_sent:2503</span><br><span class="line">cluster_stats_messages_received:2503</span><br><span class="line">192.168.0.201:7001&gt; cluster nodes</span><br><span class="line">f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003 master - 0 1444814061587 3 connected 10923-16383</span><br><span class="line">699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001 myself,master - 0 0 1 connected 0-5460</span><br><span class="line">d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004 slave 699f318027f87f3c49d48e44116820e673bd306a 0 1444814062087 4 connected</span><br><span class="line">a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006 slave f702fd03c1e3643db7e385915842533ba5aab98d 0 1444814061087 6 connected</span><br><span class="line">a1301a9e1fd24099cd8dc49c47f2263e3124e4d6 192.168.0.201:7007 master - 0 1444814063089 0 connected</span><br><span class="line">96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002 master - 0 1444814062589 2 connected 5461-10922</span><br><span class="line">d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005 slave 96892fd3f51292e922383ddb6e8018e2f772deed 0 1444814061587 5 connected</span><br><span class="line">192.168.0.201:7001&gt;</span><br></pre></td></tr></table></figure><p> 6、新加上来没有数据-及没有槽位，我们可以用命令让他重新分片（分片）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib reshard 192.168.0.201:7007</span><br></pre></td></tr></table></figure><p> 7、在添加一个服务器做从</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">在添加一个7008 让他做7008的从</span><br><span class="line">[root@server.tianshuai.com]$ redis-trib add-node 192.168.0.201:7008 192.168.0.201:7001</span><br><span class="line">加进来之后默认就是mater但是他没有任何的槽位</span><br><span class="line">192.168.0.201:7001&gt; cluster nodes</span><br><span class="line">f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003 master - 0 1444814915795 3 connected 11089-16383</span><br><span class="line">699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001 myself,master - 0 0 1 connected 166-5460</span><br><span class="line">d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004 slave 699f318027f87f3c49d48e44116820e673bd306a 0 1444814917298 4 connected</span><br><span class="line">a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006 slave f702fd03c1e3643db7e385915842533ba5aab98d 0 1444814916297 6 connected</span><br><span class="line">a02a66e0286ee2f0a9b5380f7584b9b20dc032ff 192.168.0.201:7008 master - 0 1444814915796 0 connected</span><br><span class="line">a1301a9e1fd24099cd8dc49c47f2263e3124e4d6 192.168.0.201:7007 master - 0 1444814915295 7 connected 0-165 5461-5627 10923-11088</span><br><span class="line">96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002 master - 0 1444814916898 2 connected 5628-10922</span><br><span class="line">d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005 slave 96892fd3f51292e922383ddb6e8018e2f772deed 0 1444814916798 5 connected</span><br><span class="line"> </span><br><span class="line">然后连接到7008的这个redis实例上，然后复制7007的ID</span><br><span class="line">192.168.0.201:7008&gt; cluster replicate a1301a9e1fd24099cd8dc49c47f2263e3124e4d6</span><br><span class="line">OK</span><br><span class="line">然后看下：</span><br><span class="line">192.168.0.201:7008&gt; cluster nodes</span><br><span class="line">699f318027f87f3c49d48e44116820e673bd306a 192.168.0.201:7001 master - 0 1444815074072 1 connected 166-5460</span><br><span class="line">a1301a9e1fd24099cd8dc49c47f2263e3124e4d6 192.168.0.201:7007 master - 0 1444815073071 7 connected 0-165 5461-5627 10923-11088</span><br><span class="line">96892fd3f51292e922383ddb6e8018e2f772deed 192.168.0.201:7002 master - 0 1444815073671 2 connected 5628-10922</span><br><span class="line">a77b16c4f140c0f5c17c907ce7ee5e42ee2a7b02 192.168.0.201:7006 slave f702fd03c1e3643db7e385915842533ba5aab98d 0 1444815073571 3 connected</span><br><span class="line">f702fd03c1e3643db7e385915842533ba5aab98d 192.168.0.201:7003 master - 0 1444815072571 3 connected 11089-16383</span><br><span class="line">d0994ce7ef68c0834030334afcd60013773f2e77 192.168.0.201:7004 slave 699f318027f87f3c49d48e44116820e673bd306a 0 1444815073071 1 connected</span><br><span class="line">d880581504caff4a002242b2b259d5242b8569fc 192.168.0.201:7005 slave 96892fd3f51292e922383ddb6e8018e2f772deed 0 1444815073871 2 connected</span><br><span class="line">a02a66e0286ee2f0a9b5380f7584b9b20dc032ff 192.168.0.201:7008 myself,slave a1301a9e1fd24099cd8dc49c47f2263e3124e4d6 0 0 0 connected</span><br><span class="line">192.168.0.201:7008&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">192.168.7.107:7002&gt; set key101 shuaige</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [1601] located at 192.168.7.107:7001</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.107:7001&gt; set key102 shuaige</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [13858] located at 192.168.7.107:7003</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.107:7003&gt; set key103 shuaige</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [9731] located at 192.168.7.107:7002</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.107:7002&gt; set key104 shuaige</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [5860] located at 192.168.7.107:7007</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.107:7007&gt; set key105 shuaige</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [1733] located at 192.168.7.107:7001</span></span><br><span class="line">OK</span><br><span class="line">192.168.7.107:7001&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis分片：&quot;&gt;&lt;a href=&quot;#Redis分片：&quot; class=&quot;headerlink&quot; title=&quot;Redis分片：&quot;&gt;&lt;/a&gt;Redis分片：&lt;/h2&gt;&lt;p&gt;为什么要分片：随着Redis存储的数据越来越庞大，会导致Redis的性能越来越差！&lt;/p&gt;
&lt;p&gt;目前分片的方法：&lt;/p&gt;
&lt;p&gt;1,客户端分片&lt;/p&gt;
&lt;p&gt;在应用层面分片，程序里指定什么数据存放在那个Redis  优势：比较灵活    缺点：加个节点扩容就很费劲&lt;/p&gt;
&lt;p&gt;2, 代理Proxy分片  第三方的Twemproxy  使用代理的缺点，你代理什么性能，那么你整个Redis的性能就是什么样的！&lt;/p&gt;
&lt;p&gt;3, redis cluster&lt;/p&gt;
&lt;p&gt;4, codis （豌豆荚）开源&lt;/p&gt;
    
    </summary>
    
      <category term="数据库运维" scheme="https://wandouduoduo.netlify.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://wandouduoduo.netlify.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster集群[三]:redis主从复制</title>
    <link href="https://wandouduoduo.netlify.com/articles/1e52f2e4.html"/>
    <id>https://wandouduoduo.netlify.com/articles/1e52f2e4.html</id>
    <published>2019-07-30T09:54:51.000Z</published>
    <updated>2019-08-07T02:06:43.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis主从复制原理："><a href="#Redis主从复制原理：" class="headerlink" title="Redis主从复制原理："></a>Redis主从复制原理：</h2><p>通过把这个RDB文件或AOF文件传给slave服务器，slave服务器重新加载RDB文件，来实现复制的功能！</p><p>复制的话：主服务器可以有多个从服务器！！！  不仅这样从服务器还可以有从服务器，可以做成星状的结构！</p><p>复制的话也不会阻塞进程，同样fork一个子进程来做！</p><p>复制的原理：</p><p>当建立一个从服务器后，从服务器会想主服务器发送一个SYNC的命令，主服务器接收到SYNC命令之后会执行BGSAVE</p><p>然后保存到RDB文件，然后发送到从服务器！收到RDB文件然后就载入到内存！</p><p>最早不支持增量，到2.8之后就支持增量了！</p><a id="more"></a><h2 id="Redis主从配置："><a href="#Redis主从配置：" class="headerlink" title="Redis主从配置："></a>Redis主从配置：</h2><p>配置非常简单：</p><p>我要把：192.168.0.201  6380 作为192.168.0.201 6379的从就一条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.201:6380&gt; slaveof 192.168.0.201 6379</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">然后使用INFO查看下：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.0.201</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:85</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">然后在到主的上面看下：</span></span><br><span class="line">15:38 [root@server.tianshuai.com]$ redis-cli -h 192.168.0.201 -p 6379</span><br><span class="line">192.168.0.201:6379&gt; INFO</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.0.201,port=6380,state=online,offset=183,lag=1    #</span><br><span class="line">master_repl_offset:183</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:182</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从2.61 的时候！从是仅读的</span></span><br><span class="line">192.168.0.201:6380&gt; SET key1 2</span><br><span class="line">(error) READONLY You can't write against a read only slave.</span><br><span class="line">192.168.0.201:6380&gt;&lt;br&gt;##现实工作场景中，写和读是1：10的吗，我们就可以，设置多1个主多个从这样，进行读写分离！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis主从复制原理：&quot;&gt;&lt;a href=&quot;#Redis主从复制原理：&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制原理：&quot;&gt;&lt;/a&gt;Redis主从复制原理：&lt;/h2&gt;&lt;p&gt;通过把这个RDB文件或AOF文件传给slave服务器，slave服务器重新加载RDB文件，来实现复制的功能！&lt;/p&gt;
&lt;p&gt;复制的话：主服务器可以有多个从服务器！！！  不仅这样从服务器还可以有从服务器，可以做成星状的结构！&lt;/p&gt;
&lt;p&gt;复制的话也不会阻塞进程，同样fork一个子进程来做！&lt;/p&gt;
&lt;p&gt;复制的原理：&lt;/p&gt;
&lt;p&gt;当建立一个从服务器后，从服务器会想主服务器发送一个SYNC的命令，主服务器接收到SYNC命令之后会执行BGSAVE&lt;/p&gt;
&lt;p&gt;然后保存到RDB文件，然后发送到从服务器！收到RDB文件然后就载入到内存！&lt;/p&gt;
&lt;p&gt;最早不支持增量，到2.8之后就支持增量了！&lt;/p&gt;
    
    </summary>
    
      <category term="数据库运维" scheme="https://wandouduoduo.netlify.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://wandouduoduo.netlify.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster集群[二]:redis持久化</title>
    <link href="https://wandouduoduo.netlify.com/articles/8d5e3656.html"/>
    <id>https://wandouduoduo.netlify.com/articles/8d5e3656.html</id>
    <published>2019-07-30T07:14:21.000Z</published>
    <updated>2019-08-07T02:06:43.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis持久化原理："><a href="#Redis持久化原理：" class="headerlink" title="Redis持久化原理："></a>Redis持久化原理：</h2><p>Redis支持两种持久化：<strong>RDB</strong>和<strong>AOF</strong>模式</p><a id="more"></a><h4 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a><strong>名词解释：</strong></h4><p><strong>RDB</strong>：持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。<br><strong>AOF</strong>：持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。</p><p><strong>AOF</strong> 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite）</p><p>使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。</p><p>PDB和AOF的优先级：</p><p>如果同时开启RDB和AOF模式，AOF的优先级要比RDB高：<br>Redis 还可以同时使用 AOF 持久化和 RDB 持久化。 在这种情况下， 当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集。</p><p>因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。</p><p>AOF 的方式有点像ORCAL的逻辑备库！<br>AOF redis 还会在后台对数据进行重写，比如set key1 ， set key1 ,其实第一次的set key1 没用，这样就可以把第一次set key1 删掉了。这样保存下来的数据集就很小了可以压缩了！<br>你甚至可以关闭持久化功能，让数据只在服务器运行时存在。</p><h4 id="RDB-amp-AOF优缺点"><a href="#RDB-amp-AOF优缺点" class="headerlink" title="RDB&amp;AOF优缺点"></a><strong>RDB&amp;AOF优缺点</strong></h4><p><strong>RDB</strong>的优缺点：<br>优点：<br>1、紧凑易于备份，他就一个文件。<br>2、RDB可以最大化redis性能、父进程无需做任何操作只需要for一个子进程即可<br>3、恢复比AOF块</p><p>缺点：<br>1、数据完整性：如果非常注重数据的完整性，那么RDB就不行，虽然他是一个point-in-time 的快照方式，但是在快照的过程中，redis重启了，那么在快照中的这些数据将会丢失<br>2、数据非常庞大后，非常耗CPU和时间，那么redis讲可能down掉1秒钟设置更长。</p><p><strong>AOF</strong>的优缺点：<br>优点：<br>1、 使用 AOF 持久化会让 Redis 变得非常耐久，AOF默认的每一秒追加一次也可以修改他的方式没执行一次命令追加一次，所以你最多丢失1秒钟的数据<br>2、 AOF 文件是一个只进行追加操作的日志文件（append only log）<br>3、 Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写</p><p>缺点：<br>1、对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。<br>2、 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB</p><h4 id="RDB-amp-AOF-持久化原理"><a href="#RDB-amp-AOF-持久化原理" class="headerlink" title="RDB &amp; AOF 持久化原理"></a><strong>RDB &amp; AOF 持久化原理</strong></h4><p>快照的运行方式：</p><p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作：</p><ol><li>Redis 调用 fork() ，同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li><li>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。</li></ol><p>AOF 重写和 RDB 创建快照一样，都巧妙地利用了写时复制机制。</p><p>以下是 AOF 重写的执行步骤：</p><ol><li>Redis 执行 fork() ，现在同时拥有父进程和子进程。</li><li>子进程开始将新 AOF 文件的内容写入到临时文件。</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li><li>搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li></ol><p>AOF重写</p><p>因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。<br>举个例子， 如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。<br>然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。<br>为了处理这种情况， Redis 支持一种有趣的特性： 可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。<br>执行 BGREWRITEAOF 命令， Redis 将生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。<br>Redis 2.2 需要自己手动执行 BGREWRITEAOF 命令； Redis 2.4 则可以自动触发 AOF 重写， 具体信息请查看 2.4 的示例配置文件。</p><h2 id="Rdis持久化设置："><a href="#Rdis持久化设置：" class="headerlink" title="Rdis持久化设置："></a>Rdis持久化设置：</h2><h4 id="查看下面配置文件："><a href="#查看下面配置文件：" class="headerlink" title="查看下面配置文件："></a>查看下面配置文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认Redis是开启的RDB模式的持久化</span></span><br><span class="line">vim /etc/redis/6379.conf</span><br><span class="line">=============================================================</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### SNAPSHOTTING  ################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Save the DB on disk:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Will save the DB <span class="keyword">if</span> both the given number of seconds and the given</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   after 900 sec (15 min) <span class="keyword">if</span> at least 1 key changed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   after 300 sec (5 min) <span class="keyword">if</span> at least 10 keys changed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   after 60 sec <span class="keyword">if</span> at least 10000 keys changed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Note: you can <span class="built_in">disable</span> saving completely by commenting out all <span class="string">"save"</span> lines.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   points by adding a save directive with a single empty string argument</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   like <span class="keyword">in</span> the following example:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   save <span class="string">""</span></span></span><br><span class="line"> </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"> </span><br><span class="line">================================================================</span><br><span class="line"><span class="meta">#</span><span class="bash">上面3个save 是或的关系</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">   save &lt;seconds&gt; &lt;changes&gt;   <span class="comment">###格式！</span></span></span><br><span class="line">解释：</span><br><span class="line"><span class="meta">#</span><span class="bash">   after 900 sec (15 min) <span class="keyword">if</span> at least 1 key changed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   after 300 sec (5 min) <span class="keyword">if</span> at least 10 keys changed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   after 60 sec <span class="keyword">if</span> at least 10000 keys changed</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">900 sec内有1个key发生了改变就做一次快照 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">或  300sec 内有10个keys发生了改变做一次快照   </span></span><br><span class="line"><span class="meta">#</span><span class="bash">或60 sec内 10000 keys发生了改变做一次快照</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">快照原理：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">forker出一个进程，是当前进程的一个副本相当于子进程，不会影响你当前运行的进程。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">当子进程写的时候会有一个临时的文件，当子进程写完之后会把这个</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">临时的文件move替换老的文件，所以这个rdb的文件任何时间都是一个完整的可用的副本！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">你写的时候不会影响RDB这个文件，因为forker出的子进程正在写的是一个临时文件！</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">但是如果如果故障了，你这个保存的时间是你开始快照那一刻那个时间，你快照到快照完毕那一段时间的数据就丢失了！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果想禁用持久化把这三行删了就行了</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h4 id="快照保存在那里呢？"><a href="#快照保存在那里呢？" class="headerlink" title="快照保存在那里呢？"></a>快照保存在那里呢？</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> The filename <span class="built_in">where</span> to dump the DB</span></span><br><span class="line">dbfilename dump.rdb   #如果你启用了多个快照名称，可以使用端口好来定义比如：dump_6379.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Note that you must specify a directory here, not a file name.</span></span><br><span class="line">dir ./  #不仅仅是RDB模式下的DB存放在这个目录AOF模式下也是存放在这个目录的，建议存放在你指定的地方！</span><br><span class="line"> </span><br><span class="line">比如：</span><br><span class="line">dir /opt/redis/</span><br><span class="line"> </span><br><span class="line">比如我上面指定了：</span><br><span class="line"><span class="meta">#</span><span class="bash"> The filename <span class="built_in">where</span> to dump the DB</span></span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Note that you must specify a directory here, not a file name.</span></span><br><span class="line">dir /opt/redis/</span><br></pre></td></tr></table></figure><h4 id="手动在Redis中保存"><a href="#手动在Redis中保存" class="headerlink" title="手动在Redis中保存"></a>手动在Redis中保存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SAVE</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line">下目录下面有没有修改：</span><br><span class="line">-rw-r--r-- 1 root root 27 Oct 14 13:35 dump_6379.rdb 当前时间创建</span><br><span class="line">在设置个key看下：</span><br><span class="line">127.0.0.1:6379&gt; SET key 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SAVE</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line">-rw-r--r-- 1 root root 27 Oct 14 13:37 dump_6379.rdb</span><br><span class="line"> </span><br><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">SAVE和BGSAVE有什么区别：SAVE 是阻塞的当你直接执行SAVE的时候他就不干活了，BGSAVE是在后台执行。forker一个子进程来进行SAVE！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">SAVE的使用场景仅限于：当Redis需要迁移的时候，Redis没有数据写入并且可以停的时候使用！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">测试添加一个：key然后停掉看看！不保存：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">目前的key是：</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) "key"</span><br><span class="line">2) "key2"</span><br><span class="line">3) "key3"</span><br><span class="line"> </span><br><span class="line">127.0.0.1:6379&gt; SET key4 4</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">杀掉，重启之后发现设置的key丢失了。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">所以当redis异常挂掉之后，没有SAVE收据！</span></span><br></pre></td></tr></table></figure><h4 id="启用了AOF后"><a href="#启用了AOF后" class="headerlink" title="启用了AOF后"></a>启用了AOF后</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">给这个文件追加，把所有的命令都写到一个文件里面，你执行一个我写一个。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">恢复的话在执行一遍不就行了吗！非常简单 （但是恢复相对RDB模式回慢他相当于重新把AOF库里的记录重新往内存中写一边）</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">可以RDB和AOF同时使用！优点都占用了！但是也的根据业务来定！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">开启方法：修改配置文件</span></span><br><span class="line">appendonly yes  #改为yes</span><br><span class="line">appendfilename "appendonly.aof"  #文件名</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">工作原理：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">forker 一个子进程写到临时文件，写完之后就给父进程发一个信号，开始写到写完的这个过程还会有子进程给父进程发信号。先保存在内存里</span></span><br><span class="line"><span class="meta">#</span><span class="bash">但是他有个好的功能，重写，他会定时对aof进行重新，这样文件就会非常小！</span></span><br><span class="line"> </span><br><span class="line">测试：（他会根据Redis可识别的方式写入文件，不过大概人也能看懂）</span><br><span class="line">[root@192.168.7.107]$ cat appendonly.aof</span><br><span class="line">*2</span><br><span class="line"><span class="meta">$</span><span class="bash">6</span></span><br><span class="line">SELECT</span><br><span class="line"><span class="meta">$</span><span class="bash">1</span></span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">SET</span><br><span class="line"><span class="meta">$</span><span class="bash">4</span></span><br><span class="line">kye1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis持久化原理：&quot;&gt;&lt;a href=&quot;#Redis持久化原理：&quot; class=&quot;headerlink&quot; title=&quot;Redis持久化原理：&quot;&gt;&lt;/a&gt;Redis持久化原理：&lt;/h2&gt;&lt;p&gt;Redis支持两种持久化：&lt;strong&gt;RDB&lt;/strong&gt;和&lt;strong&gt;AOF&lt;/strong&gt;模式&lt;/p&gt;
    
    </summary>
    
      <category term="数据库运维" scheme="https://wandouduoduo.netlify.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://wandouduoduo.netlify.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-cluster集群[一]:redis安装及redis数据类型</title>
    <link href="https://wandouduoduo.netlify.com/articles/88f598bf.html"/>
    <id>https://wandouduoduo.netlify.com/articles/88f598bf.html</id>
    <published>2019-07-30T06:25:29.000Z</published>
    <updated>2019-08-07T02:06:43.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis介绍："><a href="#Redis介绍：" class="headerlink" title="Redis介绍："></a>Redis介绍：</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h4><p>redis 是一个开源的、使用C语言编写的、支持网络交互的、可以基于内存也可以持久化的Key-Value数据库。</p><p>redis的源码非常简单，只要有时间看看谭浩强的C语言，在去看redis的源码能看懂50-60%。</p><p>redis目前最大的集群应该是新浪的应该。</p><p>redis目前是vmvaer来支持的，很多的开源软件都需要某些组织来支持的。如果一个开源软件没有金钱来支持的话很难走的持久</p><h4 id="Redis和Memcache对比"><a href="#Redis和Memcache对比" class="headerlink" title="Redis和Memcache对比"></a><strong>Redis和Memcache对比</strong></h4><p><img src="/articles/88f598bf/1.png" alt></p><p>持久化：以电商举例，session用memcache来做的，购物车用redis来做的，当你退出的时候会提示你购物车里的物品会在你退出后继续保存。相对来说memcache存储更单一化！</p><p>主从复制：redis的主从复制类似mysql的主从复制但是原理是不同的！</p><p>虚拟内存：说白了就是把内存里一些不用的东西放在硬盘上，最好不要用，降低效率，现在内存来说比较便宜。</p><a id="more"></a><h2 id="Redis安装-amp-基本操作："><a href="#Redis安装-amp-基本操作：" class="headerlink" title="Redis安装&amp;基本操作："></a>Redis安装&amp;基本操作：</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><h6 id="检查配置环境"><a href="#检查配置环境" class="headerlink" title="检查配置环境"></a>检查配置环境</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查gcc是否安装，如果没有安装：</span></span><br><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure><h6 id="下载安装Redis"><a href="#下载安装Redis" class="headerlink" title="下载安装Redis"></a>下载安装Redis</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">这里下载可以登录官网查看最新的Redis</span></span><br><span class="line">tar -xvf redis-3.0.4.tar.gz</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cd /opt/redis-3.0.4/src/</span><br><span class="line">make test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装中可能遇到的问题：</span></span><br><span class="line">zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line">zmalloc.h:55:2: error: #error "Newer version of jemalloc required"</span><br><span class="line"> </span><br><span class="line">Allocator</span><br><span class="line">---------------------------------------------------------------------------------------------------------</span><br><span class="line">Selecting a non-default memory allocator when building Redis is done by setting</span><br><span class="line">the `MALLOC` environment variable. Redis is compiled and linked against libc</span><br><span class="line">malloc by default, with the exception of jemalloc being the default on Linux</span><br><span class="line">systems. This default was picked because jemalloc has proven to have fewer</span><br><span class="line">fragmentation problems than libc malloc.</span><br><span class="line">To force compiling against libc malloc, use:</span><br><span class="line"><span class="meta">%</span><span class="bash"> make MALLOC=libc</span></span><br><span class="line">To compile against jemalloc on Mac OS X systems, use:</span><br><span class="line"><span class="meta">%</span><span class="bash"> make MALLOC=jemalloc</span></span><br><span class="line"> </span><br><span class="line">allocator（分配算符），如果有MALLOC这个环境变量，会有用这个环境变量的 去建立Redis。</span><br><span class="line">而且libc 并不是默认的分配器，默认的是jemalloc！</span><br><span class="line">因为jemalloc被证明有更少的fragmentation problems比libc。</span><br><span class="line"> </span><br><span class="line">但是如果你又没有jemalloc 而只有 libc 当然 make 出错。 所以加这么一个参数。</span><br><span class="line">make MALLOC=libc</span><br><span class="line">---------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h6 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">复制管理脚本</span></span><br><span class="line">cp /opt/redis-3.0.4/utils/redis_init_script /etc/init.d/redis   </span><br><span class="line">chmod +x /etc/init.d/redis</span><br><span class="line">mkdir /etc/redis</span><br><span class="line">cp /opt/redis-3.0.4/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><h6 id="修改redis启动模式"><a href="#修改redis启动模式" class="headerlink" title="修改redis启动模式"></a>修改redis启动模式</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认Redis启动的时候是启动在前台的，把他改为启动在后台</span></span><br><span class="line">vim /etc/redis/6379.conf</span><br><span class="line">daemonize no  改为 daemonize yes</span><br></pre></td></tr></table></figure><h6 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先修改Redis启动脚本：</span></span><br><span class="line">vim /etc/init.d/redis</span><br><span class="line"><span class="meta">#</span><span class="bash">chkconfig: 35 95 95  在第三行加上即可</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">添加系统服务：</span></span><br><span class="line">chkconfig --add redis</span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机启动：</span></span><br><span class="line">chkconfig redis on</span><br><span class="line"><span class="meta">#</span><span class="bash">检查服务状态：</span></span><br><span class="line">chkconfig --list redis</span><br></pre></td></tr></table></figure><h6 id="指定日志存放位置-amp-PID文件-amp-数据库文件存放位置（下一边写持久化）"><a href="#指定日志存放位置-amp-PID文件-amp-数据库文件存放位置（下一边写持久化）" class="headerlink" title="指定日志存放位置&amp;PID文件&amp;数据库文件存放位置（下一边写持久化）"></a>指定日志存放位置&amp;PID文件&amp;数据库文件存放位置（下一边写持久化）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/redis/6379.conf</span><br><span class="line"> </span><br><span class="line">logfile "/var/log/redis.log"  #指定日志文件如果不指定就会在控制台输出</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">dir ./   #这个是指默认的持久化配置文件放在那里！建议修改下！</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">pidfile如果不修改使用默认的话就会报错：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">原因是在/etc/init.d/redis里指定的默认PID是：PIDFILE=/var/run/redis_<span class="variable">$&#123;REDISPORT&#125;</span>.pid </span></span><br><span class="line"><span class="meta">#</span><span class="bash">但是默认配置文件：/etc/redis/6379.conf（咱们自己从解压包里复制的里的默认是：pidfile /var/run/redis.pid）</span></span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET 设置Key</span><br><span class="line">GET 判断Key的值</span><br><span class="line">EXISTS 判断Key是否存在</span><br><span class="line">KEYS * 显示所有的Key</span><br><span class="line">DEL 删除指定Key</span><br><span class="line">TYPE 获取Key类型</span><br></pre></td></tr></table></figure><p><strong>注：Redis是不区分大小写的，命令最好使用大写这样能区分是命令还是参数！</strong></p><h6 id="set的例子："><a href="#set的例子：" class="headerlink" title="set的例子："></a>set的例子：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.201:6379&gt; SET hello hehe</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; GET hello</span><br><span class="line">"hehe"</span><br></pre></td></tr></table></figure><h6 id="设置多个key-value-然后使用使用keys-去查看所有"><a href="#设置多个key-value-然后使用使用keys-去查看所有" class="headerlink" title="设置多个key value 然后使用使用keys * 去查看所有"></a>设置多个key value 然后使用使用keys * 去查看所有</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.201:6379&gt; SET hello1 hehe1</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; SET hello2 hehe2</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; KEYS  *</span><br><span class="line">1) "hello1"</span><br><span class="line">2) "hello"</span><br><span class="line">3) "hello2"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">KEY匹配方式：</span></span><br><span class="line">？匹配单个</span><br><span class="line"> *匹配所有</span><br></pre></td></tr></table></figure><h6 id="判断key是否存在"><a href="#判断key是否存在" class="headerlink" title="判断key是否存在"></a>判断key是否存在</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">判断Key是否存在使用：EXISTS   他返回的是整形：0不存在，1存在</span></span><br><span class="line">192.168.0.201:6379&gt; EXISTS hello</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.0.201:6379&gt; EXISTS hehe</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h6 id="删除KEY"><a href="#删除KEY" class="headerlink" title="删除KEY"></a>删除KEY</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.201:6379&gt; DEL hello</span><br><span class="line">(integer) 1   #这里的1是数量</span><br><span class="line"><span class="meta">#</span><span class="bash">删除多个测试下：</span></span><br><span class="line">192.168.0.201:6379&gt; DEL hello1 hello2</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h6 id="查看类型TYPE"><a href="#查看类型TYPE" class="headerlink" title="查看类型TYPE"></a>查看类型TYPE</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">只要用<span class="built_in">set</span>类型就是字符串。查看类型命令用TYPE</span></span><br><span class="line">192.168.0.201:6379&gt; TYPE hello</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h6 id="Keyspace"><a href="#Keyspace" class="headerlink" title="Keyspace"></a>Keyspace</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">redis是支持多个实例的默认最多16个，可以修改配置文件来支持更多！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用INFO命令查看！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Keyspace</span></span><br><span class="line">db0:keys=1,expires=0,avg_ttl=0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">db0 ：这个可以理解为命名空间。最多支持16个，使用SELECT 去切换</span></span><br><span class="line">192.168.0.201:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash">尝试添加一个key-value</span></span><br><span class="line">SET db1 hehe</span><br><span class="line"><span class="meta">#</span><span class="bash">然后在使用INFO看下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Keyspace</span></span><br><span class="line">db0:keys=1,expires=0,avg_ttl=0</span><br><span class="line">db1:keys=1,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure><h2 id="Redis数据类型："><a href="#Redis数据类型：" class="headerlink" title="Redis数据类型："></a>Redis数据类型：</h2><p>他用不同的命令来区分你要操作什么数据类型<br>类型不能嵌套，不能混！ 但是有个王炸：set能把所有的类型都改为字符串类型！</p><h4 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SET</span><br><span class="line">GET</span><br><span class="line">DEL</span><br><span class="line">APPEND  在值的后面追加</span><br><span class="line">set能重新设置但是要追加的话使用APPEND最好比如</span><br><span class="line">192.168.0.201:6379&gt; SET hehe hello</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; GET hehe</span><br><span class="line">"hello"</span><br><span class="line">192.168.0.201:6379&gt; APPEND hehe ,world</span><br><span class="line">(integer) 11</span><br><span class="line">192.168.0.201:6379&gt; GET hehe</span><br><span class="line">"hello,world"</span><br><span class="line"> </span><br><span class="line">可以同时设置多个值和查询值用MSET 和MSET</span><br><span class="line">192.168.0.201:6379&gt; MSET key1 v1 key2 v2 key3 v3</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; MGET key1 key2 key3</span><br><span class="line">1) "v1"</span><br><span class="line">2) "v2"</span><br><span class="line">3) "v3"</span><br><span class="line"> </span><br><span class="line">获取字符串长度</span><br><span class="line">192.168.0.201:6379&gt; STRLEN hehe</span><br><span class="line">(integer) 11</span><br><span class="line">如果字符串是中文的他会按照UTF-8格式的来输出1个字等3个字符串来算的  )</span><br><span class="line">192.168.0.201:6379&gt; SET key "呵呵"</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; GET key</span><br><span class="line">"\xe5\x91\xb5\xe5\x91\xb5"</span><br></pre></td></tr></table></figure><h4 id="自增类型"><a href="#自增类型" class="headerlink" title="自增类型"></a>自增类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">比如说投票点下+1 ，如果说用<span class="built_in">set</span>每点一次修改<span class="built_in">set</span>下那就不太现实。所有redis有个自增类型：INCR</span></span><br><span class="line">192.168.0.201:6379&gt; INCR num           #默认如果没有这个值的话，INCR就会自动创建一个值默认为零，当你没执行一次他就会+1</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.0.201:6379&gt; INCR num</span><br><span class="line">(integer) 2</span><br><span class="line">192.168.0.201:6379&gt; INCR num</span><br><span class="line">(integer) 3</span><br><span class="line">192.168.0.201:6379&gt; INCR num</span><br><span class="line">(integer) 4</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果想加多个呢：INCRBY</span></span><br><span class="line">192.168.0.201:6379&gt; INCRBY num 10</span><br><span class="line">(integer) 57</span><br><span class="line">192.168.0.201:6379&gt; INCRBY num 10</span><br><span class="line">(integer) 67</span><br><span class="line">192.168.0.201:6379&gt; INCRBY num 10</span><br><span class="line">(integer) 77</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">减呢？ DECR</span></span><br><span class="line">192.168.0.201:6379&gt; DECR num</span><br><span class="line">(integer) 106</span><br><span class="line">192.168.0.201:6379&gt; DECR num</span><br><span class="line">(integer) 105</span><br><span class="line">192.168.0.201:6379&gt; DECR num</span><br><span class="line">(integer) 104</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果要是减多个呢：DECRBY</span></span><br><span class="line">192.168.0.201:6379&gt; DECRBY num 5</span><br><span class="line">(integer) 97</span><br><span class="line">192.168.0.201:6379&gt; DECRBY num 5</span><br><span class="line">(integer) 92</span><br><span class="line">192.168.0.201:6379&gt; DECRBY num 5</span><br><span class="line">(integer) 87</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">想支持小数点：</span></span><br><span class="line">INCRBYFLOAT key 0.1</span><br><span class="line">192.168.0.201:6379&gt; INCRBYFLOAT key 0.1</span><br><span class="line">"0.1"</span><br><span class="line">192.168.0.201:6379&gt; INCRBYFLOAT key 0.1</span><br><span class="line">"0.2"</span><br><span class="line">192.168.0.201:6379&gt; INCRBYFLOAT key 0.1</span><br><span class="line">"0.3"</span><br><span class="line">192.168.0.201:6379&gt; INCRBYFLOAT key 0.1</span><br><span class="line">"0.4"</span><br></pre></td></tr></table></figure><h4 id="散列类型（hash）"><a href="#散列类型（hash）" class="headerlink" title="散列类型（hash）"></a>散列类型（hash）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">和数据库存的表似的，表不是的有字段吧，可以给每个字段设置个值</span></span><br><span class="line">HSET Key field value</span><br><span class="line">HGET Key field</span><br><span class="line">HMSET Key field value [field value....]</span><br><span class="line">HMGET Key field [field ...]</span><br><span class="line">HGETALL Key</span><br><span class="line">HDEL</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; HSET shouji name iphone</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.0.201:6379&gt; HSET shouji co red</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.0.201:6379&gt; HSET shouji price 8888</span><br><span class="line">(integer) 1</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; HGET shouji name</span><br><span class="line">"iphone"</span><br><span class="line">192.168.0.201:6379&gt; HGET shouji co</span><br><span class="line">"red"</span><br><span class="line">192.168.0.201:6379&gt; HGET shouji price</span><br><span class="line">"8888"</span><br><span class="line">192.168.0.201:6379&gt; HGETALL shouji</span><br><span class="line">1) "name"</span><br><span class="line">2) "iphone"</span><br><span class="line">3) "co"</span><br><span class="line">4) "red"</span><br><span class="line">5) "price"</span><br><span class="line">6) "8888"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">其实现在看着不是好看的但是他通过一些API调用到网页上，通过排版取出来的值就好看了</span></span><br><span class="line">192.168.0.201:6379&gt; HMSET diannao name thinkpad co black price 30</span><br><span class="line">OK</span><br><span class="line">192.168.0.201:6379&gt; HMGET diannao name co price</span><br><span class="line">1) "thinkpad"</span><br><span class="line">2) "black"</span><br><span class="line">3) "30"</span><br></pre></td></tr></table></figure><h4 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列表类型：他是存储一个有序的字符串列表   这个“有序”是什么时候进来的！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">列表你向左边添加和右边添加他的时间复杂度是一样的！O1（时间复杂度）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可以理解为：我这个速度不随着数量的增加而增加！比如1000行和1万行他的时间开销是一样的！    大学数据结构里学的</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">时间复杂度：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">计算机科学中，算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">但是他有个缺点，比如说里面有1万个key你想找到第98个这就费老劲了他从1开始数数到98</span></span><br><span class="line"><span class="meta">#</span><span class="bash">优点，你读前100个，卡直接读头部就非常快了</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">命令：</span></span><br><span class="line">LPUSH key value [value ...]</span><br><span class="line">RPUSH key value [value ...]</span><br><span class="line">               LPOP key</span><br><span class="line">               RPOP key</span><br><span class="line">     LRANGE key start stop</span><br><span class="line">     LREM key count value</span><br><span class="line"><span class="meta">#</span><span class="bash">从左边添加key</span></span><br><span class="line">192.168.0.201:6379&gt; LPUSH num 0</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.0.201:6379&gt; LPUSH num 1</span><br><span class="line">(integer) 2</span><br><span class="line">192.168.0.201:6379&gt; LPUSH num 2</span><br><span class="line">(integer) 3</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">现在是从左边加</span></span><br><span class="line">2  1   0</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从右边开始加</span></span><br><span class="line">192.168.0.201:6379&gt; RPUSH num 3</span><br><span class="line">(integer) 4</span><br><span class="line">2  1   0  3</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; RPUSH num 5</span><br><span class="line">(integer) 5</span><br><span class="line"> </span><br><span class="line">2  1  0  3  5  5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">如果想获取长度就使用LNE 吗！获取列表类型长度就是：LLEN</span></span><br><span class="line">192.168.0.201:6379&gt; LLEN num</span><br><span class="line">(integer) 5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从左边拿key</span></span><br><span class="line"><span class="meta">#</span><span class="bash">从列表类型里拿出这个key来（拿出来就没有了），从左边拿左边第一个</span></span><br><span class="line">192.168.0.201:6379&gt; LPOP num</span><br><span class="line">"2"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">左边第一个是2那么拿出来之后这个key这个key就变成</span></span><br><span class="line">1  0  3  5</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从右边拿key，从右边拿右边第一个   （这个5就被拿出来了）</span></span><br><span class="line">192.168.0.201:6379&gt; RPOP num</span><br><span class="line">"5"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">现在在看下这个key的长度</span></span><br><span class="line">192.168.0.201:6379&gt; LLEN num</span><br><span class="line">(integer) 3</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">获取列表的某一个范围：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">现在是这个值</span></span><br><span class="line">1  0  3</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; LRANGE num 0 1              #取0 - 1 的值</span><br><span class="line">1) "1"</span><br><span class="line">2) "0"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##这个列表和python中列表中差不多，0 -1 相当于列表中的下标。</span></span></span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; LPUSH num 2</span><br><span class="line">(integer) 4</span><br><span class="line">192.168.0.201:6379&gt; RPUSH num 4</span><br><span class="line">(integer) 5</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; LRANGE num 0 -1     #这里的（-1）表示左边第一个</span><br><span class="line">1) "2"</span><br><span class="line">2) "1"</span><br><span class="line">3) "0"</span><br><span class="line">4) "3"</span><br><span class="line">5) "4"</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">获取指定元素的值</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">获取右边的第一个值：</span></span><br><span class="line">192.168.0.201:6379&gt; LINDEX num -1</span><br><span class="line">"4"</span><br><span class="line"><span class="meta">#</span><span class="bash">获取左边边的第二个值：</span></span><br><span class="line">192.168.0.201:6379&gt; LINDEX num -2</span><br><span class="line">"3"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">那-3呢？</span></span><br><span class="line">192.168.0.201:6379&gt; LINDEX num -3</span><br><span class="line">"0"</span><br><span class="line"><span class="meta">#</span><span class="bash">这个就是从右边数的第3个值！！！！！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从左边获取值</span></span><br><span class="line">192.168.0.201:6379&gt; LINDEX num 0</span><br><span class="line">"2"</span><br><span class="line">192.168.0.201:6379&gt; LINDEX num 1</span><br><span class="line">"1"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">他是两边的第一次接触有点乱！他是两边的需要注意！！！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">只保留指定数据</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">只保留0到2的数据</span></span><br><span class="line">192.168.0.201:6379&gt; LTRIM num 0 2</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash">看下结果：</span></span><br><span class="line">192.168.0.201:6379&gt; LRANGE num 0 -1</span><br><span class="line">1) "2"</span><br><span class="line">2) "1"</span><br><span class="line">3) "0"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">这个有什么用呢：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">写日志的时候，我这个缓冲区，只保留最近100条日志！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比如：</span></span><br><span class="line">192.168.0.201:6379&gt; LPUSH logs newloghehe</span><br><span class="line">(integer) 1</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; LTRIM num 0 99</span><br><span class="line">OK</span><br><span class="line"> </span><br><span class="line">这样的话我的列表永远只有100条，我只看最近100条的日志！！</span><br></pre></td></tr></table></figure><h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">集合是高一学的，第一个学期就是学的集合</span></span><br><span class="line"><span class="meta">#</span><span class="bash">交集∩、并集∪、合集、等 0 0 ！</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集合的元素是没有类型的！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用到集合类型的应用有：（新浪微博分享了很多的redis应用）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">比如：关注微博，比如咱俩是否共同关注了某一个人等。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">添加集合</span></span><br><span class="line">192.168.0.201:6379&gt; SADD jihe1 a b c</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看集合内容</span></span><br><span class="line">192.168.0.201:6379&gt; SMEMBERS jihe1</span><br><span class="line">1) "c"</span><br><span class="line">2) "a"</span><br><span class="line">3) "b"</span><br><span class="line"><span class="meta">#</span><span class="bash">判断集合元素是否存在</span></span><br><span class="line">192.168.0.201:6379&gt; SISMEMBER jihe1 d</span><br><span class="line">(integer) 0</span><br><span class="line">192.168.0.201:6379&gt; SISMEMBER jihe1 a</span><br><span class="line">(integer) 1</span><br><span class="line">返回0 说明不存在返回1说明存存在</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">集合间运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash">支持：交集、差集、并集</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">差集运算：</span></span><br><span class="line">192.168.0.201:6379&gt; SDIFF jihe1 jihe2</span><br><span class="line">1) "a"</span><br><span class="line">jihe1abcjihe2b cd</span><br><span class="line"> </span><br><span class="line">jihe1 减去jihe2 减去相同的b c  ,  jihe1 还剩下a</span><br><span class="line"> </span><br><span class="line">同理：</span><br><span class="line">jihe2 减去jihe1</span><br><span class="line">192.168.0.201:6379&gt; SDIFF jihe2 jihe1</span><br><span class="line">1) "d"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">差集运算可以设置多个</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">交集运算：</span></span><br><span class="line"> 192.168.0.201:6379&gt; SINTER jihe1 jihe2</span><br><span class="line">1) "c"</span><br><span class="line">2) "b"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">交集可以设置多个：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在添加一个jihe3</span></span><br><span class="line">192.168.0.201:6379&gt; SADD jihe3 d e f</span><br><span class="line">(integer) 3</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; SINTER jihe1 jihe2 jihe3</span><br><span class="line">(empty list or set)</span><br><span class="line"><span class="meta">#</span><span class="bash">这个是因为他是jihe1和jihe2先做交集运算，然后在和jihe3做交集运算</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">并集运算</span></span><br><span class="line">192.168.0.201:6379&gt; SUNION jihe1 jihe2</span><br><span class="line">1) "a"</span><br><span class="line">2) "c"</span><br><span class="line">3) "b"</span><br><span class="line">4) "d"</span><br><span class="line"><span class="meta">#</span><span class="bash">同样也可以设置多个</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">以上的集合是无序的，redis支持有序的集合他的名如下</span></span><br><span class="line">ZADD key score member 增加元素</span><br><span class="line">ZSCORE key member 获取元素的分数</span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line">ZRANGEBYSCORE key min max</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">添加有序集合</span></span><br><span class="line">192.168.0.201:6379&gt; ZSCORE youxu 80 a</span><br><span class="line">(nil)</span><br><span class="line">192.168.0.201:6379&gt; ZADD youxu 81 b</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash">可以添加多个</span></span><br><span class="line">192.168.0.201:6379&gt; ZADD youxu 82 c 83 d</span><br><span class="line">(integer) 2</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">获取分数</span></span><br><span class="line">192.168.0.201:6379&gt; ZSCORE youxu a</span><br><span class="line">"80"</span><br><span class="line">192.168.0.201:6379&gt; ZSCORE youxu b</span><br><span class="line">"81"</span><br><span class="line">192.168.0.201:6379&gt; ZSCORE youxu c</span><br><span class="line">"82"</span><br><span class="line">192.168.0.201:6379&gt; ZSCORE youxu d</span><br><span class="line">"83"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">获取有序集合范围</span></span><br><span class="line">192.168.0.201:6379&gt; ZRANGE youxu 0 3   #参考列表集合的0 3  从0到3的元素</span><br><span class="line">1) "a"</span><br><span class="line">2) "b"</span><br><span class="line">3) "c"</span><br><span class="line">4) "d"</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">在举个例子：</span></span><br><span class="line">192.168.0.201:6379&gt; ZADD youxu 79 e</span><br><span class="line">(integer) 1</span><br><span class="line"> </span><br><span class="line">192.168.0.201:6379&gt; ZRANGE youxu 0 4</span><br><span class="line">1) "e"</span><br><span class="line">2) "a"</span><br><span class="line">3) "b"</span><br><span class="line">4) "c"</span><br><span class="line">5) "d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis介绍：&quot;&gt;&lt;a href=&quot;#Redis介绍：&quot; class=&quot;headerlink&quot; title=&quot;Redis介绍：&quot;&gt;&lt;/a&gt;Redis介绍：&lt;/h2&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;redis 是一个开源的、使用C语言编写的、支持网络交互的、可以基于内存也可以持久化的Key-Value数据库。&lt;/p&gt;
&lt;p&gt;redis的源码非常简单，只要有时间看看谭浩强的C语言，在去看redis的源码能看懂50-60%。&lt;/p&gt;
&lt;p&gt;redis目前最大的集群应该是新浪的应该。&lt;/p&gt;
&lt;p&gt;redis目前是vmvaer来支持的，很多的开源软件都需要某些组织来支持的。如果一个开源软件没有金钱来支持的话很难走的持久&lt;/p&gt;
&lt;h4 id=&quot;Redis和Memcache对比&quot;&gt;&lt;a href=&quot;#Redis和Memcache对比&quot; class=&quot;headerlink&quot; title=&quot;Redis和Memcache对比&quot;&gt;&lt;/a&gt;&lt;strong&gt;Redis和Memcache对比&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/articles/88f598bf/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;持久化：以电商举例，session用memcache来做的，购物车用redis来做的，当你退出的时候会提示你购物车里的物品会在你退出后继续保存。相对来说memcache存储更单一化！&lt;/p&gt;
&lt;p&gt;主从复制：redis的主从复制类似mysql的主从复制但是原理是不同的！&lt;/p&gt;
&lt;p&gt;虚拟内存：说白了就是把内存里一些不用的东西放在硬盘上，最好不要用，降低效率，现在内存来说比较便宜。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库运维" scheme="https://wandouduoduo.netlify.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Redis" scheme="https://wandouduoduo.netlify.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python之进程线程协程</title>
    <link href="https://wandouduoduo.netlify.com/articles/fa6bf072.html"/>
    <id>https://wandouduoduo.netlify.com/articles/fa6bf072.html</id>
    <published>2019-07-29T01:37:25.000Z</published>
    <updated>2019-08-07T02:06:43.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Socket-Server模块"><a href="#Socket-Server模块" class="headerlink" title="Socket Server模块"></a>Socket Server模块</h2><p>SocketServer内部使用 IO多路复用 以及 “多线程” 和 “多进程” ，从而实现并发处理多个客户端请求的Socket服务端。即：每个客户端请求连接到服务器时，Socket服务端都会在服务器是创建一个“线程”或者“进程” 专门负责处理当前客户端的所有请求。</p><p>socket server和select &amp; epoll 还是不太一样他的本质是：客户端第一次链接的时候，只要一进来，我服务端有个while循环为你创建一个<br>线程和进程，客户端就和服务端直接创建通信，以后传送数据什么的就不会通过server端了，直接他俩通过线程或者进程通信就可以了！</p><p>如果在多进程的时候，client1和client2他们同时传输10G的文件都是互相不影响！<br>如果在多线程的时候，python中的多线程，在同一时间只有一个线程在工作，他底层会自动进行上下文切换，client1传一点，client2传一点。</p><p>知识回顾：<br>python中的多线程，有一个GIL在同一时间只有一个线程在工作，他底层会自动进行上下文切换.<br>这样会导致python的多线程效率会很低，也就是人们经常说的python多线程问题</p><p>如下图：</p><p>第一次连接后，数据通讯就通过线程或进程进行数据交换（红色箭头）</p><p><img src="/articles/fa6bf072/1.png" alt></p><h2 id="ThreadingTCPServer"><a href="#ThreadingTCPServer" class="headerlink" title="ThreadingTCPServer"></a><strong>ThreadingTCPServer</strong></h2><p>ThreadingTCPServer实现的Socket服务器内部会为每个client创建一个 “<strong>线程</strong>”，该线程用来和客户端进行交互。</p><h4 id="ThreadingTCPServer基础"><a href="#ThreadingTCPServer基础" class="headerlink" title="ThreadingTCPServer基础"></a>ThreadingTCPServer基础</h4><p>使用ThreadingTCPServer:</p><ul><li>创建一个继承自 SocketServer.BaseRequestHandler 的类</li><li>类中必须定义一个名称为 handle 的方法</li><li>启动ThreadingTCPServer</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServer</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span> <span class="comment">#定义handle方法</span></span><br><span class="line">        <span class="comment"># print self.request,self.client_address,self.server</span></span><br><span class="line">        conn = self.request <span class="comment">#如果连接请求过来，获取client端对象</span></span><br><span class="line">        conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>) <span class="comment">#发送一个信息</span></span><br><span class="line">        Flag = <span class="literal">True</span> <span class="comment">#并把Flag设置为True</span></span><br><span class="line">        <span class="keyword">while</span> Flag:当Flag为<span class="literal">True</span>的时候执行</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>) <span class="comment">#接收client端数据</span></span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">'exit'</span>: <span class="comment">#判断如果data  == 'exit' 退出</span></span><br><span class="line">                Flag = <span class="literal">False</span> <span class="comment">#并把Flag设置为Flase</span></span><br><span class="line">            <span class="keyword">elif</span> data == <span class="string">'0'</span>: <span class="comment">#如果为 == ‘0’ </span></span><br><span class="line">                conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>) <span class="comment">#发送数据</span></span><br><span class="line">            <span class="keyword">else</span>:<span class="comment">#上面的都没匹配上，发送请重新输入</span></span><br><span class="line">                conn.sendall(<span class="string">'请重新输入.'</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = SocketServer.ThreadingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyServer) <span class="comment">#实例化对象，设置启动的IP/PORT并把自己定义的类写上作为SocketServer.ThreadingTCPServer的构造函数</span></span><br><span class="line">    server.serve_forever() <span class="comment">#调用对象中的启动方法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>)</span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line">sk.settimeout(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = sk.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'receive:'</span>,data</span><br><span class="line">    inp = raw_input(<span class="string">'please input:'</span>)</span><br><span class="line">    sk.sendall(inp)</span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><h4 id="ThreadingTCPServer源码剖析"><a href="#ThreadingTCPServer源码剖析" class="headerlink" title="ThreadingTCPServer源码剖析"></a>ThreadingTCPServer源码剖析</h4><p> <img src="/articles/fa6bf072/2.png" alt></p><p>学会看源码非常重要！不能仅仅光会用！大赞~ 知道他的过程和实现~ 怎么学会看源码呢？多看然后画类图，如上图！！！</p><p>在理解的时候可以把他们想象为，把所有需要用的方法，都抓到ThreadingTCPServer中</p><p>内部调用流程为：</p><ul><li>启动服务端程序</li><li>执行 TCPServer.<strong>init</strong> 方法，创建服务端Socket对象并绑定 IP 和 端口</li><li>执行 BaseServer.<strong>init</strong> 方法，将自定义的继承自SocketServer.BaseRequestHandler 的类 MyRequestHandle赋值给 self.RequestHandlerClass</li><li>执行 BaseServer.server_forever 方法，While 循环一直监听是否有客户端请求到达 …</li><li>当客户端连接到达服务器</li><li>执行 ThreadingMixIn.process_request 方法，创建一个 “线程” 用来处理请求</li><li>执行 ThreadingMixIn.process_request_thread 方法</li><li>执行 BaseServer.finish_request 方法，执行 self.RequestHandlerClass()  即：执行 自定义 MyRequestHandler 的构造方法（自动调用基类BaseRequestHandler的构造方法，在该构造方法中又会调用 MyRequestHandler的handle方法）</li></ul><p>精简源码：</p><p>模拟Socekt Server的简化版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(request, client_address)</span>:</span> <span class="comment">#模拟定义的handle()方法，这个方法内的代码是socket server与Client端交互代码</span></span><br><span class="line">    <span class="keyword">print</span> request,client_address</span><br><span class="line">    conn = request</span><br><span class="line">    conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'exit'</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> data == <span class="string">'0'</span>:</span><br><span class="line">            conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conn.sendall(<span class="string">'请重新输入.'</span>)</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8002</span>))</span><br><span class="line">sk.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment">#这里一个while循环循环监控sk文件句柄</span></span><br><span class="line">    r, w, e = select.select([sk,],[],[],<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'looping'</span></span><br><span class="line">    <span class="keyword">if</span> sk <span class="keyword">in</span> r: <span class="comment">#当sk文件句柄发生变化的时候说明是新的客户端连接过来了</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'get request'</span></span><br><span class="line">        request, client_address = sk.accept()</span><br><span class="line">        t = threading.Thread(target=process, args=(request, client_address)) <span class="comment">#创建一个线程，并调用自己定义的process方法执行~然后样客户端与之交互</span></span><br><span class="line">        t.daemon = <span class="literal">False</span></span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><p>如精简代码可以看出，SocketServer的ThreadingTCPServer之所以可以同时处理请求得益于 <strong>select</strong> 和 <strong>Threading</strong> 两个东西，其实本质上就是在服务器端为每一个客户端创建一个线程，当前线程用来处理对应客户端的请求，所以，可以支持同时n个客户端链接（长连接）。</p><p><strong>ForkingTCPServer</strong></p><p>ForkingTCPServer和ThreadingTCPServer的使用和执行流程基本一致，只不过在内部分别为请求者建立 “线程”  和 “进程”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServer</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print self.request,self.client_address,self.server</span></span><br><span class="line">        conn = self.request</span><br><span class="line">        conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</span><br><span class="line">        Flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> Flag:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">'exit'</span>:</span><br><span class="line">                Flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> data == <span class="string">'0'</span>:</span><br><span class="line">                conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                conn.sendall(<span class="string">'请重新输入.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = SocketServer.ForkingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyServer)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>)</span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.connect(ip_port)</span><br><span class="line">sk.settimeout(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = sk.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'receive:'</span>,data</span><br><span class="line">    inp = raw_input(<span class="string">'please input:'</span>)</span><br><span class="line">    sk.sendall(inp)</span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure><p>以上ForkingTCPServer只是将 ThreadingTCPServer 实例中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server = SocketServer.ThreadingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyRequestHandler)</span><br><span class="line">变更为：</span><br><span class="line">server = SocketServer.ForkingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyRequestHandler)</span><br></pre></td></tr></table></figure><h2 id="Python线程"><a href="#Python线程" class="headerlink" title="Python线程"></a>Python线程</h2><p>Threading用于提供线程相关的操作，线程是应用程序中工作的最小单元。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(arg)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'thread'</span>+str(arg)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=show, args=(i,))  <span class="comment">#这里实例化对象的时候传的两个参数第一个参数是，线程需要执行的方法，第二个参数方法的参数</span></span><br><span class="line">    t.start()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'main thread stop'</span></span><br></pre></td></tr></table></figure><p>上述代码创建了10个“前台”线程，然后控制器就交给了CPU，CPU根据指定算法进行调度，分片执行指令。</p><p>再次回顾：这里为什么是分片执行？</p><p>python中的多线程，有一个GIL（Global Interpreter Lock 全局解释器锁 ）在同一时间只有一个线程在工作，他底层会自动进行上下文切换.这个线程执行点，那个线程执行点！</p><p><strong>更多方法：</strong></p><ul><li>start       线程准备就绪，等待CPU调度</li><li>setName     为线程设置名称</li><li>getName     获取线程名称</li><li>setDaemon   设置为后台线程或前台线程（默认）</li><li>​            如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，均停止</li><li>​            如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止</li><li>join        逐个执行每个线程，执行完毕后继续往下执行，该方法使得多线程变得无意义</li><li>run         线程被cpu调度后执行Thread类对象的run方法</li></ul><p><strong>线程锁</strong></p><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，CPU接着执行其他线程。所以，可能出现如下问题：</p><p><img src="/articles/fa6bf072/3.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    gl_num +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> gl_num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=show, args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'main thread stop'</span></span><br></pre></td></tr></table></figure><p><strong>设置线程锁</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">   </span><br><span class="line">gl_num = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">lock = threading.RLock() <span class="comment">#实例化调用线程锁</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">()</span>:</span></span><br><span class="line">    lock.acquire() <span class="comment">#获取线程锁</span></span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    gl_num +=<span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> gl_num</span><br><span class="line">    lock.release() <span class="comment">#释放线程锁，这里注意，在使用线程锁的时候不能把锁，写在代码中，否则会造成阻塞，看起来“像”单线程</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=Func)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>event</strong></p><p>他的作用就是：用主线程控制子线程合适执行，他可以让子线程停下来，也可以让线程继续！<br>他实现的机制就是：标志位“Flag”</p><p>事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 False，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为True，那么event.wait 方法时便不再阻塞。</p><ul><li>clear：将“Flag”设置为False</li><li>set：将“Flag”设置为True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(event)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'start'</span></span><br><span class="line">    event.wait() <span class="comment">#执行对象weit方法，然后他们停下来，等待“Flag”为True</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'execute'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">event_obj = threading.Event() <span class="comment">#创建事件的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=do, args=(event_obj,)) <span class="comment">#吧对象传到每个线程里面了~</span></span><br><span class="line">    t.start()</span><br><span class="line"> </span><br><span class="line">event_obj.clear()  <span class="comment">#设置"Flag"为Flase</span></span><br><span class="line"></span><br><span class="line">inp = raw_input(<span class="string">'input:'</span>)</span><br><span class="line"><span class="keyword">if</span> inp == <span class="string">'true'</span>:</span><br><span class="line">    event_obj.set()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#thread enent 就是这个3个方法的使用</span></span><br></pre></td></tr></table></figure><h2 id="Python进程"><a href="#Python进程" class="headerlink" title="Python进程"></a>Python进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'say hi'</span>,i</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    p = Process(target=foo,args=(i,))</span><br><span class="line">    p.start()</span><br></pre></td></tr></table></figure><p><strong>注意：由于进程之间的数据需要各自持有一份，所以创建进程需要的非常大的开销。并且python不能再Windows下创建进程！</strong></p><p>并且在使用多进程的时候，最好是创建多少个进程？：和CPU核数相等</p><p>默认的进程之间相互是独立，如果想让进程之间数据共享，就得有个特殊的数据结构，这个数据结构就可以理解为他有穿墙的功能<br>如果你能穿墙的话两边就都可以使用了<br>使用了3种方法</p><p><strong>默认的进程无法进行数据共享：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">li = []</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    li.append(i)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'say hi'</span>,li</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    p = Process(target=foo,args=(i,))</span><br><span class="line">    p.start()</span><br><span class="line">     </span><br><span class="line"><span class="keyword">print</span> <span class="string">'ending'</span>,li</span><br></pre></td></tr></table></figure><p><strong>使用特殊的数据类型，来进行穿墙：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">默认的进程之间相互是独立，如果想让进程之间数据共享，就得有个特殊的数据结构，这个数据结构就可以理解为他有穿墙的功能</span><br><span class="line">如果你能穿墙的话两边就都可以使用了</span><br><span class="line">使用了<span class="number">3</span>种方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一种方法：</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过特殊的数据结构：数组（Array）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Array</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个只包含数字类型的数组（python中叫列表）</span></span><br><span class="line"><span class="comment">#并且数组是不可变的，在C，或其他语言中，数组是不可变的，之后再python中数组（列表）是可以变得</span></span><br><span class="line"><span class="comment">#当然其他语言中也提供可变的数组</span></span><br><span class="line"><span class="comment">#在C语言中数组和字符串是一样的，如果定义一个列表，如果可以增加，那么我需要在你内存地址后面再开辟一块空间，那我给你预留多少呢？</span></span><br><span class="line"><span class="comment">#在python中的list可能用链表来做的，我记录了你前面和后面是谁。   列表不是连续的，数组是连续的</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">上面不是列表是“数组"数组是不可变的，附加内容是为了更好的理解数组！</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">temp = Array(<span class="string">'i'</span>, [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]) <span class="comment">#这里的i是C语言中的数据结构，通过他来定义你要共享的内容的类型！点进去看~</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    temp[i] = <span class="number">100</span>+i</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> temp:</span><br><span class="line">        <span class="keyword">print</span> i,<span class="string">'-----&gt;'</span>,item</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    p = Process(target=Foo,args=(i,))</span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">第二种方法：</span><br><span class="line"><span class="comment">#方法二：manage.dict()共享数据</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Manager  <span class="comment">#这个特殊的数据类型Manager</span></span><br><span class="line"> </span><br><span class="line">manage = Manager()</span><br><span class="line">dic = manage.dict() <span class="comment">#这里调用的时候，使用字典，这个字典和咱们python使用方法是一样的！</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    dic[i] = <span class="number">100</span>+i</span><br><span class="line">    <span class="keyword">print</span> dic.values()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    p = Process(target=Foo,args=(i,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><p><strong>OK那么问题来了，既然进程之间可以进行共享数据，如果多个进程同时修改这个数据是不是就会造成脏数据？是不是就得需要锁！</strong></p><p>进程的锁和线程的锁使用方式是非常一样的知识他们是用的类是在不同地方的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Array, RLock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(lock,temp,i)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将第0个数加100</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp[<span class="number">0</span>] = <span class="number">100</span>+i</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> temp:</span><br><span class="line">        <span class="keyword">print</span> i,<span class="string">'-----&gt;'</span>,item</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line">lock = RLock()</span><br><span class="line">temp = Array(<span class="string">'i'</span>, [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    p = Process(target=Foo,args=(lock,temp,i,))</span><br><span class="line">    p.start()</span><br></pre></td></tr></table></figure><p> <strong>进程池</strong></p><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进进程，那么程序就会等待，直到进程池中有可用进程为止。</p><p>进程池中有两个方法：</p><ul><li>apply</li><li>apply_async</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">100</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> arg</span><br><span class="line">  </span><br><span class="line">pool = Pool(<span class="number">5</span>) <span class="comment">#创建一个进程池</span></span><br><span class="line"><span class="comment">#print pool.apply(Foo,(1,))#去进程池里去申请一个进程去执行Foo方法</span></span><br><span class="line"><span class="comment">#print pool.apply_async(func =Foo, args=(1,)).get()</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    pool.apply_async(func=Foo, args=(i,),callback=Bar)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'end'</span></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()<span class="comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">apply 主动的去执行</span></span><br><span class="line"><span class="string">pool.apply_async(func=Foo, args=(i,),callback=Bar) 相当于异步，当申请一个线程之后，执行FOO方法就不管了，执行完之后就在执行callback ，当你执行完之后，在执行一个方法告诉我执行完了</span></span><br><span class="line"><span class="string">callback 有个函数，这个函数就是操作的Foo函数的返回值！</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>首先要明确，线程和进程都是系统帮咱们开辟的，不管是thread还是process他内部都是调用的系统的API<br>而对于协程来说它和系统毫无关系！<br>他就和程序员有关系，对于线程和进程来说，调度是由CPU来决定调度的！<br>对于协程来说，程序员就是上帝，你想让谁执行到哪里他就执行到哪里</p><p>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时（保存状态，下次继续）。协程，则只使用一个线程，在一个线程中规定某个代码块执行顺序。</p><p>适用场景：其实在其他语言中，协程的其实是意义不大的多线程即可已解决I/O的问题，但是在python因为他有GIL（Global Interpreter Lock 全局解释器锁 ）在同一时间只有一个线程在工作，所以：如果一个线程里面I/O操作特别多，协程就比较适用</p><p><strong>greenlet</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">收先要明确，线程和进程都是系统帮咱们开辟的，不管是thread还是process他内部都是调用的系统的API</span><br><span class="line">而对于协程来说它和系统毫无关系！</span><br><span class="line">他就和程序员有关系，对于线程和进程来说，是不是有CPU来决定调度的！</span><br><span class="line">对于协程来说，程序员就是上帝，你想让谁执行到哪里他就执行到哪里</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="number">12</span></span><br><span class="line">    gr2.switch()<span class="comment">#切换到协程2执行</span></span><br><span class="line">    <span class="keyword">print</span> <span class="number">34</span> <span class="comment">#2切回来之后，在这里和yield类似</span></span><br><span class="line">    gr2.switch() </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="number">56</span></span><br><span class="line">    gr1.switch()<span class="comment">#上面执行了一句，在切换到协程1里去了</span></span><br><span class="line">    <span class="keyword">print</span> <span class="number">78</span></span><br><span class="line"> </span><br><span class="line">gr1 = greenlet(test1) <span class="comment">#创建了一个协程</span></span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line">gr1.switch() <span class="comment">#执行test1 </span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">比I/O操作，如果10个I/O，我程序从上往下执行，如果同时发出去了10个I/O操作，那么返回的结果如果同时回来了2个</span></span><br><span class="line"><span class="string">，是不是就节省了很多时间？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果一个线程里面I/O操作特别多，使用协程是不是就非常适用了！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果一个线程访问URL通过协程来做，协程告诉它你去请求吧，然后继续执行，但是如果不用协程就得等待第一个请求完毕之后返回之后才</span></span><br><span class="line"><span class="string">继续下一个请求。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">协程：把一个线程分成了多个协程操作，每个协程做操作</span></span><br><span class="line"><span class="string">多线程：是把每一个操作，分为多个线程做操作，但是python中，在同一时刻只能有一个线程操作，并且有上下文切换。但是如果上下文切换非常频繁的话</span></span><br><span class="line"><span class="string">是非常耗时的，但对于协程切换就非常轻便了~</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>协程就是对线程的分片，上面的例子需要手动操作可能用处不是很大了解原理，看下面的例子：</p><p>上面的<strong>greenlet</strong>是需要认为的制定调度顺序的，所以又出了一个<strong>gevent</strong>他是对greenlet功能进行封装</p><p> 遇到I/O自动切换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey; monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib2.urlopen(url) <span class="comment">#当遇到I/O操作的时候就会调用协程操作，然后继续往下走，然后这个协程就卡在这里等待数据的返回</span></span><br><span class="line">    data = resp.read()</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.python.org/'</span>),  <span class="comment">#这里的f是调用这个方法，第二个是调用方的参数</span></span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.yahoo.com/'</span>),</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://github.com/'</span>),</span><br><span class="line">]) </span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">gevent.spawn(f, 'https://www.python.org/'),  #这里的f是调用这个方法，第二个是调用方的参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当函数f里的代码遇到I/O操作的时候，函数就卡在哪里等待数据的返回，但是协程不会等待而是继续操作!</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Socket-Server模块&quot;&gt;&lt;a href=&quot;#Socket-Server模块&quot; class=&quot;headerlink&quot; title=&quot;Socket Server模块&quot;&gt;&lt;/a&gt;Socket Server模块&lt;/h2&gt;&lt;p&gt;SocketServer内部使用 I
      
    
    </summary>
    
      <category term="运维开发" scheme="https://wandouduoduo.netlify.com/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
      <category term="语言积累" scheme="https://wandouduoduo.netlify.com/categories/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/%E8%AF%AD%E8%A8%80%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="Python" scheme="https://wandouduoduo.netlify.com/tags/Python/"/>
    
  </entry>
  
</feed>
